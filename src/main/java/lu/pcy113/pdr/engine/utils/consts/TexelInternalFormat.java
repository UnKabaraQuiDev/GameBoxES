package lu.pcy113.pdr.engine.utils.consts;

import org.lwjgl.opengl.GL40;

public enum TexelInternalFormat implements GLConstant {
	
	// Base Internal Formats
	RED(GL40.GL_RED, null), RG(GL40.GL_RG, null), RGB(GL40.GL_RGB, null), RGBA(GL40.GL_RGBA, null),
	DEPTH_COMPONENT(GL40.GL_DEPTH_COMPONENT, null), DEPTH_STENCIL(GL40.GL_DEPTH_STENCIL, null),
	
	// Sized Internal Formats
	R8(GL40.GL_R8, RED), R8_SNORM(GL40.GL_R8_SNORM, RED), R16(GL40.GL_R16, RED), R16_SNORM(GL40.GL_R16_SNORM, RED),
	RG8(GL40.GL_RG8, RG), RG8_SNORM(GL40.GL_RG8_SNORM, RG), RG16(GL40.GL_RG16, RG), RG16_SNORM(GL40.GL_RG16_SNORM, RG),
	R3G3B2(GL40.GL_R3_G3_B2, RGB),
	RGB4(GL40.GL_RGB4, RGB), RGB5(GL40.GL_RGB5, RGB), RGB8(GL40.GL_RGB8, RGB), RGB8_SNORM(GL40.GL_RGB8_SNORM, RGB),
	RGB10(GL40.GL_RGB10, RGB), RGB12(GL40.GL_RGB12, RGB), RGB16(GL40.GL_RGB16, RGB), RGB16_SNORM(GL40.GL_RGB16_SNORM, RGB),
	RGBA2(GL40.GL_RGBA2, RGBA), RGBA4(GL40.GL_RGBA4, RGBA), RGB5_A1(GL40.GL_RGB5_A1, RGBA), RGBA8(GL40.GL_RGBA8, RGBA), RGBA8_SNORM(GL40.GL_RGBA8_SNORM, RGBA),
	RGB10A2(GL40.GL_RGB10_A2, RGBA), RGB10A2UI(GL40.GL_RGB10_A2UI, RGBA),
	RGBA12(GL40.GL_RGBA12, RGBA), RGBA16(GL40.GL_RGBA16, RGBA), //RGBA16_SNORM(GL40.GL_RGBA16_SNORM),
	SRGB8(GL40.GL_SRGB8, RGB), SRGB8A8(GL40.GL_SRGB8_ALPHA8, RGBA),
	R16F(GL40.GL_R16F, RED), RG16F(GL40.GL_RG16F, RG), RGB16F(GL40.GL_RGB16F, RGB), RGBA16F(GL40.GL_RGBA16F, RGBA),
	R32F(GL40.GL_R32F, RED), RG32F(GL40.GL_RG32F, RG), RGB32F(GL40.GL_RGB32F, RGB), RGBA32F(GL40.GL_RGBA32F, RGBA),
	R11FG11FB10F(GL40.GL_R11F_G11F_B10F, RGB),
	RGB9E5(GL40.GL_RGB9_E5, RGB),
	R8I(GL40.GL_R8I, RED), R8UI(GL40.GL_R8UI, RED),
	R16I(GL40.GL_R16I, RED), R16UI(GL40.GL_R16UI, RED),
	R32I(GL40.GL_R32I, RED), R32UI(GL40.GL_R32UI, RED),
	RG8I(GL40.GL_RG8I, RG), RG8UI(GL40.GL_RG8UI, RG),
	RG16I(GL40.GL_RG16I, RG), RG16UI(GL40.GL_RG16UI, RG),
	RG32I(GL40.GL_RG32I, RG), RG32UI(GL40.GL_RG32UI, RG),
	RGB8I(GL40.GL_RGB8I, RGB), RGB8UI(GL40.GL_RGB8UI, RGB),
	RGB16I(GL40.GL_RGB16I, RGB), RGB16UI(GL40.GL_RGB16UI, RGB),
	RGB32I(GL40.GL_RGB32I, RGB), RGB32UI(GL40.GL_RGB32UI, RGB),
	RGBA8I(GL40.GL_RGBA8I, RGBA), RGBA8UI(GL40.GL_RGBA8UI, RGBA),
	RGBA16I(GL40.GL_RGBA16I, RGBA), RGBA16UI(GL40.GL_RGBA16UI, RGBA),
	RGBA32I(GL40.GL_RGBA32I, RGBA), RGBA32UI(GL40.GL_RGBA32UI, RGBA),
	
	// Compressed Internal Formats
	COMP_RED(GL40.GL_COMPRESSED_RED, RED), COMP_RG(GL40.GL_COMPRESSED_RG, RG), COMP_RGB(GL40.GL_COMPRESSED_RGB, RGB), COMP_RGBA(GL40.GL_COMPRESSED_RGBA, RGBA),
	COMP_SRGB(GL40.GL_COMPRESSED_SRGB, RGB), COMP_SRGBA(GL40.GL_COMPRESSED_SRGB_ALPHA, RGBA),
	COMP_RED_RGTC1(GL40.GL_COMPRESSED_RED_RGTC1, RED), COMP_SIGNED_RED_RGTC1(GL40.GL_COMPRESSED_SIGNED_RED_RGTC1, RED),
	COMP_RG_RGTC2(GL40.GL_COMPRESSED_RG_RGTC2, RG), COMP_SIGNED_RG_RGTC2(GL40.GL_COMPRESSED_SIGNED_RG_RGTC2, RG);
	//COMP_RGBA_BPTC_UNORM(GL40.GL_COMPRESSED_RGBA_BPTC_UNORM), COMP_SRGBA_BPTC_UNORM(GL40.GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM),
	//COMP_RGB_BPTC_SF(GL40.GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT), COMP_RGB_BPTC_UF(GL40.GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT);
	
	private int glId;
	private TexelInternalFormat base;
	
	private TexelInternalFormat(int id, TexelInternalFormat base) {
		this.glId = id;
		this.base = base;
	}
	
	@Override
	public int getGlId() {return glId;}
	public TexelInternalFormat getBase() {return base;}
	public boolean isBase() {return base == null;}
	
}
