package lu.kbra.gamebox.client.es.engine.utils.gl.wrapper;

import org.lwjgl.opengles.GLES30;

public class GL_W_GLES30 implements GL_W_Call {
	public void init() {
		GL_W.WRAPPER = this;
		GL_W.GL_READ_BUFFER = GLES30.GL_READ_BUFFER;
		GL_W.GL_UNPACK_ROW_LENGTH = GLES30.GL_UNPACK_ROW_LENGTH;
		GL_W.GL_UNPACK_SKIP_ROWS = GLES30.GL_UNPACK_SKIP_ROWS;
		GL_W.GL_UNPACK_SKIP_PIXELS = GLES30.GL_UNPACK_SKIP_PIXELS;
		GL_W.GL_PACK_ROW_LENGTH = GLES30.GL_PACK_ROW_LENGTH;
		GL_W.GL_PACK_SKIP_ROWS = GLES30.GL_PACK_SKIP_ROWS;
		GL_W.GL_PACK_SKIP_PIXELS = GLES30.GL_PACK_SKIP_PIXELS;
		GL_W.GL_COLOR = GLES30.GL_COLOR;
		GL_W.GL_DEPTH = GLES30.GL_DEPTH;
		GL_W.GL_STENCIL = GLES30.GL_STENCIL;
		GL_W.GL_RED = GLES30.GL_RED;
		GL_W.GL_RGB8 = GLES30.GL_RGB8;
		GL_W.GL_RGBA8 = GLES30.GL_RGBA8;
		GL_W.GL_RGB10_A2 = GLES30.GL_RGB10_A2;
		GL_W.GL_TEXTURE_BINDING_3D = GLES30.GL_TEXTURE_BINDING_3D;
		GL_W.GL_UNPACK_SKIP_IMAGES = GLES30.GL_UNPACK_SKIP_IMAGES;
		GL_W.GL_UNPACK_IMAGE_HEIGHT = GLES30.GL_UNPACK_IMAGE_HEIGHT;
		GL_W.GL_TEXTURE_3D = GLES30.GL_TEXTURE_3D;
		GL_W.GL_TEXTURE_WRAP_R = GLES30.GL_TEXTURE_WRAP_R;
		GL_W.GL_MAX_3D_TEXTURE_SIZE = GLES30.GL_MAX_3D_TEXTURE_SIZE;
		GL_W.GL_UNSIGNED_INT_2_10_10_10_REV = GLES30.GL_UNSIGNED_INT_2_10_10_10_REV;
		GL_W.GL_MAX_ELEMENTS_VERTICES = GLES30.GL_MAX_ELEMENTS_VERTICES;
		GL_W.GL_MAX_ELEMENTS_INDICES = GLES30.GL_MAX_ELEMENTS_INDICES;
		GL_W.GL_TEXTURE_MIN_LOD = GLES30.GL_TEXTURE_MIN_LOD;
		GL_W.GL_TEXTURE_MAX_LOD = GLES30.GL_TEXTURE_MAX_LOD;
		GL_W.GL_TEXTURE_BASE_LEVEL = GLES30.GL_TEXTURE_BASE_LEVEL;
		GL_W.GL_TEXTURE_MAX_LEVEL = GLES30.GL_TEXTURE_MAX_LEVEL;
		GL_W.GL_MIN = GLES30.GL_MIN;
		GL_W.GL_MAX = GLES30.GL_MAX;
		GL_W.GL_DEPTH_COMPONENT24 = GLES30.GL_DEPTH_COMPONENT24;
		GL_W.GL_MAX_TEXTURE_LOD_BIAS = GLES30.GL_MAX_TEXTURE_LOD_BIAS;
		GL_W.GL_TEXTURE_COMPARE_MODE = GLES30.GL_TEXTURE_COMPARE_MODE;
		GL_W.GL_TEXTURE_COMPARE_FUNC = GLES30.GL_TEXTURE_COMPARE_FUNC;
		GL_W.GL_CURRENT_QUERY = GLES30.GL_CURRENT_QUERY;
		GL_W.GL_QUERY_RESULT = GLES30.GL_QUERY_RESULT;
		GL_W.GL_QUERY_RESULT_AVAILABLE = GLES30.GL_QUERY_RESULT_AVAILABLE;
		GL_W.GL_BUFFER_MAPPED = GLES30.GL_BUFFER_MAPPED;
		GL_W.GL_BUFFER_MAP_POINTER = GLES30.GL_BUFFER_MAP_POINTER;
		GL_W.GL_STREAM_READ = GLES30.GL_STREAM_READ;
		GL_W.GL_STREAM_COPY = GLES30.GL_STREAM_COPY;
		GL_W.GL_STATIC_READ = GLES30.GL_STATIC_READ;
		GL_W.GL_STATIC_COPY = GLES30.GL_STATIC_COPY;
		GL_W.GL_DYNAMIC_READ = GLES30.GL_DYNAMIC_READ;
		GL_W.GL_DYNAMIC_COPY = GLES30.GL_DYNAMIC_COPY;
		GL_W.GL_MAX_DRAW_BUFFERS = GLES30.GL_MAX_DRAW_BUFFERS;
		GL_W.GL_DRAW_BUFFER0 = GLES30.GL_DRAW_BUFFER0;
		GL_W.GL_DRAW_BUFFER1 = GLES30.GL_DRAW_BUFFER1;
		GL_W.GL_DRAW_BUFFER2 = GLES30.GL_DRAW_BUFFER2;
		GL_W.GL_DRAW_BUFFER3 = GLES30.GL_DRAW_BUFFER3;
		GL_W.GL_DRAW_BUFFER4 = GLES30.GL_DRAW_BUFFER4;
		GL_W.GL_DRAW_BUFFER5 = GLES30.GL_DRAW_BUFFER5;
		GL_W.GL_DRAW_BUFFER6 = GLES30.GL_DRAW_BUFFER6;
		GL_W.GL_DRAW_BUFFER7 = GLES30.GL_DRAW_BUFFER7;
		GL_W.GL_DRAW_BUFFER8 = GLES30.GL_DRAW_BUFFER8;
		GL_W.GL_DRAW_BUFFER9 = GLES30.GL_DRAW_BUFFER9;
		GL_W.GL_DRAW_BUFFER10 = GLES30.GL_DRAW_BUFFER10;
		GL_W.GL_DRAW_BUFFER11 = GLES30.GL_DRAW_BUFFER11;
		GL_W.GL_DRAW_BUFFER12 = GLES30.GL_DRAW_BUFFER12;
		GL_W.GL_DRAW_BUFFER13 = GLES30.GL_DRAW_BUFFER13;
		GL_W.GL_DRAW_BUFFER14 = GLES30.GL_DRAW_BUFFER14;
		GL_W.GL_DRAW_BUFFER15 = GLES30.GL_DRAW_BUFFER15;
		GL_W.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = GLES30.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS;
		GL_W.GL_MAX_VERTEX_UNIFORM_COMPONENTS = GLES30.GL_MAX_VERTEX_UNIFORM_COMPONENTS;
		GL_W.GL_SAMPLER_3D = GLES30.GL_SAMPLER_3D;
		GL_W.GL_SAMPLER_2D_SHADOW = GLES30.GL_SAMPLER_2D_SHADOW;
		GL_W.GL_FRAGMENT_SHADER_DERIVATIVE_HINT = GLES30.GL_FRAGMENT_SHADER_DERIVATIVE_HINT;
		GL_W.GL_PIXEL_PACK_BUFFER = GLES30.GL_PIXEL_PACK_BUFFER;
		GL_W.GL_PIXEL_UNPACK_BUFFER = GLES30.GL_PIXEL_UNPACK_BUFFER;
		GL_W.GL_PIXEL_PACK_BUFFER_BINDING = GLES30.GL_PIXEL_PACK_BUFFER_BINDING;
		GL_W.GL_PIXEL_UNPACK_BUFFER_BINDING = GLES30.GL_PIXEL_UNPACK_BUFFER_BINDING;
		GL_W.GL_FLOAT_MAT2x3 = GLES30.GL_FLOAT_MAT2x3;
		GL_W.GL_FLOAT_MAT2x4 = GLES30.GL_FLOAT_MAT2x4;
		GL_W.GL_FLOAT_MAT3x2 = GLES30.GL_FLOAT_MAT3x2;
		GL_W.GL_FLOAT_MAT3x4 = GLES30.GL_FLOAT_MAT3x4;
		GL_W.GL_FLOAT_MAT4x2 = GLES30.GL_FLOAT_MAT4x2;
		GL_W.GL_FLOAT_MAT4x3 = GLES30.GL_FLOAT_MAT4x3;
		GL_W.GL_SRGB = GLES30.GL_SRGB;
		GL_W.GL_SRGB8 = GLES30.GL_SRGB8;
		GL_W.GL_SRGB8_ALPHA8 = GLES30.GL_SRGB8_ALPHA8;
		GL_W.GL_COMPARE_REF_TO_TEXTURE = GLES30.GL_COMPARE_REF_TO_TEXTURE;
		GL_W.GL_MAJOR_VERSION = GLES30.GL_MAJOR_VERSION;
		GL_W.GL_MINOR_VERSION = GLES30.GL_MINOR_VERSION;
		GL_W.GL_NUM_EXTENSIONS = GLES30.GL_NUM_EXTENSIONS;
		GL_W.GL_RGBA32F = GLES30.GL_RGBA32F;
		GL_W.GL_RGB32F = GLES30.GL_RGB32F;
		GL_W.GL_RGBA16F = GLES30.GL_RGBA16F;
		GL_W.GL_RGB16F = GLES30.GL_RGB16F;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_INTEGER = GLES30.GL_VERTEX_ATTRIB_ARRAY_INTEGER;
		GL_W.GL_MAX_ARRAY_TEXTURE_LAYERS = GLES30.GL_MAX_ARRAY_TEXTURE_LAYERS;
		GL_W.GL_MIN_PROGRAM_TEXEL_OFFSET = GLES30.GL_MIN_PROGRAM_TEXEL_OFFSET;
		GL_W.GL_MAX_PROGRAM_TEXEL_OFFSET = GLES30.GL_MAX_PROGRAM_TEXEL_OFFSET;
		GL_W.GL_MAX_VARYING_COMPONENTS = GLES30.GL_MAX_VARYING_COMPONENTS;
		GL_W.GL_TEXTURE_2D_ARRAY = GLES30.GL_TEXTURE_2D_ARRAY;
		GL_W.GL_TEXTURE_BINDING_2D_ARRAY = GLES30.GL_TEXTURE_BINDING_2D_ARRAY;
		GL_W.GL_R11F_G11F_B10F = GLES30.GL_R11F_G11F_B10F;
		GL_W.GL_UNSIGNED_INT_10F_11F_11F_REV = GLES30.GL_UNSIGNED_INT_10F_11F_11F_REV;
		GL_W.GL_RGB9_E5 = GLES30.GL_RGB9_E5;
		GL_W.GL_UNSIGNED_INT_5_9_9_9_REV = GLES30.GL_UNSIGNED_INT_5_9_9_9_REV;
		GL_W.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = GLES30.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER_MODE = GLES30.GL_TRANSFORM_FEEDBACK_BUFFER_MODE;
		GL_W.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = GLES30.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
		GL_W.GL_TRANSFORM_FEEDBACK_VARYINGS = GLES30.GL_TRANSFORM_FEEDBACK_VARYINGS;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER_START = GLES30.GL_TRANSFORM_FEEDBACK_BUFFER_START;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = GLES30.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE;
		GL_W.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = GLES30.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
		GL_W.GL_RASTERIZER_DISCARD = GLES30.GL_RASTERIZER_DISCARD;
		GL_W.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = GLES30.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
		GL_W.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = GLES30.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
		GL_W.GL_INTERLEAVED_ATTRIBS = GLES30.GL_INTERLEAVED_ATTRIBS;
		GL_W.GL_SEPARATE_ATTRIBS = GLES30.GL_SEPARATE_ATTRIBS;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER = GLES30.GL_TRANSFORM_FEEDBACK_BUFFER;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = GLES30.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING;
		GL_W.GL_RGBA32UI = GLES30.GL_RGBA32UI;
		GL_W.GL_RGB32UI = GLES30.GL_RGB32UI;
		GL_W.GL_RGBA16UI = GLES30.GL_RGBA16UI;
		GL_W.GL_RGB16UI = GLES30.GL_RGB16UI;
		GL_W.GL_RGBA8UI = GLES30.GL_RGBA8UI;
		GL_W.GL_RGB8UI = GLES30.GL_RGB8UI;
		GL_W.GL_RGBA32I = GLES30.GL_RGBA32I;
		GL_W.GL_RGB32I = GLES30.GL_RGB32I;
		GL_W.GL_RGBA16I = GLES30.GL_RGBA16I;
		GL_W.GL_RGB16I = GLES30.GL_RGB16I;
		GL_W.GL_RGBA8I = GLES30.GL_RGBA8I;
		GL_W.GL_RGB8I = GLES30.GL_RGB8I;
		GL_W.GL_RED_INTEGER = GLES30.GL_RED_INTEGER;
		GL_W.GL_RGB_INTEGER = GLES30.GL_RGB_INTEGER;
		GL_W.GL_RGBA_INTEGER = GLES30.GL_RGBA_INTEGER;
		GL_W.GL_SAMPLER_2D_ARRAY = GLES30.GL_SAMPLER_2D_ARRAY;
		GL_W.GL_SAMPLER_2D_ARRAY_SHADOW = GLES30.GL_SAMPLER_2D_ARRAY_SHADOW;
		GL_W.GL_SAMPLER_CUBE_SHADOW = GLES30.GL_SAMPLER_CUBE_SHADOW;
		GL_W.GL_UNSIGNED_INT_VEC2 = GLES30.GL_UNSIGNED_INT_VEC2;
		GL_W.GL_UNSIGNED_INT_VEC3 = GLES30.GL_UNSIGNED_INT_VEC3;
		GL_W.GL_UNSIGNED_INT_VEC4 = GLES30.GL_UNSIGNED_INT_VEC4;
		GL_W.GL_INT_SAMPLER_2D = GLES30.GL_INT_SAMPLER_2D;
		GL_W.GL_INT_SAMPLER_3D = GLES30.GL_INT_SAMPLER_3D;
		GL_W.GL_INT_SAMPLER_CUBE = GLES30.GL_INT_SAMPLER_CUBE;
		GL_W.GL_INT_SAMPLER_2D_ARRAY = GLES30.GL_INT_SAMPLER_2D_ARRAY;
		GL_W.GL_UNSIGNED_INT_SAMPLER_2D = GLES30.GL_UNSIGNED_INT_SAMPLER_2D;
		GL_W.GL_UNSIGNED_INT_SAMPLER_3D = GLES30.GL_UNSIGNED_INT_SAMPLER_3D;
		GL_W.GL_UNSIGNED_INT_SAMPLER_CUBE = GLES30.GL_UNSIGNED_INT_SAMPLER_CUBE;
		GL_W.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = GLES30.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY;
		GL_W.GL_BUFFER_ACCESS_FLAGS = GLES30.GL_BUFFER_ACCESS_FLAGS;
		GL_W.GL_BUFFER_MAP_LENGTH = GLES30.GL_BUFFER_MAP_LENGTH;
		GL_W.GL_BUFFER_MAP_OFFSET = GLES30.GL_BUFFER_MAP_OFFSET;
		GL_W.GL_DEPTH_COMPONENT32F = GLES30.GL_DEPTH_COMPONENT32F;
		GL_W.GL_DEPTH32F_STENCIL8 = GLES30.GL_DEPTH32F_STENCIL8;
		GL_W.GL_FLOAT_32_UNSIGNED_INT_24_8_REV = GLES30.GL_FLOAT_32_UNSIGNED_INT_24_8_REV;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = GLES30.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = GLES30.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = GLES30.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = GLES30.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = GLES30.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = GLES30.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = GLES30.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = GLES30.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
		GL_W.GL_FRAMEBUFFER_DEFAULT = GLES30.GL_FRAMEBUFFER_DEFAULT;
		GL_W.GL_FRAMEBUFFER_UNDEFINED = GLES30.GL_FRAMEBUFFER_UNDEFINED;
		GL_W.GL_DEPTH_STENCIL_ATTACHMENT = GLES30.GL_DEPTH_STENCIL_ATTACHMENT;
		GL_W.GL_DEPTH_STENCIL = GLES30.GL_DEPTH_STENCIL;
		GL_W.GL_UNSIGNED_INT_24_8 = GLES30.GL_UNSIGNED_INT_24_8;
		GL_W.GL_DEPTH24_STENCIL8 = GLES30.GL_DEPTH24_STENCIL8;
		GL_W.GL_UNSIGNED_NORMALIZED = GLES30.GL_UNSIGNED_NORMALIZED;
		GL_W.GL_DRAW_FRAMEBUFFER_BINDING = GLES30.GL_DRAW_FRAMEBUFFER_BINDING;
		GL_W.GL_READ_FRAMEBUFFER = GLES30.GL_READ_FRAMEBUFFER;
		GL_W.GL_DRAW_FRAMEBUFFER = GLES30.GL_DRAW_FRAMEBUFFER;
		GL_W.GL_READ_FRAMEBUFFER_BINDING = GLES30.GL_READ_FRAMEBUFFER_BINDING;
		GL_W.GL_RENDERBUFFER_SAMPLES = GLES30.GL_RENDERBUFFER_SAMPLES;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = GLES30.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
		GL_W.GL_MAX_COLOR_ATTACHMENTS = GLES30.GL_MAX_COLOR_ATTACHMENTS;
		GL_W.GL_COLOR_ATTACHMENT1 = GLES30.GL_COLOR_ATTACHMENT1;
		GL_W.GL_COLOR_ATTACHMENT2 = GLES30.GL_COLOR_ATTACHMENT2;
		GL_W.GL_COLOR_ATTACHMENT3 = GLES30.GL_COLOR_ATTACHMENT3;
		GL_W.GL_COLOR_ATTACHMENT4 = GLES30.GL_COLOR_ATTACHMENT4;
		GL_W.GL_COLOR_ATTACHMENT5 = GLES30.GL_COLOR_ATTACHMENT5;
		GL_W.GL_COLOR_ATTACHMENT6 = GLES30.GL_COLOR_ATTACHMENT6;
		GL_W.GL_COLOR_ATTACHMENT7 = GLES30.GL_COLOR_ATTACHMENT7;
		GL_W.GL_COLOR_ATTACHMENT8 = GLES30.GL_COLOR_ATTACHMENT8;
		GL_W.GL_COLOR_ATTACHMENT9 = GLES30.GL_COLOR_ATTACHMENT9;
		GL_W.GL_COLOR_ATTACHMENT10 = GLES30.GL_COLOR_ATTACHMENT10;
		GL_W.GL_COLOR_ATTACHMENT11 = GLES30.GL_COLOR_ATTACHMENT11;
		GL_W.GL_COLOR_ATTACHMENT12 = GLES30.GL_COLOR_ATTACHMENT12;
		GL_W.GL_COLOR_ATTACHMENT13 = GLES30.GL_COLOR_ATTACHMENT13;
		GL_W.GL_COLOR_ATTACHMENT14 = GLES30.GL_COLOR_ATTACHMENT14;
		GL_W.GL_COLOR_ATTACHMENT15 = GLES30.GL_COLOR_ATTACHMENT15;
		GL_W.GL_COLOR_ATTACHMENT16 = GLES30.GL_COLOR_ATTACHMENT16;
		GL_W.GL_COLOR_ATTACHMENT17 = GLES30.GL_COLOR_ATTACHMENT17;
		GL_W.GL_COLOR_ATTACHMENT18 = GLES30.GL_COLOR_ATTACHMENT18;
		GL_W.GL_COLOR_ATTACHMENT19 = GLES30.GL_COLOR_ATTACHMENT19;
		GL_W.GL_COLOR_ATTACHMENT20 = GLES30.GL_COLOR_ATTACHMENT20;
		GL_W.GL_COLOR_ATTACHMENT21 = GLES30.GL_COLOR_ATTACHMENT21;
		GL_W.GL_COLOR_ATTACHMENT22 = GLES30.GL_COLOR_ATTACHMENT22;
		GL_W.GL_COLOR_ATTACHMENT23 = GLES30.GL_COLOR_ATTACHMENT23;
		GL_W.GL_COLOR_ATTACHMENT24 = GLES30.GL_COLOR_ATTACHMENT24;
		GL_W.GL_COLOR_ATTACHMENT25 = GLES30.GL_COLOR_ATTACHMENT25;
		GL_W.GL_COLOR_ATTACHMENT26 = GLES30.GL_COLOR_ATTACHMENT26;
		GL_W.GL_COLOR_ATTACHMENT27 = GLES30.GL_COLOR_ATTACHMENT27;
		GL_W.GL_COLOR_ATTACHMENT28 = GLES30.GL_COLOR_ATTACHMENT28;
		GL_W.GL_COLOR_ATTACHMENT29 = GLES30.GL_COLOR_ATTACHMENT29;
		GL_W.GL_COLOR_ATTACHMENT30 = GLES30.GL_COLOR_ATTACHMENT30;
		GL_W.GL_COLOR_ATTACHMENT31 = GLES30.GL_COLOR_ATTACHMENT31;
		GL_W.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = GLES30.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
		GL_W.GL_MAX_SAMPLES = GLES30.GL_MAX_SAMPLES;
		GL_W.GL_HALF_FLOAT = GLES30.GL_HALF_FLOAT;
		GL_W.GL_MAP_READ_BIT = GLES30.GL_MAP_READ_BIT;
		GL_W.GL_MAP_WRITE_BIT = GLES30.GL_MAP_WRITE_BIT;
		GL_W.GL_MAP_INVALIDATE_RANGE_BIT = GLES30.GL_MAP_INVALIDATE_RANGE_BIT;
		GL_W.GL_MAP_INVALIDATE_BUFFER_BIT = GLES30.GL_MAP_INVALIDATE_BUFFER_BIT;
		GL_W.GL_MAP_FLUSH_EXPLICIT_BIT = GLES30.GL_MAP_FLUSH_EXPLICIT_BIT;
		GL_W.GL_MAP_UNSYNCHRONIZED_BIT = GLES30.GL_MAP_UNSYNCHRONIZED_BIT;
		GL_W.GL_RG = GLES30.GL_RG;
		GL_W.GL_RG_INTEGER = GLES30.GL_RG_INTEGER;
		GL_W.GL_R8 = GLES30.GL_R8;
		GL_W.GL_RG8 = GLES30.GL_RG8;
		GL_W.GL_R16F = GLES30.GL_R16F;
		GL_W.GL_R32F = GLES30.GL_R32F;
		GL_W.GL_RG16F = GLES30.GL_RG16F;
		GL_W.GL_RG32F = GLES30.GL_RG32F;
		GL_W.GL_R8I = GLES30.GL_R8I;
		GL_W.GL_R8UI = GLES30.GL_R8UI;
		GL_W.GL_R16I = GLES30.GL_R16I;
		GL_W.GL_R16UI = GLES30.GL_R16UI;
		GL_W.GL_R32I = GLES30.GL_R32I;
		GL_W.GL_R32UI = GLES30.GL_R32UI;
		GL_W.GL_RG8I = GLES30.GL_RG8I;
		GL_W.GL_RG8UI = GLES30.GL_RG8UI;
		GL_W.GL_RG16I = GLES30.GL_RG16I;
		GL_W.GL_RG16UI = GLES30.GL_RG16UI;
		GL_W.GL_RG32I = GLES30.GL_RG32I;
		GL_W.GL_RG32UI = GLES30.GL_RG32UI;
		GL_W.GL_VERTEX_ARRAY_BINDING = GLES30.GL_VERTEX_ARRAY_BINDING;
		GL_W.GL_R8_SNORM = GLES30.GL_R8_SNORM;
		GL_W.GL_RG8_SNORM = GLES30.GL_RG8_SNORM;
		GL_W.GL_RGB8_SNORM = GLES30.GL_RGB8_SNORM;
		GL_W.GL_RGBA8_SNORM = GLES30.GL_RGBA8_SNORM;
		GL_W.GL_SIGNED_NORMALIZED = GLES30.GL_SIGNED_NORMALIZED;
		GL_W.GL_PRIMITIVE_RESTART_FIXED_INDEX = GLES30.GL_PRIMITIVE_RESTART_FIXED_INDEX;
		GL_W.GL_COPY_READ_BUFFER = GLES30.GL_COPY_READ_BUFFER;
		GL_W.GL_COPY_WRITE_BUFFER = GLES30.GL_COPY_WRITE_BUFFER;
		GL_W.GL_COPY_READ_BUFFER_BINDING = GLES30.GL_COPY_READ_BUFFER_BINDING;
		GL_W.GL_COPY_WRITE_BUFFER_BINDING = GLES30.GL_COPY_WRITE_BUFFER_BINDING;
		GL_W.GL_UNIFORM_BUFFER = GLES30.GL_UNIFORM_BUFFER;
		GL_W.GL_UNIFORM_BUFFER_BINDING = GLES30.GL_UNIFORM_BUFFER_BINDING;
		GL_W.GL_UNIFORM_BUFFER_START = GLES30.GL_UNIFORM_BUFFER_START;
		GL_W.GL_UNIFORM_BUFFER_SIZE = GLES30.GL_UNIFORM_BUFFER_SIZE;
		GL_W.GL_MAX_VERTEX_UNIFORM_BLOCKS = GLES30.GL_MAX_VERTEX_UNIFORM_BLOCKS;
		GL_W.GL_MAX_FRAGMENT_UNIFORM_BLOCKS = GLES30.GL_MAX_FRAGMENT_UNIFORM_BLOCKS;
		GL_W.GL_MAX_COMBINED_UNIFORM_BLOCKS = GLES30.GL_MAX_COMBINED_UNIFORM_BLOCKS;
		GL_W.GL_MAX_UNIFORM_BUFFER_BINDINGS = GLES30.GL_MAX_UNIFORM_BUFFER_BINDINGS;
		GL_W.GL_MAX_UNIFORM_BLOCK_SIZE = GLES30.GL_MAX_UNIFORM_BLOCK_SIZE;
		GL_W.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = GLES30.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
		GL_W.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = GLES30.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
		GL_W.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = GLES30.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT;
		GL_W.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = GLES30.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH;
		GL_W.GL_ACTIVE_UNIFORM_BLOCKS = GLES30.GL_ACTIVE_UNIFORM_BLOCKS;
		GL_W.GL_UNIFORM_TYPE = GLES30.GL_UNIFORM_TYPE;
		GL_W.GL_UNIFORM_SIZE = GLES30.GL_UNIFORM_SIZE;
		GL_W.GL_UNIFORM_NAME_LENGTH = GLES30.GL_UNIFORM_NAME_LENGTH;
		GL_W.GL_UNIFORM_BLOCK_INDEX = GLES30.GL_UNIFORM_BLOCK_INDEX;
		GL_W.GL_UNIFORM_OFFSET = GLES30.GL_UNIFORM_OFFSET;
		GL_W.GL_UNIFORM_ARRAY_STRIDE = GLES30.GL_UNIFORM_ARRAY_STRIDE;
		GL_W.GL_UNIFORM_MATRIX_STRIDE = GLES30.GL_UNIFORM_MATRIX_STRIDE;
		GL_W.GL_UNIFORM_IS_ROW_MAJOR = GLES30.GL_UNIFORM_IS_ROW_MAJOR;
		GL_W.GL_UNIFORM_BLOCK_BINDING = GLES30.GL_UNIFORM_BLOCK_BINDING;
		GL_W.GL_UNIFORM_BLOCK_DATA_SIZE = GLES30.GL_UNIFORM_BLOCK_DATA_SIZE;
		GL_W.GL_UNIFORM_BLOCK_NAME_LENGTH = GLES30.GL_UNIFORM_BLOCK_NAME_LENGTH;
		GL_W.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = GLES30.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS;
		GL_W.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = GLES30.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
		GL_W.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = GLES30.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
		GL_W.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = GLES30.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
		GL_W.GL_INVALID_INDEX = GLES30.GL_INVALID_INDEX;
		GL_W.GL_MAX_VERTEX_OUTPUT_COMPONENTS = GLES30.GL_MAX_VERTEX_OUTPUT_COMPONENTS;
		GL_W.GL_MAX_FRAGMENT_INPUT_COMPONENTS = GLES30.GL_MAX_FRAGMENT_INPUT_COMPONENTS;
		GL_W.GL_MAX_SERVER_WAIT_TIMEOUT = GLES30.GL_MAX_SERVER_WAIT_TIMEOUT;
		GL_W.GL_OBJECT_TYPE = GLES30.GL_OBJECT_TYPE;
		GL_W.GL_SYNC_CONDITION = GLES30.GL_SYNC_CONDITION;
		GL_W.GL_SYNC_STATUS = GLES30.GL_SYNC_STATUS;
		GL_W.GL_SYNC_FLAGS = GLES30.GL_SYNC_FLAGS;
		GL_W.GL_SYNC_FENCE = GLES30.GL_SYNC_FENCE;
		GL_W.GL_SYNC_GPU_COMMANDS_COMPLETE = GLES30.GL_SYNC_GPU_COMMANDS_COMPLETE;
		GL_W.GL_UNSIGNALED = GLES30.GL_UNSIGNALED;
		GL_W.GL_SIGNALED = GLES30.GL_SIGNALED;
		GL_W.GL_ALREADY_SIGNALED = GLES30.GL_ALREADY_SIGNALED;
		GL_W.GL_TIMEOUT_EXPIRED = GLES30.GL_TIMEOUT_EXPIRED;
		GL_W.GL_CONDITION_SATISFIED = GLES30.GL_CONDITION_SATISFIED;
		GL_W.GL_WAIT_FAILED = GLES30.GL_WAIT_FAILED;
		GL_W.GL_SYNC_FLUSH_COMMANDS_BIT = GLES30.GL_SYNC_FLUSH_COMMANDS_BIT;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_DIVISOR = GLES30.GL_VERTEX_ATTRIB_ARRAY_DIVISOR;
		GL_W.GL_ANY_SAMPLES_PASSED = GLES30.GL_ANY_SAMPLES_PASSED;
		GL_W.GL_ANY_SAMPLES_PASSED_CONSERVATIVE = GLES30.GL_ANY_SAMPLES_PASSED_CONSERVATIVE;
		GL_W.GL_SAMPLER_BINDING = GLES30.GL_SAMPLER_BINDING;
		GL_W.GL_RGB10_A2UI = GLES30.GL_RGB10_A2UI;
		GL_W.GL_TEXTURE_SWIZZLE_R = GLES30.GL_TEXTURE_SWIZZLE_R;
		GL_W.GL_TEXTURE_SWIZZLE_G = GLES30.GL_TEXTURE_SWIZZLE_G;
		GL_W.GL_TEXTURE_SWIZZLE_B = GLES30.GL_TEXTURE_SWIZZLE_B;
		GL_W.GL_TEXTURE_SWIZZLE_A = GLES30.GL_TEXTURE_SWIZZLE_A;
		GL_W.GL_GREEN = GLES30.GL_GREEN;
		GL_W.GL_BLUE = GLES30.GL_BLUE;
		GL_W.GL_INT_2_10_10_10_REV = GLES30.GL_INT_2_10_10_10_REV;
		GL_W.GL_TRANSFORM_FEEDBACK = GLES30.GL_TRANSFORM_FEEDBACK;
		GL_W.GL_TRANSFORM_FEEDBACK_PAUSED = GLES30.GL_TRANSFORM_FEEDBACK_PAUSED;
		GL_W.GL_TRANSFORM_FEEDBACK_ACTIVE = GLES30.GL_TRANSFORM_FEEDBACK_ACTIVE;
		GL_W.GL_TRANSFORM_FEEDBACK_BINDING = GLES30.GL_TRANSFORM_FEEDBACK_BINDING;
		GL_W.GL_PROGRAM_BINARY_RETRIEVABLE_HINT = GLES30.GL_PROGRAM_BINARY_RETRIEVABLE_HINT;
		GL_W.GL_PROGRAM_BINARY_LENGTH = GLES30.GL_PROGRAM_BINARY_LENGTH;
		GL_W.GL_NUM_PROGRAM_BINARY_FORMATS = GLES30.GL_NUM_PROGRAM_BINARY_FORMATS;
		GL_W.GL_PROGRAM_BINARY_FORMATS = GLES30.GL_PROGRAM_BINARY_FORMATS;
		GL_W.GL_COMPRESSED_R11_EAC = GLES30.GL_COMPRESSED_R11_EAC;
		GL_W.GL_COMPRESSED_SIGNED_R11_EAC = GLES30.GL_COMPRESSED_SIGNED_R11_EAC;
		GL_W.GL_COMPRESSED_RG11_EAC = GLES30.GL_COMPRESSED_RG11_EAC;
		GL_W.GL_COMPRESSED_SIGNED_RG11_EAC = GLES30.GL_COMPRESSED_SIGNED_RG11_EAC;
		GL_W.GL_COMPRESSED_RGB8_ETC2 = GLES30.GL_COMPRESSED_RGB8_ETC2;
		GL_W.GL_COMPRESSED_SRGB8_ETC2 = GLES30.GL_COMPRESSED_SRGB8_ETC2;
		GL_W.GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = GLES30.GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
		GL_W.GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = GLES30.GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
		GL_W.GL_COMPRESSED_RGBA8_ETC2_EAC = GLES30.GL_COMPRESSED_RGBA8_ETC2_EAC;
		GL_W.GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = GLES30.GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
		GL_W.GL_TEXTURE_IMMUTABLE_FORMAT = GLES30.GL_TEXTURE_IMMUTABLE_FORMAT;
		GL_W.GL_MAX_ELEMENT_INDEX = GLES30.GL_MAX_ELEMENT_INDEX;
		GL_W.GL_NUM_SAMPLE_COUNTS = GLES30.GL_NUM_SAMPLE_COUNTS;
		GL_W.GL_TEXTURE_IMMUTABLE_LEVELS = GLES30.GL_TEXTURE_IMMUTABLE_LEVELS;
		GL_W.GL_DEPTH_BUFFER_BIT = GLES30.GL_DEPTH_BUFFER_BIT;
		GL_W.GL_STENCIL_BUFFER_BIT = GLES30.GL_STENCIL_BUFFER_BIT;
		GL_W.GL_COLOR_BUFFER_BIT = GLES30.GL_COLOR_BUFFER_BIT;
		GL_W.GL_FALSE = GLES30.GL_FALSE;
		GL_W.GL_TRUE = GLES30.GL_TRUE;
		GL_W.GL_POINTS = GLES30.GL_POINTS;
		GL_W.GL_LINES = GLES30.GL_LINES;
		GL_W.GL_LINE_LOOP = GLES30.GL_LINE_LOOP;
		GL_W.GL_LINE_STRIP = GLES30.GL_LINE_STRIP;
		GL_W.GL_TRIANGLES = GLES30.GL_TRIANGLES;
		GL_W.GL_TRIANGLE_STRIP = GLES30.GL_TRIANGLE_STRIP;
		GL_W.GL_TRIANGLE_FAN = GLES30.GL_TRIANGLE_FAN;
		GL_W.GL_ZERO = GLES30.GL_ZERO;
		GL_W.GL_ONE = GLES30.GL_ONE;
		GL_W.GL_SRC_COLOR = GLES30.GL_SRC_COLOR;
		GL_W.GL_ONE_MINUS_SRC_COLOR = GLES30.GL_ONE_MINUS_SRC_COLOR;
		GL_W.GL_SRC_ALPHA = GLES30.GL_SRC_ALPHA;
		GL_W.GL_ONE_MINUS_SRC_ALPHA = GLES30.GL_ONE_MINUS_SRC_ALPHA;
		GL_W.GL_DST_ALPHA = GLES30.GL_DST_ALPHA;
		GL_W.GL_ONE_MINUS_DST_ALPHA = GLES30.GL_ONE_MINUS_DST_ALPHA;
		GL_W.GL_DST_COLOR = GLES30.GL_DST_COLOR;
		GL_W.GL_ONE_MINUS_DST_COLOR = GLES30.GL_ONE_MINUS_DST_COLOR;
		GL_W.GL_SRC_ALPHA_SATURATE = GLES30.GL_SRC_ALPHA_SATURATE;
		GL_W.GL_FUNC_ADD = GLES30.GL_FUNC_ADD;
		GL_W.GL_BLEND_EQUATION = GLES30.GL_BLEND_EQUATION;
		GL_W.GL_BLEND_EQUATION_RGB = GLES30.GL_BLEND_EQUATION_RGB;
		GL_W.GL_BLEND_EQUATION_ALPHA = GLES30.GL_BLEND_EQUATION_ALPHA;
		GL_W.GL_FUNC_SUBTRACT = GLES30.GL_FUNC_SUBTRACT;
		GL_W.GL_FUNC_REVERSE_SUBTRACT = GLES30.GL_FUNC_REVERSE_SUBTRACT;
		GL_W.GL_BLEND_DST_RGB = GLES30.GL_BLEND_DST_RGB;
		GL_W.GL_BLEND_SRC_RGB = GLES30.GL_BLEND_SRC_RGB;
		GL_W.GL_BLEND_DST_ALPHA = GLES30.GL_BLEND_DST_ALPHA;
		GL_W.GL_BLEND_SRC_ALPHA = GLES30.GL_BLEND_SRC_ALPHA;
		GL_W.GL_CONSTANT_COLOR = GLES30.GL_CONSTANT_COLOR;
		GL_W.GL_ONE_MINUS_CONSTANT_COLOR = GLES30.GL_ONE_MINUS_CONSTANT_COLOR;
		GL_W.GL_CONSTANT_ALPHA = GLES30.GL_CONSTANT_ALPHA;
		GL_W.GL_ONE_MINUS_CONSTANT_ALPHA = GLES30.GL_ONE_MINUS_CONSTANT_ALPHA;
		GL_W.GL_BLEND_COLOR = GLES30.GL_BLEND_COLOR;
		GL_W.GL_ARRAY_BUFFER = GLES30.GL_ARRAY_BUFFER;
		GL_W.GL_ELEMENT_ARRAY_BUFFER = GLES30.GL_ELEMENT_ARRAY_BUFFER;
		GL_W.GL_ARRAY_BUFFER_BINDING = GLES30.GL_ARRAY_BUFFER_BINDING;
		GL_W.GL_ELEMENT_ARRAY_BUFFER_BINDING = GLES30.GL_ELEMENT_ARRAY_BUFFER_BINDING;
		GL_W.GL_STREAM_DRAW = GLES30.GL_STREAM_DRAW;
		GL_W.GL_STATIC_DRAW = GLES30.GL_STATIC_DRAW;
		GL_W.GL_DYNAMIC_DRAW = GLES30.GL_DYNAMIC_DRAW;
		GL_W.GL_BUFFER_SIZE = GLES30.GL_BUFFER_SIZE;
		GL_W.GL_BUFFER_USAGE = GLES30.GL_BUFFER_USAGE;
		GL_W.GL_CURRENT_VERTEX_ATTRIB = GLES30.GL_CURRENT_VERTEX_ATTRIB;
		GL_W.GL_FRONT = GLES30.GL_FRONT;
		GL_W.GL_BACK = GLES30.GL_BACK;
		GL_W.GL_FRONT_AND_BACK = GLES30.GL_FRONT_AND_BACK;
		GL_W.GL_TEXTURE_2D = GLES30.GL_TEXTURE_2D;
		GL_W.GL_CULL_FACE = GLES30.GL_CULL_FACE;
		GL_W.GL_BLEND = GLES30.GL_BLEND;
		GL_W.GL_DITHER = GLES30.GL_DITHER;
		GL_W.GL_STENCIL_TEST = GLES30.GL_STENCIL_TEST;
		GL_W.GL_DEPTH_TEST = GLES30.GL_DEPTH_TEST;
		GL_W.GL_SCISSOR_TEST = GLES30.GL_SCISSOR_TEST;
		GL_W.GL_POLYGON_OFFSET_FILL = GLES30.GL_POLYGON_OFFSET_FILL;
		GL_W.GL_SAMPLE_ALPHA_TO_COVERAGE = GLES30.GL_SAMPLE_ALPHA_TO_COVERAGE;
		GL_W.GL_SAMPLE_COVERAGE = GLES30.GL_SAMPLE_COVERAGE;
		GL_W.GL_NO_ERROR = GLES30.GL_NO_ERROR;
		GL_W.GL_INVALID_ENUM = GLES30.GL_INVALID_ENUM;
		GL_W.GL_INVALID_VALUE = GLES30.GL_INVALID_VALUE;
		GL_W.GL_INVALID_OPERATION = GLES30.GL_INVALID_OPERATION;
		GL_W.GL_OUT_OF_MEMORY = GLES30.GL_OUT_OF_MEMORY;
		GL_W.GL_CW = GLES30.GL_CW;
		GL_W.GL_CCW = GLES30.GL_CCW;
		GL_W.GL_LINE_WIDTH = GLES30.GL_LINE_WIDTH;
		GL_W.GL_ALIASED_POINT_SIZE_RANGE = GLES30.GL_ALIASED_POINT_SIZE_RANGE;
		GL_W.GL_ALIASED_LINE_WIDTH_RANGE = GLES30.GL_ALIASED_LINE_WIDTH_RANGE;
		GL_W.GL_CULL_FACE_MODE = GLES30.GL_CULL_FACE_MODE;
		GL_W.GL_FRONT_FACE = GLES30.GL_FRONT_FACE;
		GL_W.GL_DEPTH_RANGE = GLES30.GL_DEPTH_RANGE;
		GL_W.GL_DEPTH_WRITEMASK = GLES30.GL_DEPTH_WRITEMASK;
		GL_W.GL_DEPTH_CLEAR_VALUE = GLES30.GL_DEPTH_CLEAR_VALUE;
		GL_W.GL_DEPTH_FUNC = GLES30.GL_DEPTH_FUNC;
		GL_W.GL_STENCIL_CLEAR_VALUE = GLES30.GL_STENCIL_CLEAR_VALUE;
		GL_W.GL_STENCIL_FUNC = GLES30.GL_STENCIL_FUNC;
		GL_W.GL_STENCIL_FAIL = GLES30.GL_STENCIL_FAIL;
		GL_W.GL_STENCIL_PASS_DEPTH_FAIL = GLES30.GL_STENCIL_PASS_DEPTH_FAIL;
		GL_W.GL_STENCIL_PASS_DEPTH_PASS = GLES30.GL_STENCIL_PASS_DEPTH_PASS;
		GL_W.GL_STENCIL_REF = GLES30.GL_STENCIL_REF;
		GL_W.GL_STENCIL_VALUE_MASK = GLES30.GL_STENCIL_VALUE_MASK;
		GL_W.GL_STENCIL_WRITEMASK = GLES30.GL_STENCIL_WRITEMASK;
		GL_W.GL_STENCIL_BACK_FUNC = GLES30.GL_STENCIL_BACK_FUNC;
		GL_W.GL_STENCIL_BACK_FAIL = GLES30.GL_STENCIL_BACK_FAIL;
		GL_W.GL_STENCIL_BACK_PASS_DEPTH_FAIL = GLES30.GL_STENCIL_BACK_PASS_DEPTH_FAIL;
		GL_W.GL_STENCIL_BACK_PASS_DEPTH_PASS = GLES30.GL_STENCIL_BACK_PASS_DEPTH_PASS;
		GL_W.GL_STENCIL_BACK_REF = GLES30.GL_STENCIL_BACK_REF;
		GL_W.GL_STENCIL_BACK_VALUE_MASK = GLES30.GL_STENCIL_BACK_VALUE_MASK;
		GL_W.GL_STENCIL_BACK_WRITEMASK = GLES30.GL_STENCIL_BACK_WRITEMASK;
		GL_W.GL_VIEWPORT = GLES30.GL_VIEWPORT;
		GL_W.GL_SCISSOR_BOX = GLES30.GL_SCISSOR_BOX;
		GL_W.GL_COLOR_CLEAR_VALUE = GLES30.GL_COLOR_CLEAR_VALUE;
		GL_W.GL_COLOR_WRITEMASK = GLES30.GL_COLOR_WRITEMASK;
		GL_W.GL_UNPACK_ALIGNMENT = GLES30.GL_UNPACK_ALIGNMENT;
		GL_W.GL_PACK_ALIGNMENT = GLES30.GL_PACK_ALIGNMENT;
		GL_W.GL_MAX_TEXTURE_SIZE = GLES30.GL_MAX_TEXTURE_SIZE;
		GL_W.GL_MAX_VIEWPORT_DIMS = GLES30.GL_MAX_VIEWPORT_DIMS;
		GL_W.GL_SUBPIXEL_BITS = GLES30.GL_SUBPIXEL_BITS;
		GL_W.GL_RED_BITS = GLES30.GL_RED_BITS;
		GL_W.GL_GREEN_BITS = GLES30.GL_GREEN_BITS;
		GL_W.GL_BLUE_BITS = GLES30.GL_BLUE_BITS;
		GL_W.GL_ALPHA_BITS = GLES30.GL_ALPHA_BITS;
		GL_W.GL_DEPTH_BITS = GLES30.GL_DEPTH_BITS;
		GL_W.GL_STENCIL_BITS = GLES30.GL_STENCIL_BITS;
		GL_W.GL_POLYGON_OFFSET_UNITS = GLES30.GL_POLYGON_OFFSET_UNITS;
		GL_W.GL_POLYGON_OFFSET_FACTOR = GLES30.GL_POLYGON_OFFSET_FACTOR;
		GL_W.GL_TEXTURE_BINDING_2D = GLES30.GL_TEXTURE_BINDING_2D;
		GL_W.GL_SAMPLE_BUFFERS = GLES30.GL_SAMPLE_BUFFERS;
		GL_W.GL_SAMPLES = GLES30.GL_SAMPLES;
		GL_W.GL_SAMPLE_COVERAGE_VALUE = GLES30.GL_SAMPLE_COVERAGE_VALUE;
		GL_W.GL_SAMPLE_COVERAGE_INVERT = GLES30.GL_SAMPLE_COVERAGE_INVERT;
		GL_W.GL_NUM_COMPRESSED_TEXTURE_FORMATS = GLES30.GL_NUM_COMPRESSED_TEXTURE_FORMATS;
		GL_W.GL_COMPRESSED_TEXTURE_FORMATS = GLES30.GL_COMPRESSED_TEXTURE_FORMATS;
		GL_W.GL_DONT_CARE = GLES30.GL_DONT_CARE;
		GL_W.GL_FASTEST = GLES30.GL_FASTEST;
		GL_W.GL_NICEST = GLES30.GL_NICEST;
		GL_W.GL_GENERATE_MIPMAP_HINT = GLES30.GL_GENERATE_MIPMAP_HINT;
		GL_W.GL_BYTE = GLES30.GL_BYTE;
		GL_W.GL_UNSIGNED_BYTE = GLES30.GL_UNSIGNED_BYTE;
		GL_W.GL_SHORT = GLES30.GL_SHORT;
		GL_W.GL_UNSIGNED_SHORT = GLES30.GL_UNSIGNED_SHORT;
		GL_W.GL_INT = GLES30.GL_INT;
		GL_W.GL_UNSIGNED_INT = GLES30.GL_UNSIGNED_INT;
		GL_W.GL_FLOAT = GLES30.GL_FLOAT;
		GL_W.GL_FIXED = GLES30.GL_FIXED;
		GL_W.GL_DEPTH_COMPONENT = GLES30.GL_DEPTH_COMPONENT;
		GL_W.GL_ALPHA = GLES30.GL_ALPHA;
		GL_W.GL_RGB = GLES30.GL_RGB;
		GL_W.GL_RGBA = GLES30.GL_RGBA;
		GL_W.GL_LUMINANCE = GLES30.GL_LUMINANCE;
		GL_W.GL_LUMINANCE_ALPHA = GLES30.GL_LUMINANCE_ALPHA;
		GL_W.GL_UNSIGNED_SHORT_4_4_4_4 = GLES30.GL_UNSIGNED_SHORT_4_4_4_4;
		GL_W.GL_UNSIGNED_SHORT_5_5_5_1 = GLES30.GL_UNSIGNED_SHORT_5_5_5_1;
		GL_W.GL_UNSIGNED_SHORT_5_6_5 = GLES30.GL_UNSIGNED_SHORT_5_6_5;
		GL_W.GL_FRAGMENT_SHADER = GLES30.GL_FRAGMENT_SHADER;
		GL_W.GL_VERTEX_SHADER = GLES30.GL_VERTEX_SHADER;
		GL_W.GL_MAX_VERTEX_ATTRIBS = GLES30.GL_MAX_VERTEX_ATTRIBS;
		GL_W.GL_MAX_VERTEX_UNIFORM_VECTORS = GLES30.GL_MAX_VERTEX_UNIFORM_VECTORS;
		GL_W.GL_MAX_VARYING_VECTORS = GLES30.GL_MAX_VARYING_VECTORS;
		GL_W.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = GLES30.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS;
		GL_W.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = GLES30.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS;
		GL_W.GL_MAX_TEXTURE_IMAGE_UNITS = GLES30.GL_MAX_TEXTURE_IMAGE_UNITS;
		GL_W.GL_MAX_FRAGMENT_UNIFORM_VECTORS = GLES30.GL_MAX_FRAGMENT_UNIFORM_VECTORS;
		GL_W.GL_SHADER_TYPE = GLES30.GL_SHADER_TYPE;
		GL_W.GL_DELETE_STATUS = GLES30.GL_DELETE_STATUS;
		GL_W.GL_LINK_STATUS = GLES30.GL_LINK_STATUS;
		GL_W.GL_VALIDATE_STATUS = GLES30.GL_VALIDATE_STATUS;
		GL_W.GL_ATTACHED_SHADERS = GLES30.GL_ATTACHED_SHADERS;
		GL_W.GL_ACTIVE_UNIFORMS = GLES30.GL_ACTIVE_UNIFORMS;
		GL_W.GL_ACTIVE_UNIFORM_MAX_LENGTH = GLES30.GL_ACTIVE_UNIFORM_MAX_LENGTH;
		GL_W.GL_ACTIVE_ATTRIBUTES = GLES30.GL_ACTIVE_ATTRIBUTES;
		GL_W.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = GLES30.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH;
		GL_W.GL_SHADING_LANGUAGE_VERSION = GLES30.GL_SHADING_LANGUAGE_VERSION;
		GL_W.GL_CURRENT_PROGRAM = GLES30.GL_CURRENT_PROGRAM;
		GL_W.GL_NEVER = GLES30.GL_NEVER;
		GL_W.GL_LESS = GLES30.GL_LESS;
		GL_W.GL_EQUAL = GLES30.GL_EQUAL;
		GL_W.GL_LEQUAL = GLES30.GL_LEQUAL;
		GL_W.GL_GREATER = GLES30.GL_GREATER;
		GL_W.GL_NOTEQUAL = GLES30.GL_NOTEQUAL;
		GL_W.GL_GEQUAL = GLES30.GL_GEQUAL;
		GL_W.GL_ALWAYS = GLES30.GL_ALWAYS;
		GL_W.GL_KEEP = GLES30.GL_KEEP;
		GL_W.GL_REPLACE = GLES30.GL_REPLACE;
		GL_W.GL_INCR = GLES30.GL_INCR;
		GL_W.GL_DECR = GLES30.GL_DECR;
		GL_W.GL_INVERT = GLES30.GL_INVERT;
		GL_W.GL_INCR_WRAP = GLES30.GL_INCR_WRAP;
		GL_W.GL_DECR_WRAP = GLES30.GL_DECR_WRAP;
		GL_W.GL_VENDOR = GLES30.GL_VENDOR;
		GL_W.GL_RENDERER = GLES30.GL_RENDERER;
		GL_W.GL_VERSION = GLES30.GL_VERSION;
		GL_W.GL_EXTENSIONS = GLES30.GL_EXTENSIONS;
		GL_W.GL_NEAREST = GLES30.GL_NEAREST;
		GL_W.GL_LINEAR = GLES30.GL_LINEAR;
		GL_W.GL_NEAREST_MIPMAP_NEAREST = GLES30.GL_NEAREST_MIPMAP_NEAREST;
		GL_W.GL_LINEAR_MIPMAP_NEAREST = GLES30.GL_LINEAR_MIPMAP_NEAREST;
		GL_W.GL_NEAREST_MIPMAP_LINEAR = GLES30.GL_NEAREST_MIPMAP_LINEAR;
		GL_W.GL_LINEAR_MIPMAP_LINEAR = GLES30.GL_LINEAR_MIPMAP_LINEAR;
		GL_W.GL_TEXTURE_MAG_FILTER = GLES30.GL_TEXTURE_MAG_FILTER;
		GL_W.GL_TEXTURE_MIN_FILTER = GLES30.GL_TEXTURE_MIN_FILTER;
		GL_W.GL_TEXTURE_WRAP_S = GLES30.GL_TEXTURE_WRAP_S;
		GL_W.GL_TEXTURE_WRAP_T = GLES30.GL_TEXTURE_WRAP_T;
		GL_W.GL_TEXTURE = GLES30.GL_TEXTURE;
		GL_W.GL_TEXTURE_CUBE_MAP = GLES30.GL_TEXTURE_CUBE_MAP;
		GL_W.GL_TEXTURE_BINDING_CUBE_MAP = GLES30.GL_TEXTURE_BINDING_CUBE_MAP;
		GL_W.GL_TEXTURE_CUBE_MAP_POSITIVE_X = GLES30.GL_TEXTURE_CUBE_MAP_POSITIVE_X;
		GL_W.GL_TEXTURE_CUBE_MAP_NEGATIVE_X = GLES30.GL_TEXTURE_CUBE_MAP_NEGATIVE_X;
		GL_W.GL_TEXTURE_CUBE_MAP_POSITIVE_Y = GLES30.GL_TEXTURE_CUBE_MAP_POSITIVE_Y;
		GL_W.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = GLES30.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;
		GL_W.GL_TEXTURE_CUBE_MAP_POSITIVE_Z = GLES30.GL_TEXTURE_CUBE_MAP_POSITIVE_Z;
		GL_W.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = GLES30.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;
		GL_W.GL_MAX_CUBE_MAP_TEXTURE_SIZE = GLES30.GL_MAX_CUBE_MAP_TEXTURE_SIZE;
		GL_W.GL_TEXTURE0 = GLES30.GL_TEXTURE0;
		GL_W.GL_TEXTURE1 = GLES30.GL_TEXTURE1;
		GL_W.GL_TEXTURE2 = GLES30.GL_TEXTURE2;
		GL_W.GL_TEXTURE3 = GLES30.GL_TEXTURE3;
		GL_W.GL_TEXTURE4 = GLES30.GL_TEXTURE4;
		GL_W.GL_TEXTURE5 = GLES30.GL_TEXTURE5;
		GL_W.GL_TEXTURE6 = GLES30.GL_TEXTURE6;
		GL_W.GL_TEXTURE7 = GLES30.GL_TEXTURE7;
		GL_W.GL_TEXTURE8 = GLES30.GL_TEXTURE8;
		GL_W.GL_TEXTURE9 = GLES30.GL_TEXTURE9;
		GL_W.GL_TEXTURE10 = GLES30.GL_TEXTURE10;
		GL_W.GL_TEXTURE11 = GLES30.GL_TEXTURE11;
		GL_W.GL_TEXTURE12 = GLES30.GL_TEXTURE12;
		GL_W.GL_TEXTURE13 = GLES30.GL_TEXTURE13;
		GL_W.GL_TEXTURE14 = GLES30.GL_TEXTURE14;
		GL_W.GL_TEXTURE15 = GLES30.GL_TEXTURE15;
		GL_W.GL_TEXTURE16 = GLES30.GL_TEXTURE16;
		GL_W.GL_TEXTURE17 = GLES30.GL_TEXTURE17;
		GL_W.GL_TEXTURE18 = GLES30.GL_TEXTURE18;
		GL_W.GL_TEXTURE19 = GLES30.GL_TEXTURE19;
		GL_W.GL_TEXTURE20 = GLES30.GL_TEXTURE20;
		GL_W.GL_TEXTURE21 = GLES30.GL_TEXTURE21;
		GL_W.GL_TEXTURE22 = GLES30.GL_TEXTURE22;
		GL_W.GL_TEXTURE23 = GLES30.GL_TEXTURE23;
		GL_W.GL_TEXTURE24 = GLES30.GL_TEXTURE24;
		GL_W.GL_TEXTURE25 = GLES30.GL_TEXTURE25;
		GL_W.GL_TEXTURE26 = GLES30.GL_TEXTURE26;
		GL_W.GL_TEXTURE27 = GLES30.GL_TEXTURE27;
		GL_W.GL_TEXTURE28 = GLES30.GL_TEXTURE28;
		GL_W.GL_TEXTURE29 = GLES30.GL_TEXTURE29;
		GL_W.GL_TEXTURE30 = GLES30.GL_TEXTURE30;
		GL_W.GL_TEXTURE31 = GLES30.GL_TEXTURE31;
		GL_W.GL_ACTIVE_TEXTURE = GLES30.GL_ACTIVE_TEXTURE;
		GL_W.GL_REPEAT = GLES30.GL_REPEAT;
		GL_W.GL_CLAMP_TO_EDGE = GLES30.GL_CLAMP_TO_EDGE;
		GL_W.GL_MIRRORED_REPEAT = GLES30.GL_MIRRORED_REPEAT;
		GL_W.GL_FLOAT_VEC2 = GLES30.GL_FLOAT_VEC2;
		GL_W.GL_FLOAT_VEC3 = GLES30.GL_FLOAT_VEC3;
		GL_W.GL_FLOAT_VEC4 = GLES30.GL_FLOAT_VEC4;
		GL_W.GL_INT_VEC2 = GLES30.GL_INT_VEC2;
		GL_W.GL_INT_VEC3 = GLES30.GL_INT_VEC3;
		GL_W.GL_INT_VEC4 = GLES30.GL_INT_VEC4;
		GL_W.GL_BOOL = GLES30.GL_BOOL;
		GL_W.GL_BOOL_VEC2 = GLES30.GL_BOOL_VEC2;
		GL_W.GL_BOOL_VEC3 = GLES30.GL_BOOL_VEC3;
		GL_W.GL_BOOL_VEC4 = GLES30.GL_BOOL_VEC4;
		GL_W.GL_FLOAT_MAT2 = GLES30.GL_FLOAT_MAT2;
		GL_W.GL_FLOAT_MAT3 = GLES30.GL_FLOAT_MAT3;
		GL_W.GL_FLOAT_MAT4 = GLES30.GL_FLOAT_MAT4;
		GL_W.GL_SAMPLER_2D = GLES30.GL_SAMPLER_2D;
		GL_W.GL_SAMPLER_CUBE = GLES30.GL_SAMPLER_CUBE;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_ENABLED = GLES30.GL_VERTEX_ATTRIB_ARRAY_ENABLED;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_SIZE = GLES30.GL_VERTEX_ATTRIB_ARRAY_SIZE;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_STRIDE = GLES30.GL_VERTEX_ATTRIB_ARRAY_STRIDE;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_TYPE = GLES30.GL_VERTEX_ATTRIB_ARRAY_TYPE;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = GLES30.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_POINTER = GLES30.GL_VERTEX_ATTRIB_ARRAY_POINTER;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = GLES30.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
		GL_W.GL_IMPLEMENTATION_COLOR_READ_TYPE = GLES30.GL_IMPLEMENTATION_COLOR_READ_TYPE;
		GL_W.GL_IMPLEMENTATION_COLOR_READ_FORMAT = GLES30.GL_IMPLEMENTATION_COLOR_READ_FORMAT;
		GL_W.GL_COMPILE_STATUS = GLES30.GL_COMPILE_STATUS;
		GL_W.GL_INFO_LOG_LENGTH = GLES30.GL_INFO_LOG_LENGTH;
		GL_W.GL_SHADER_SOURCE_LENGTH = GLES30.GL_SHADER_SOURCE_LENGTH;
		GL_W.GL_SHADER_COMPILER = GLES30.GL_SHADER_COMPILER;
		GL_W.GL_SHADER_BINARY_FORMATS = GLES30.GL_SHADER_BINARY_FORMATS;
		GL_W.GL_NUM_SHADER_BINARY_FORMATS = GLES30.GL_NUM_SHADER_BINARY_FORMATS;
		GL_W.GL_LOW_FLOAT = GLES30.GL_LOW_FLOAT;
		GL_W.GL_MEDIUM_FLOAT = GLES30.GL_MEDIUM_FLOAT;
		GL_W.GL_HIGH_FLOAT = GLES30.GL_HIGH_FLOAT;
		GL_W.GL_LOW_INT = GLES30.GL_LOW_INT;
		GL_W.GL_MEDIUM_INT = GLES30.GL_MEDIUM_INT;
		GL_W.GL_HIGH_INT = GLES30.GL_HIGH_INT;
		GL_W.GL_FRAMEBUFFER = GLES30.GL_FRAMEBUFFER;
		GL_W.GL_RENDERBUFFER = GLES30.GL_RENDERBUFFER;
		GL_W.GL_RGBA4 = GLES30.GL_RGBA4;
		GL_W.GL_RGB5_A1 = GLES30.GL_RGB5_A1;
		GL_W.GL_RGB565 = GLES30.GL_RGB565;
		GL_W.GL_DEPTH_COMPONENT16 = GLES30.GL_DEPTH_COMPONENT16;
		GL_W.GL_STENCIL_INDEX8 = GLES30.GL_STENCIL_INDEX8;
		GL_W.GL_RENDERBUFFER_WIDTH = GLES30.GL_RENDERBUFFER_WIDTH;
		GL_W.GL_RENDERBUFFER_HEIGHT = GLES30.GL_RENDERBUFFER_HEIGHT;
		GL_W.GL_RENDERBUFFER_INTERNAL_FORMAT = GLES30.GL_RENDERBUFFER_INTERNAL_FORMAT;
		GL_W.GL_RENDERBUFFER_RED_SIZE = GLES30.GL_RENDERBUFFER_RED_SIZE;
		GL_W.GL_RENDERBUFFER_GREEN_SIZE = GLES30.GL_RENDERBUFFER_GREEN_SIZE;
		GL_W.GL_RENDERBUFFER_BLUE_SIZE = GLES30.GL_RENDERBUFFER_BLUE_SIZE;
		GL_W.GL_RENDERBUFFER_ALPHA_SIZE = GLES30.GL_RENDERBUFFER_ALPHA_SIZE;
		GL_W.GL_RENDERBUFFER_DEPTH_SIZE = GLES30.GL_RENDERBUFFER_DEPTH_SIZE;
		GL_W.GL_RENDERBUFFER_STENCIL_SIZE = GLES30.GL_RENDERBUFFER_STENCIL_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = GLES30.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = GLES30.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = GLES30.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = GLES30.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
		GL_W.GL_COLOR_ATTACHMENT0 = GLES30.GL_COLOR_ATTACHMENT0;
		GL_W.GL_DEPTH_ATTACHMENT = GLES30.GL_DEPTH_ATTACHMENT;
		GL_W.GL_STENCIL_ATTACHMENT = GLES30.GL_STENCIL_ATTACHMENT;
		GL_W.GL_NONE = GLES30.GL_NONE;
		GL_W.GL_FRAMEBUFFER_COMPLETE = GLES30.GL_FRAMEBUFFER_COMPLETE;
		GL_W.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = GLES30.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
		GL_W.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = GLES30.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
		GL_W.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = GLES30.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
		GL_W.GL_FRAMEBUFFER_UNSUPPORTED = GLES30.GL_FRAMEBUFFER_UNSUPPORTED;
		GL_W.GL_FRAMEBUFFER_BINDING = GLES30.GL_FRAMEBUFFER_BINDING;
		GL_W.GL_RENDERBUFFER_BINDING = GLES30.GL_RENDERBUFFER_BINDING;
		GL_W.GL_MAX_RENDERBUFFER_SIZE = GLES30.GL_MAX_RENDERBUFFER_SIZE;
		GL_W.GL_INVALID_FRAMEBUFFER_OPERATION = GLES30.GL_INVALID_FRAMEBUFFER_OPERATION;
	}

	@Override
	public void glReadBuffer(int arg0) {
		GLES30.glReadBuffer(arg0);
	}

	@Override
	public void nglDrawRangeElements(int arg0, int arg1, int arg2, int arg3, int arg4, long arg5) {
		GLES30.nglDrawRangeElements(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glDrawRangeElements(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		GLES30.glDrawRangeElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawRangeElements(int arg0, int arg1, int arg2, int arg3, java.nio.ByteBuffer arg4) {
		GLES30.glDrawRangeElements(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawRangeElements(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GLES30.glDrawRangeElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawRangeElements(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3) {
		GLES30.glDrawRangeElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawRangeElements(int arg0, int arg1, int arg2, int arg3, int arg4, long arg5) {
		GLES30.glDrawRangeElements(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void nglTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, long arg9) {
		GLES30.nglTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.FloatBuffer arg9) {
		GLES30.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.IntBuffer arg9) {
		GLES30.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int[] arg9) {
		GLES30.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, float[] arg9) {
		GLES30.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.ByteBuffer arg9) {
		GLES30.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, short[] arg9) {
		GLES30.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.ShortBuffer arg9) {
		GLES30.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, long arg9) {
		GLES30.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void nglTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, long arg10) {
		GLES30.nglTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, short[] arg10) {
		GLES30.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int[] arg10) {
		GLES30.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, float[] arg10) {
		GLES30.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, java.nio.ByteBuffer arg10) {
		GLES30.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, long arg10) {
		GLES30.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, java.nio.ShortBuffer arg10) {
		GLES30.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, java.nio.IntBuffer arg10) {
		GLES30.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, java.nio.FloatBuffer arg10) {
		GLES30.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glCopyTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8) {
		GLES30.glCopyTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void nglCompressedTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GLES30.nglCompressedTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glCompressedTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GLES30.glCompressedTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glCompressedTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.ByteBuffer arg7) {
		GLES30.glCompressedTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void nglCompressedTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, long arg10) {
		GLES30.nglCompressedTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glCompressedTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, long arg10) {
		GLES30.glCompressedTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glCompressedTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.ByteBuffer arg9) {
		GLES30.glCompressedTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void nglGenQueries(int arg0, long arg1) {
		GLES30.nglGenQueries(arg0, arg1);
	}

	@Override
	public void glGenQueries(java.nio.IntBuffer arg0) {
		GLES30.glGenQueries(arg0);
	}

	@Override
	public void glGenQueries(int[] arg0) {
		GLES30.glGenQueries(arg0);
	}

	@Override
	public int glGenQueries() {
		return GLES30.glGenQueries();
	}

	@Override
	public void nglDeleteQueries(int arg0, long arg1) {
		GLES30.nglDeleteQueries(arg0, arg1);
	}

	@Override
	public void glDeleteQueries(int[] arg0) {
		GLES30.glDeleteQueries(arg0);
	}

	@Override
	public void glDeleteQueries(int arg0) {
		GLES30.glDeleteQueries(arg0);
	}

	@Override
	public void glDeleteQueries(java.nio.IntBuffer arg0) {
		GLES30.glDeleteQueries(arg0);
	}

	@Override
	public boolean glIsQuery(int arg0) {
		return GLES30.glIsQuery(arg0);
	}

	@Override
	public void glBeginQuery(int arg0, int arg1) {
		GLES30.glBeginQuery(arg0, arg1);
	}

	@Override
	public void glEndQuery(int arg0) {
		GLES30.glEndQuery(arg0);
	}

	@Override
	public void nglGetQueryiv(int arg0, int arg1, long arg2) {
		GLES30.nglGetQueryiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryiv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetQueryiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetQueryiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetQueryi(int arg0, int arg1) {
		return GLES30.glGetQueryi(arg0, arg1);
	}

	@Override
	public void nglGetQueryObjectuiv(int arg0, int arg1, long arg2) {
		GLES30.nglGetQueryObjectuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectuiv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetQueryObjectuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetQueryObjectuiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetQueryObjectui(int arg0, int arg1) {
		return GLES30.glGetQueryObjectui(arg0, arg1);
	}

	@Override
	public boolean glUnmapBuffer(int arg0) {
		return GLES30.glUnmapBuffer(arg0);
	}

	@Override
	public void nglGetBufferPointerv(int arg0, int arg1, long arg2) {
		GLES30.nglGetBufferPointerv(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferPointerv(int arg0, int arg1, org.lwjgl.PointerBuffer arg2) {
		GLES30.glGetBufferPointerv(arg0, arg1, arg2);
	}

	@Override
	public long glGetBufferPointer(int arg0, int arg1) {
		return GLES30.glGetBufferPointer(arg0, arg1);
	}

	@Override
	public void nglDrawBuffers(int arg0, long arg1) {
		GLES30.nglDrawBuffers(arg0, arg1);
	}

	@Override
	public void glDrawBuffers(int arg0) {
		GLES30.glDrawBuffers(arg0);
	}

	@Override
	public void glDrawBuffers(int[] arg0) {
		GLES30.glDrawBuffers(arg0);
	}

	@Override
	public void glDrawBuffers(java.nio.IntBuffer arg0) {
		GLES30.glDrawBuffers(arg0);
	}

	@Override
	public void nglUniformMatrix2x3fv(int arg0, int arg1, boolean arg2, long arg3) {
		GLES30.nglUniformMatrix2x3fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix2x3fv(int arg0, boolean arg1, float[] arg2) {
		GLES30.glUniformMatrix2x3fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix2x3fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GLES30.glUniformMatrix2x3fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix3x2fv(int arg0, int arg1, boolean arg2, long arg3) {
		GLES30.nglUniformMatrix3x2fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix3x2fv(int arg0, boolean arg1, float[] arg2) {
		GLES30.glUniformMatrix3x2fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix3x2fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GLES30.glUniformMatrix3x2fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix2x4fv(int arg0, int arg1, boolean arg2, long arg3) {
		GLES30.nglUniformMatrix2x4fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix2x4fv(int arg0, boolean arg1, float[] arg2) {
		GLES30.glUniformMatrix2x4fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix2x4fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GLES30.glUniformMatrix2x4fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix4x2fv(int arg0, int arg1, boolean arg2, long arg3) {
		GLES30.nglUniformMatrix4x2fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix4x2fv(int arg0, boolean arg1, float[] arg2) {
		GLES30.glUniformMatrix4x2fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix4x2fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GLES30.glUniformMatrix4x2fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix3x4fv(int arg0, int arg1, boolean arg2, long arg3) {
		GLES30.nglUniformMatrix3x4fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix3x4fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GLES30.glUniformMatrix3x4fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix3x4fv(int arg0, boolean arg1, float[] arg2) {
		GLES30.glUniformMatrix3x4fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix4x3fv(int arg0, int arg1, boolean arg2, long arg3) {
		GLES30.nglUniformMatrix4x3fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix4x3fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GLES30.glUniformMatrix4x3fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix4x3fv(int arg0, boolean arg1, float[] arg2) {
		GLES30.glUniformMatrix4x3fv(arg0, arg1, arg2);
	}

	@Override
	public void glBlitFramebuffer(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) {
		GLES30.glBlitFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glRenderbufferStorageMultisample(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GLES30.glRenderbufferStorageMultisample(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glFramebufferTextureLayer(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GLES30.glFramebufferTextureLayer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public long nglMapBufferRange(int arg0, long arg1, long arg2, int arg3) {
		return GLES30.nglMapBufferRange(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.nio.ByteBuffer glMapBufferRange(int arg0, long arg1, long arg2, int arg3) {
		return GLES30.glMapBufferRange(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.nio.ByteBuffer glMapBufferRange(int arg0, long arg1, long arg2, int arg3, java.nio.ByteBuffer arg4) {
		return GLES30.glMapBufferRange(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glFlushMappedBufferRange(int arg0, long arg1, long arg2) {
		GLES30.glFlushMappedBufferRange(arg0, arg1, arg2);
	}

	@Override
	public void glBindVertexArray(int arg0) {
		GLES30.glBindVertexArray(arg0);
	}

	@Override
	public void nglDeleteVertexArrays(int arg0, long arg1) {
		GLES30.nglDeleteVertexArrays(arg0, arg1);
	}

	@Override
	public void glDeleteVertexArrays(int[] arg0) {
		GLES30.glDeleteVertexArrays(arg0);
	}

	@Override
	public void glDeleteVertexArrays(int arg0) {
		GLES30.glDeleteVertexArrays(arg0);
	}

	@Override
	public void glDeleteVertexArrays(java.nio.IntBuffer arg0) {
		GLES30.glDeleteVertexArrays(arg0);
	}

	@Override
	public void nglGenVertexArrays(int arg0, long arg1) {
		GLES30.nglGenVertexArrays(arg0, arg1);
	}

	@Override
	public int glGenVertexArrays() {
		return GLES30.glGenVertexArrays();
	}

	@Override
	public void glGenVertexArrays(int[] arg0) {
		GLES30.glGenVertexArrays(arg0);
	}

	@Override
	public void glGenVertexArrays(java.nio.IntBuffer arg0) {
		GLES30.glGenVertexArrays(arg0);
	}

	@Override
	public boolean glIsVertexArray(int arg0) {
		return GLES30.glIsVertexArray(arg0);
	}

	@Override
	public void nglGetIntegeri_v(int arg0, int arg1, long arg2) {
		GLES30.nglGetIntegeri_v(arg0, arg1, arg2);
	}

	@Override
	public void glGetIntegeri_v(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetIntegeri_v(arg0, arg1, arg2);
	}

	@Override
	public void glGetIntegeri_v(int arg0, int arg1, int[] arg2) {
		GLES30.glGetIntegeri_v(arg0, arg1, arg2);
	}

	@Override
	public int glGetIntegeri(int arg0, int arg1) {
		return GLES30.glGetIntegeri(arg0, arg1);
	}

	@Override
	public void glBeginTransformFeedback(int arg0) {
		GLES30.glBeginTransformFeedback(arg0);
	}

	@Override
	public void glEndTransformFeedback() {
		GLES30.glEndTransformFeedback();
	}

	@Override
	public void glBindBufferRange(int arg0, int arg1, int arg2, long arg3, long arg4) {
		GLES30.glBindBufferRange(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glBindBufferBase(int arg0, int arg1, int arg2) {
		GLES30.glBindBufferBase(arg0, arg1, arg2);
	}

	@Override
	public void nglTransformFeedbackVaryings(int arg0, int arg1, long arg2, int arg3) {
		GLES30.nglTransformFeedbackVaryings(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTransformFeedbackVaryings(int arg0, java.lang.CharSequence[] arg1, int arg2) {
		GLES30.glTransformFeedbackVaryings(arg0, arg1, arg2);
	}

	@Override
	public void glTransformFeedbackVaryings(int arg0, java.lang.CharSequence arg1, int arg2) {
		GLES30.glTransformFeedbackVaryings(arg0, arg1, arg2);
	}

	@Override
	public void glTransformFeedbackVaryings(int arg0, org.lwjgl.PointerBuffer arg1, int arg2) {
		GLES30.glTransformFeedbackVaryings(arg0, arg1, arg2);
	}

	@Override
	public void nglGetTransformFeedbackVarying(int arg0, int arg1, int arg2, long arg3, long arg4, long arg5, long arg6) {
		GLES30.nglGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glGetTransformFeedbackVarying(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4, java.nio.ByteBuffer arg5) {
		GLES30.glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public java.lang.String glGetTransformFeedbackVarying(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4) {
		return GLES30.glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public java.lang.String glGetTransformFeedbackVarying(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3) {
		return GLES30.glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetTransformFeedbackVarying(int arg0, int arg1, int[] arg2, int[] arg3, int[] arg4, java.nio.ByteBuffer arg5) {
		GLES30.glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void nglVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, long arg4) {
		GLES30.nglVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, java.nio.ShortBuffer arg4) {
		GLES30.glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, long arg4) {
		GLES30.glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, java.nio.ByteBuffer arg4) {
		GLES30.glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, java.nio.IntBuffer arg4) {
		GLES30.glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglGetVertexAttribIiv(int arg0, int arg1, long arg2) {
		GLES30.nglGetVertexAttribIiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribIiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetVertexAttribIiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribIiv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetVertexAttribIiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetVertexAttribIi(int arg0, int arg1) {
		return GLES30.glGetVertexAttribIi(arg0, arg1);
	}

	@Override
	public void nglGetVertexAttribIuiv(int arg0, int arg1, long arg2) {
		GLES30.nglGetVertexAttribIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribIuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetVertexAttribIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribIuiv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetVertexAttribIuiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetVertexAttribIui(int arg0, int arg1) {
		return GLES30.glGetVertexAttribIui(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4i(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GLES30.glVertexAttribI4i(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttribI4ui(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GLES30.glVertexAttribI4ui(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglVertexAttribI4iv(int arg0, long arg1) {
		GLES30.nglVertexAttribI4iv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4iv(int arg0, int[] arg1) {
		GLES30.glVertexAttribI4iv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4iv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glVertexAttribI4iv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI4uiv(int arg0, long arg1) {
		GLES30.nglVertexAttribI4uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4uiv(int arg0, int[] arg1) {
		GLES30.glVertexAttribI4uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4uiv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glVertexAttribI4uiv(arg0, arg1);
	}

	@Override
	public void nglGetUniformuiv(int arg0, int arg1, long arg2) {
		GLES30.nglGetUniformuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformuiv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetUniformuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetUniformuiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetUniformui(int arg0, int arg1) {
		return GLES30.glGetUniformui(arg0, arg1);
	}

	@Override
	public int nglGetFragDataLocation(int arg0, long arg1) {
		return GLES30.nglGetFragDataLocation(arg0, arg1);
	}

	@Override
	public int glGetFragDataLocation(int arg0, java.nio.ByteBuffer arg1) {
		return GLES30.glGetFragDataLocation(arg0, arg1);
	}

	@Override
	public int glGetFragDataLocation(int arg0, java.lang.CharSequence arg1) {
		return GLES30.glGetFragDataLocation(arg0, arg1);
	}

	@Override
	public void glUniform1ui(int arg0, int arg1) {
		GLES30.glUniform1ui(arg0, arg1);
	}

	@Override
	public void glUniform2ui(int arg0, int arg1, int arg2) {
		GLES30.glUniform2ui(arg0, arg1, arg2);
	}

	@Override
	public void glUniform3ui(int arg0, int arg1, int arg2, int arg3) {
		GLES30.glUniform3ui(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniform4ui(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GLES30.glUniform4ui(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglUniform1uiv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform1uiv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform1uiv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glUniform1uiv(arg0, arg1);
	}

	@Override
	public void glUniform1uiv(int arg0, int[] arg1) {
		GLES30.glUniform1uiv(arg0, arg1);
	}

	@Override
	public void nglUniform2uiv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform2uiv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform2uiv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glUniform2uiv(arg0, arg1);
	}

	@Override
	public void glUniform2uiv(int arg0, int[] arg1) {
		GLES30.glUniform2uiv(arg0, arg1);
	}

	@Override
	public void nglUniform3uiv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform3uiv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform3uiv(int arg0, int[] arg1) {
		GLES30.glUniform3uiv(arg0, arg1);
	}

	@Override
	public void glUniform3uiv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glUniform3uiv(arg0, arg1);
	}

	@Override
	public void nglUniform4uiv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform4uiv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform4uiv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glUniform4uiv(arg0, arg1);
	}

	@Override
	public void glUniform4uiv(int arg0, int[] arg1) {
		GLES30.glUniform4uiv(arg0, arg1);
	}

	@Override
	public void nglClearBufferiv(int arg0, int arg1, long arg2) {
		GLES30.nglClearBufferiv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glClearBufferiv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferiv(int arg0, int arg1, int[] arg2) {
		GLES30.glClearBufferiv(arg0, arg1, arg2);
	}

	@Override
	public void nglClearBufferuiv(int arg0, int arg1, long arg2) {
		GLES30.nglClearBufferuiv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferuiv(int arg0, int arg1, int[] arg2) {
		GLES30.glClearBufferuiv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glClearBufferuiv(arg0, arg1, arg2);
	}

	@Override
	public void nglClearBufferfv(int arg0, int arg1, long arg2) {
		GLES30.nglClearBufferfv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GLES30.glClearBufferfv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferfv(int arg0, int arg1, float[] arg2) {
		GLES30.glClearBufferfv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferfi(int arg0, int arg1, float arg2, int arg3) {
		GLES30.glClearBufferfi(arg0, arg1, arg2, arg3);
	}

	@Override
	public long nglGetStringi(int arg0, int arg1) {
		return GLES30.nglGetStringi(arg0, arg1);
	}

	@Override
	public java.lang.String glGetStringi(int arg0, int arg1) {
		return GLES30.glGetStringi(arg0, arg1);
	}

	@Override
	public void glCopyBufferSubData(int arg0, int arg1, long arg2, long arg3, long arg4) {
		GLES30.glCopyBufferSubData(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglGetUniformIndices(int arg0, int arg1, long arg2, long arg3) {
		GLES30.nglGetUniformIndices(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetUniformIndices(int arg0, org.lwjgl.PointerBuffer arg1, int[] arg2) {
		GLES30.glGetUniformIndices(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformIndices(int arg0, org.lwjgl.PointerBuffer arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetUniformIndices(arg0, arg1, arg2);
	}

	@Override
	public void nglGetActiveUniformsiv(int arg0, int arg1, long arg2, int arg3, long arg4) {
		GLES30.nglGetActiveUniformsiv(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetActiveUniformsiv(int arg0, int[] arg1, int arg2, int[] arg3) {
		GLES30.glGetActiveUniformsiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveUniformsiv(int arg0, java.nio.IntBuffer arg1, int arg2, java.nio.IntBuffer arg3) {
		GLES30.glGetActiveUniformsiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int nglGetUniformBlockIndex(int arg0, long arg1) {
		return GLES30.nglGetUniformBlockIndex(arg0, arg1);
	}

	@Override
	public int glGetUniformBlockIndex(int arg0, java.nio.ByteBuffer arg1) {
		return GLES30.glGetUniformBlockIndex(arg0, arg1);
	}

	@Override
	public int glGetUniformBlockIndex(int arg0, java.lang.CharSequence arg1) {
		return GLES30.glGetUniformBlockIndex(arg0, arg1);
	}

	@Override
	public void nglGetActiveUniformBlockiv(int arg0, int arg1, int arg2, long arg3) {
		GLES30.nglGetActiveUniformBlockiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveUniformBlockiv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GLES30.glGetActiveUniformBlockiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveUniformBlockiv(int arg0, int arg1, int arg2, int[] arg3) {
		GLES30.glGetActiveUniformBlockiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int glGetActiveUniformBlocki(int arg0, int arg1, int arg2) {
		return GLES30.glGetActiveUniformBlocki(arg0, arg1, arg2);
	}

	@Override
	public void nglGetActiveUniformBlockName(int arg0, int arg1, int arg2, long arg3, long arg4) {
		GLES30.nglGetActiveUniformBlockName(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public java.lang.String glGetActiveUniformBlockName(int arg0, int arg1, int arg2) {
		return GLES30.glGetActiveUniformBlockName(arg0, arg1, arg2);
	}

	@Override
	public void glGetActiveUniformBlockName(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.ByteBuffer arg3) {
		GLES30.glGetActiveUniformBlockName(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveUniformBlockName(int arg0, int arg1, int[] arg2, java.nio.ByteBuffer arg3) {
		GLES30.glGetActiveUniformBlockName(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetActiveUniformBlockName(int arg0, int arg1) {
		return GLES30.glGetActiveUniformBlockName(arg0, arg1);
	}

	@Override
	public void glUniformBlockBinding(int arg0, int arg1, int arg2) {
		GLES30.glUniformBlockBinding(arg0, arg1, arg2);
	}

	@Override
	public void glDrawArraysInstanced(int arg0, int arg1, int arg2, int arg3) {
		GLES30.glDrawArraysInstanced(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglDrawElementsInstanced(int arg0, int arg1, int arg2, long arg3, int arg4) {
		GLES30.nglDrawElementsInstanced(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawElementsInstanced(int arg0, int arg1, int arg2, long arg3, int arg4) {
		GLES30.glDrawElementsInstanced(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawElementsInstanced(int arg0, java.nio.IntBuffer arg1, int arg2) {
		GLES30.glDrawElementsInstanced(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsInstanced(int arg0, java.nio.ShortBuffer arg1, int arg2) {
		GLES30.glDrawElementsInstanced(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsInstanced(int arg0, java.nio.ByteBuffer arg1, int arg2) {
		GLES30.glDrawElementsInstanced(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsInstanced(int arg0, int arg1, java.nio.ByteBuffer arg2, int arg3) {
		GLES30.glDrawElementsInstanced(arg0, arg1, arg2, arg3);
	}

	@Override
	public long glFenceSync(int arg0, int arg1) {
		return GLES30.glFenceSync(arg0, arg1);
	}

	@Override
	public boolean nglIsSync(long arg0) {
		return GLES30.nglIsSync(arg0);
	}

	@Override
	public boolean glIsSync(long arg0) {
		return GLES30.glIsSync(arg0);
	}

	@Override
	public void nglDeleteSync(long arg0) {
		GLES30.nglDeleteSync(arg0);
	}

	@Override
	public void glDeleteSync(long arg0) {
		GLES30.glDeleteSync(arg0);
	}

	@Override
	public int nglClientWaitSync(long arg0, int arg1, long arg2) {
		return GLES30.nglClientWaitSync(arg0, arg1, arg2);
	}

	@Override
	public int glClientWaitSync(long arg0, int arg1, long arg2) {
		return GLES30.glClientWaitSync(arg0, arg1, arg2);
	}

	@Override
	public void nglWaitSync(long arg0, int arg1, long arg2) {
		GLES30.nglWaitSync(arg0, arg1, arg2);
	}

	@Override
	public void glWaitSync(long arg0, int arg1, long arg2) {
		GLES30.glWaitSync(arg0, arg1, arg2);
	}

	@Override
	public void nglGetInteger64v(int arg0, long arg1) {
		GLES30.nglGetInteger64v(arg0, arg1);
	}

	@Override
	public void glGetInteger64v(int arg0, java.nio.LongBuffer arg1) {
		GLES30.glGetInteger64v(arg0, arg1);
	}

	@Override
	public void glGetInteger64v(int arg0, long[] arg1) {
		GLES30.glGetInteger64v(arg0, arg1);
	}

	@Override
	public long glGetInteger64(int arg0) {
		return GLES30.glGetInteger64(arg0);
	}

	@Override
	public void nglGetSynciv(long arg0, int arg1, int arg2, long arg3, long arg4) {
		GLES30.nglGetSynciv(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetSynciv(long arg0, int arg1, int[] arg2, int[] arg3) {
		GLES30.glGetSynciv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetSynciv(long arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3) {
		GLES30.glGetSynciv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int glGetSynci(long arg0, int arg1, java.nio.IntBuffer arg2) {
		return GLES30.glGetSynci(arg0, arg1, arg2);
	}

	@Override
	public void nglGetInteger64i_v(int arg0, int arg1, long arg2) {
		GLES30.nglGetInteger64i_v(arg0, arg1, arg2);
	}

	@Override
	public void glGetInteger64i_v(int arg0, int arg1, long[] arg2) {
		GLES30.glGetInteger64i_v(arg0, arg1, arg2);
	}

	@Override
	public void glGetInteger64i_v(int arg0, int arg1, java.nio.LongBuffer arg2) {
		GLES30.glGetInteger64i_v(arg0, arg1, arg2);
	}

	@Override
	public long glGetInteger64i(int arg0, int arg1) {
		return GLES30.glGetInteger64i(arg0, arg1);
	}

	@Override
	public void nglGetBufferParameteri64v(int arg0, int arg1, long arg2) {
		GLES30.nglGetBufferParameteri64v(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferParameteri64v(int arg0, int arg1, long[] arg2) {
		GLES30.glGetBufferParameteri64v(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferParameteri64v(int arg0, int arg1, java.nio.LongBuffer arg2) {
		GLES30.glGetBufferParameteri64v(arg0, arg1, arg2);
	}

	@Override
	public long glGetBufferParameteri64(int arg0, int arg1) {
		return GLES30.glGetBufferParameteri64(arg0, arg1);
	}

	@Override
	public void nglGenSamplers(int arg0, long arg1) {
		GLES30.nglGenSamplers(arg0, arg1);
	}

	@Override
	public void glGenSamplers(java.nio.IntBuffer arg0) {
		GLES30.glGenSamplers(arg0);
	}

	@Override
	public void glGenSamplers(int[] arg0) {
		GLES30.glGenSamplers(arg0);
	}

	@Override
	public int glGenSamplers() {
		return GLES30.glGenSamplers();
	}

	@Override
	public void nglDeleteSamplers(int arg0, long arg1) {
		GLES30.nglDeleteSamplers(arg0, arg1);
	}

	@Override
	public void glDeleteSamplers(int arg0) {
		GLES30.glDeleteSamplers(arg0);
	}

	@Override
	public void glDeleteSamplers(java.nio.IntBuffer arg0) {
		GLES30.glDeleteSamplers(arg0);
	}

	@Override
	public void glDeleteSamplers(int[] arg0) {
		GLES30.glDeleteSamplers(arg0);
	}

	@Override
	public boolean glIsSampler(int arg0) {
		return GLES30.glIsSampler(arg0);
	}

	@Override
	public void glBindSampler(int arg0, int arg1) {
		GLES30.glBindSampler(arg0, arg1);
	}

	@Override
	public void glSamplerParameteri(int arg0, int arg1, int arg2) {
		GLES30.glSamplerParameteri(arg0, arg1, arg2);
	}

	@Override
	public void nglSamplerParameteriv(int arg0, int arg1, long arg2) {
		GLES30.nglSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameteriv(int arg0, int arg1, int[] arg2) {
		GLES30.glSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameterf(int arg0, int arg1, float arg2) {
		GLES30.glSamplerParameterf(arg0, arg1, arg2);
	}

	@Override
	public void nglSamplerParameterfv(int arg0, int arg1, long arg2) {
		GLES30.nglSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameterfv(int arg0, int arg1, float[] arg2) {
		GLES30.glSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameterfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GLES30.glSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetSamplerParameteriv(int arg0, int arg1, long arg2) {
		GLES30.nglGetSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameteriv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public int glGetSamplerParameteri(int arg0, int arg1) {
		return GLES30.glGetSamplerParameteri(arg0, arg1);
	}

	@Override
	public void nglGetSamplerParameterfv(int arg0, int arg1, long arg2) {
		GLES30.nglGetSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameterfv(int arg0, int arg1, float[] arg2) {
		GLES30.glGetSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameterfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GLES30.glGetSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public float glGetSamplerParameterf(int arg0, int arg1) {
		return GLES30.glGetSamplerParameterf(arg0, arg1);
	}

	@Override
	public void glVertexAttribDivisor(int arg0, int arg1) {
		GLES30.glVertexAttribDivisor(arg0, arg1);
	}

	@Override
	public void glBindTransformFeedback(int arg0, int arg1) {
		GLES30.glBindTransformFeedback(arg0, arg1);
	}

	@Override
	public void nglDeleteTransformFeedbacks(int arg0, long arg1) {
		GLES30.nglDeleteTransformFeedbacks(arg0, arg1);
	}

	@Override
	public void glDeleteTransformFeedbacks(int[] arg0) {
		GLES30.glDeleteTransformFeedbacks(arg0);
	}

	@Override
	public void glDeleteTransformFeedbacks(java.nio.IntBuffer arg0) {
		GLES30.glDeleteTransformFeedbacks(arg0);
	}

	@Override
	public void glDeleteTransformFeedbacks(int arg0) {
		GLES30.glDeleteTransformFeedbacks(arg0);
	}

	@Override
	public void nglGenTransformFeedbacks(int arg0, long arg1) {
		GLES30.nglGenTransformFeedbacks(arg0, arg1);
	}

	@Override
	public void glGenTransformFeedbacks(java.nio.IntBuffer arg0) {
		GLES30.glGenTransformFeedbacks(arg0);
	}

	@Override
	public int glGenTransformFeedbacks() {
		return GLES30.glGenTransformFeedbacks();
	}

	@Override
	public void glGenTransformFeedbacks(int[] arg0) {
		GLES30.glGenTransformFeedbacks(arg0);
	}

	@Override
	public boolean glIsTransformFeedback(int arg0) {
		return GLES30.glIsTransformFeedback(arg0);
	}

	@Override
	public void glPauseTransformFeedback() {
		GLES30.glPauseTransformFeedback();
	}

	@Override
	public void glResumeTransformFeedback() {
		GLES30.glResumeTransformFeedback();
	}

	@Override
	public void nglGetProgramBinary(int arg0, int arg1, long arg2, long arg3, long arg4) {
		GLES30.nglGetProgramBinary(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetProgramBinary(int arg0, int[] arg1, int[] arg2, java.nio.ByteBuffer arg3) {
		GLES30.glGetProgramBinary(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetProgramBinary(int arg0, java.nio.IntBuffer arg1, java.nio.IntBuffer arg2, java.nio.ByteBuffer arg3) {
		GLES30.glGetProgramBinary(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglProgramBinary(int arg0, int arg1, long arg2, int arg3) {
		GLES30.nglProgramBinary(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glProgramBinary(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GLES30.glProgramBinary(arg0, arg1, arg2);
	}

	@Override
	public void glProgramParameteri(int arg0, int arg1, int arg2) {
		GLES30.glProgramParameteri(arg0, arg1, arg2);
	}

	@Override
	public void nglInvalidateFramebuffer(int arg0, int arg1, long arg2) {
		GLES30.nglInvalidateFramebuffer(arg0, arg1, arg2);
	}

	@Override
	public void glInvalidateFramebuffer(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glInvalidateFramebuffer(arg0, arg1);
	}

	@Override
	public void glInvalidateFramebuffer(int arg0, int arg1) {
		GLES30.glInvalidateFramebuffer(arg0, arg1);
	}

	@Override
	public void glInvalidateFramebuffer(int arg0, int[] arg1) {
		GLES30.glInvalidateFramebuffer(arg0, arg1);
	}

	@Override
	public void nglInvalidateSubFramebuffer(int arg0, int arg1, long arg2, int arg3, int arg4, int arg5, int arg6) {
		GLES30.nglInvalidateSubFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glInvalidateSubFramebuffer(int arg0, int[] arg1, int arg2, int arg3, int arg4, int arg5) {
		GLES30.glInvalidateSubFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glInvalidateSubFramebuffer(int arg0, java.nio.IntBuffer arg1, int arg2, int arg3, int arg4, int arg5) {
		GLES30.glInvalidateSubFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glInvalidateSubFramebuffer(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
		GLES30.glInvalidateSubFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glTexStorage2D(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GLES30.glTexStorage2D(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glTexStorage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
		GLES30.glTexStorage3D(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void nglGetInternalformativ(int arg0, int arg1, int arg2, int arg3, long arg4) {
		GLES30.nglGetInternalformativ(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetInternalformativ(int arg0, int arg1, int arg2, int[] arg3) {
		GLES30.glGetInternalformativ(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetInternalformativ(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GLES30.glGetInternalformativ(arg0, arg1, arg2, arg3);
	}

	@Override
	public int glGetInternalformati(int arg0, int arg1, int arg2) {
		return GLES30.glGetInternalformati(arg0, arg1, arg2);
	}

	@Override
	public int glGetProgrami(int arg0, int arg1) {
		return GLES30.glGetProgrami(arg0, arg1);
	}

	@Override
	public void glActiveTexture(int arg0) {
		GLES30.glActiveTexture(arg0);
	}

	@Override
	public void glAttachShader(int arg0, int arg1) {
		GLES30.glAttachShader(arg0, arg1);
	}

	@Override
	public void nglBindAttribLocation(int arg0, int arg1, long arg2) {
		GLES30.nglBindAttribLocation(arg0, arg1, arg2);
	}

	@Override
	public void glBindAttribLocation(int arg0, int arg1, java.lang.CharSequence arg2) {
		GLES30.glBindAttribLocation(arg0, arg1, arg2);
	}

	@Override
	public void glBindAttribLocation(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GLES30.glBindAttribLocation(arg0, arg1, arg2);
	}

	@Override
	public void glBindBuffer(int arg0, int arg1) {
		GLES30.glBindBuffer(arg0, arg1);
	}

	@Override
	public void glBindFramebuffer(int arg0, int arg1) {
		GLES30.glBindFramebuffer(arg0, arg1);
	}

	@Override
	public void glBindRenderbuffer(int arg0, int arg1) {
		GLES30.glBindRenderbuffer(arg0, arg1);
	}

	@Override
	public void glBindTexture(int arg0, int arg1) {
		GLES30.glBindTexture(arg0, arg1);
	}

	@Override
	public void glBlendColor(float arg0, float arg1, float arg2, float arg3) {
		GLES30.glBlendColor(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glBlendEquation(int arg0) {
		GLES30.glBlendEquation(arg0);
	}

	@Override
	public void glBlendEquationSeparate(int arg0, int arg1) {
		GLES30.glBlendEquationSeparate(arg0, arg1);
	}

	@Override
	public void glBlendFunc(int arg0, int arg1) {
		GLES30.glBlendFunc(arg0, arg1);
	}

	@Override
	public void glBlendFuncSeparate(int arg0, int arg1, int arg2, int arg3) {
		GLES30.glBlendFuncSeparate(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglBufferData(int arg0, long arg1, long arg2, int arg3) {
		GLES30.nglBufferData(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glBufferData(int arg0, java.nio.FloatBuffer arg1, int arg2) {
		GLES30.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, short[] arg1, int arg2) {
		GLES30.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, int[] arg1, int arg2) {
		GLES30.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, float[] arg1, int arg2) {
		GLES30.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, long arg1, int arg2) {
		GLES30.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, java.nio.ByteBuffer arg1, int arg2) {
		GLES30.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, java.nio.ShortBuffer arg1, int arg2) {
		GLES30.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, java.nio.IntBuffer arg1, int arg2) {
		GLES30.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void nglBufferSubData(int arg0, long arg1, long arg2, long arg3) {
		GLES30.nglBufferSubData(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.ByteBuffer arg2) {
		GLES30.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, float[] arg2) {
		GLES30.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.ShortBuffer arg2) {
		GLES30.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, int[] arg2) {
		GLES30.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, short[] arg2) {
		GLES30.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.FloatBuffer arg2) {
		GLES30.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.IntBuffer arg2) {
		GLES30.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public int glCheckFramebufferStatus(int arg0) {
		return GLES30.glCheckFramebufferStatus(arg0);
	}

	@Override
	public void glClear(int arg0) {
		GLES30.glClear(arg0);
	}

	@Override
	public void glClearColor(float arg0, float arg1, float arg2, float arg3) {
		GLES30.glClearColor(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glClearDepthf(float arg0) {
		GLES30.glClearDepthf(arg0);
	}

	@Override
	public void glClearStencil(int arg0) {
		GLES30.glClearStencil(arg0);
	}

	@Override
	public void glColorMask(boolean arg0, boolean arg1, boolean arg2, boolean arg3) {
		GLES30.glColorMask(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glCompileShader(int arg0) {
		GLES30.glCompileShader(arg0);
	}

	@Override
	public void nglCompressedTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, long arg7) {
		GLES30.nglCompressedTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glCompressedTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, long arg7) {
		GLES30.glCompressedTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glCompressedTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.ByteBuffer arg6) {
		GLES30.glCompressedTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void nglCompressedTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GLES30.nglCompressedTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glCompressedTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GLES30.glCompressedTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glCompressedTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.ByteBuffer arg7) {
		GLES30.glCompressedTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glCopyTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7) {
		GLES30.glCopyTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glCopyTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7) {
		GLES30.glCopyTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public int glCreateProgram() {
		return GLES30.glCreateProgram();
	}

	@Override
	public int glCreateShader(int arg0) {
		return GLES30.glCreateShader(arg0);
	}

	@Override
	public void glCullFace(int arg0) {
		GLES30.glCullFace(arg0);
	}

	@Override
	public void nglDeleteBuffers(int arg0, long arg1) {
		GLES30.nglDeleteBuffers(arg0, arg1);
	}

	@Override
	public void glDeleteBuffers(int arg0) {
		GLES30.glDeleteBuffers(arg0);
	}

	@Override
	public void glDeleteBuffers(java.nio.IntBuffer arg0) {
		GLES30.glDeleteBuffers(arg0);
	}

	@Override
	public void glDeleteBuffers(int[] arg0) {
		GLES30.glDeleteBuffers(arg0);
	}

	@Override
	public void nglDeleteFramebuffers(int arg0, long arg1) {
		GLES30.nglDeleteFramebuffers(arg0, arg1);
	}

	@Override
	public void glDeleteFramebuffers(java.nio.IntBuffer arg0) {
		GLES30.glDeleteFramebuffers(arg0);
	}

	@Override
	public void glDeleteFramebuffers(int[] arg0) {
		GLES30.glDeleteFramebuffers(arg0);
	}

	@Override
	public void glDeleteFramebuffers(int arg0) {
		GLES30.glDeleteFramebuffers(arg0);
	}

	@Override
	public void glDeleteProgram(int arg0) {
		GLES30.glDeleteProgram(arg0);
	}

	@Override
	public void nglDeleteRenderbuffers(int arg0, long arg1) {
		GLES30.nglDeleteRenderbuffers(arg0, arg1);
	}

	@Override
	public void glDeleteRenderbuffers(int arg0) {
		GLES30.glDeleteRenderbuffers(arg0);
	}

	@Override
	public void glDeleteRenderbuffers(java.nio.IntBuffer arg0) {
		GLES30.glDeleteRenderbuffers(arg0);
	}

	@Override
	public void glDeleteRenderbuffers(int[] arg0) {
		GLES30.glDeleteRenderbuffers(arg0);
	}

	@Override
	public void glDeleteShader(int arg0) {
		GLES30.glDeleteShader(arg0);
	}

	@Override
	public void nglDeleteTextures(int arg0, long arg1) {
		GLES30.nglDeleteTextures(arg0, arg1);
	}

	@Override
	public void glDeleteTextures(int[] arg0) {
		GLES30.glDeleteTextures(arg0);
	}

	@Override
	public void glDeleteTextures(int arg0) {
		GLES30.glDeleteTextures(arg0);
	}

	@Override
	public void glDeleteTextures(java.nio.IntBuffer arg0) {
		GLES30.glDeleteTextures(arg0);
	}

	@Override
	public void glDepthFunc(int arg0) {
		GLES30.glDepthFunc(arg0);
	}

	@Override
	public void glDepthMask(boolean arg0) {
		GLES30.glDepthMask(arg0);
	}

	@Override
	public void glDepthRangef(float arg0, float arg1) {
		GLES30.glDepthRangef(arg0, arg1);
	}

	@Override
	public void glDetachShader(int arg0, int arg1) {
		GLES30.glDetachShader(arg0, arg1);
	}

	@Override
	public void glDisable(int arg0) {
		GLES30.glDisable(arg0);
	}

	@Override
	public void glDisableVertexAttribArray(int arg0) {
		GLES30.glDisableVertexAttribArray(arg0);
	}

	@Override
	public void glDrawArrays(int arg0, int arg1, int arg2) {
		GLES30.glDrawArrays(arg0, arg1, arg2);
	}

	@Override
	public void nglDrawElements(int arg0, int arg1, int arg2, long arg3) {
		GLES30.nglDrawElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawElements(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GLES30.glDrawElements(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElements(int arg0, java.nio.ShortBuffer arg1) {
		GLES30.glDrawElements(arg0, arg1);
	}

	@Override
	public void glDrawElements(int arg0, int arg1, int arg2, long arg3) {
		GLES30.glDrawElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawElements(int arg0, java.nio.ByteBuffer arg1) {
		GLES30.glDrawElements(arg0, arg1);
	}

	@Override
	public void glDrawElements(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glDrawElements(arg0, arg1);
	}

	@Override
	public void glEnable(int arg0) {
		GLES30.glEnable(arg0);
	}

	@Override
	public void glEnableVertexAttribArray(int arg0) {
		GLES30.glEnableVertexAttribArray(arg0);
	}

	@Override
	public void glFinish() {
		GLES30.glFinish();
	}

	@Override
	public void glFlush() {
		GLES30.glFlush();
	}

	@Override
	public void glFramebufferRenderbuffer(int arg0, int arg1, int arg2, int arg3) {
		GLES30.glFramebufferRenderbuffer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glFramebufferTexture2D(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GLES30.glFramebufferTexture2D(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glFrontFace(int arg0) {
		GLES30.glFrontFace(arg0);
	}

	@Override
	public void nglGenBuffers(int arg0, long arg1) {
		GLES30.nglGenBuffers(arg0, arg1);
	}

	@Override
	public int glGenBuffers() {
		return GLES30.glGenBuffers();
	}

	@Override
	public void glGenBuffers(int[] arg0) {
		GLES30.glGenBuffers(arg0);
	}

	@Override
	public void glGenBuffers(java.nio.IntBuffer arg0) {
		GLES30.glGenBuffers(arg0);
	}

	@Override
	public void glGenerateMipmap(int arg0) {
		GLES30.glGenerateMipmap(arg0);
	}

	@Override
	public void nglGenFramebuffers(int arg0, long arg1) {
		GLES30.nglGenFramebuffers(arg0, arg1);
	}

	@Override
	public int glGenFramebuffers() {
		return GLES30.glGenFramebuffers();
	}

	@Override
	public void glGenFramebuffers(java.nio.IntBuffer arg0) {
		GLES30.glGenFramebuffers(arg0);
	}

	@Override
	public void glGenFramebuffers(int[] arg0) {
		GLES30.glGenFramebuffers(arg0);
	}

	@Override
	public void nglGenRenderbuffers(int arg0, long arg1) {
		GLES30.nglGenRenderbuffers(arg0, arg1);
	}

	@Override
	public int glGenRenderbuffers() {
		return GLES30.glGenRenderbuffers();
	}

	@Override
	public void glGenRenderbuffers(java.nio.IntBuffer arg0) {
		GLES30.glGenRenderbuffers(arg0);
	}

	@Override
	public void glGenRenderbuffers(int[] arg0) {
		GLES30.glGenRenderbuffers(arg0);
	}

	@Override
	public void nglGenTextures(int arg0, long arg1) {
		GLES30.nglGenTextures(arg0, arg1);
	}

	@Override
	public int glGenTextures() {
		return GLES30.glGenTextures();
	}

	@Override
	public void glGenTextures(java.nio.IntBuffer arg0) {
		GLES30.glGenTextures(arg0);
	}

	@Override
	public void glGenTextures(int[] arg0) {
		GLES30.glGenTextures(arg0);
	}

	@Override
	public void nglGetActiveAttrib(int arg0, int arg1, int arg2, long arg3, long arg4, long arg5, long arg6) {
		GLES30.nglGetActiveAttrib(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public java.lang.String glGetActiveAttrib(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3) {
		return GLES30.glGetActiveAttrib(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveAttrib(int arg0, int arg1, int[] arg2, int[] arg3, int[] arg4, java.nio.ByteBuffer arg5) {
		GLES30.glGetActiveAttrib(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glGetActiveAttrib(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4, java.nio.ByteBuffer arg5) {
		GLES30.glGetActiveAttrib(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public java.lang.String glGetActiveAttrib(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4) {
		return GLES30.glGetActiveAttrib(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglGetActiveUniform(int arg0, int arg1, int arg2, long arg3, long arg4, long arg5, long arg6) {
		GLES30.nglGetActiveUniform(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glGetActiveUniform(int arg0, int arg1, int[] arg2, int[] arg3, int[] arg4, java.nio.ByteBuffer arg5) {
		GLES30.glGetActiveUniform(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glGetActiveUniform(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4, java.nio.ByteBuffer arg5) {
		GLES30.glGetActiveUniform(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public java.lang.String glGetActiveUniform(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3) {
		return GLES30.glGetActiveUniform(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetActiveUniform(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4) {
		return GLES30.glGetActiveUniform(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglGetAttachedShaders(int arg0, int arg1, long arg2, long arg3) {
		GLES30.nglGetAttachedShaders(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetAttachedShaders(int arg0, java.nio.IntBuffer arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetAttachedShaders(arg0, arg1, arg2);
	}

	@Override
	public void glGetAttachedShaders(int arg0, int[] arg1, int[] arg2) {
		GLES30.glGetAttachedShaders(arg0, arg1, arg2);
	}

	@Override
	public int nglGetAttribLocation(int arg0, long arg1) {
		return GLES30.nglGetAttribLocation(arg0, arg1);
	}

	@Override
	public int glGetAttribLocation(int arg0, java.lang.CharSequence arg1) {
		return GLES30.glGetAttribLocation(arg0, arg1);
	}

	@Override
	public int glGetAttribLocation(int arg0, java.nio.ByteBuffer arg1) {
		return GLES30.glGetAttribLocation(arg0, arg1);
	}

	@Override
	public void nglGetBooleanv(int arg0, long arg1) {
		GLES30.nglGetBooleanv(arg0, arg1);
	}

	@Override
	public void glGetBooleanv(int arg0, java.nio.ByteBuffer arg1) {
		GLES30.glGetBooleanv(arg0, arg1);
	}

	@Override
	public boolean glGetBoolean(int arg0) {
		return GLES30.glGetBoolean(arg0);
	}

	@Override
	public void nglGetBufferParameteriv(int arg0, int arg1, long arg2) {
		GLES30.nglGetBufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetBufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferParameteriv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetBufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public int glGetBufferParameteri(int arg0, int arg1) {
		return GLES30.glGetBufferParameteri(arg0, arg1);
	}

	@Override
	public int glGetError() {
		return GLES30.glGetError();
	}

	@Override
	public void nglGetFloatv(int arg0, long arg1) {
		GLES30.nglGetFloatv(arg0, arg1);
	}

	@Override
	public void glGetFloatv(int arg0, java.nio.FloatBuffer arg1) {
		GLES30.glGetFloatv(arg0, arg1);
	}

	@Override
	public void glGetFloatv(int arg0, float[] arg1) {
		GLES30.glGetFloatv(arg0, arg1);
	}

	@Override
	public float glGetFloat(int arg0) {
		return GLES30.glGetFloat(arg0);
	}

	@Override
	public void nglGetFramebufferAttachmentParameteriv(int arg0, int arg1, int arg2, long arg3) {
		GLES30.nglGetFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetFramebufferAttachmentParameteriv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GLES30.glGetFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetFramebufferAttachmentParameteriv(int arg0, int arg1, int arg2, int[] arg3) {
		GLES30.glGetFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int glGetFramebufferAttachmentParameteri(int arg0, int arg1, int arg2) {
		return GLES30.glGetFramebufferAttachmentParameteri(arg0, arg1, arg2);
	}

	@Override
	public void nglGetIntegerv(int arg0, long arg1) {
		GLES30.nglGetIntegerv(arg0, arg1);
	}

	@Override
	public void glGetIntegerv(int arg0, int[] arg1) {
		GLES30.glGetIntegerv(arg0, arg1);
	}

	@Override
	public void glGetIntegerv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glGetIntegerv(arg0, arg1);
	}

	@Override
	public int glGetInteger(int arg0) {
		return GLES30.glGetInteger(arg0);
	}

	@Override
	public void nglGetProgramiv(int arg0, int arg1, long arg2) {
		GLES30.nglGetProgramiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetProgramiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetProgramiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetProgramiv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetProgramiv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetProgramInfoLog(int arg0, int arg1, long arg2, long arg3) {
		GLES30.nglGetProgramInfoLog(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetProgramInfoLog(int arg0, int[] arg1, java.nio.ByteBuffer arg2) {
		GLES30.glGetProgramInfoLog(arg0, arg1, arg2);
	}

	@Override
	public java.lang.String glGetProgramInfoLog(int arg0) {
		return GLES30.glGetProgramInfoLog(arg0);
	}

	@Override
	public java.lang.String glGetProgramInfoLog(int arg0, int arg1) {
		return GLES30.glGetProgramInfoLog(arg0, arg1);
	}

	@Override
	public void glGetProgramInfoLog(int arg0, java.nio.IntBuffer arg1, java.nio.ByteBuffer arg2) {
		GLES30.glGetProgramInfoLog(arg0, arg1, arg2);
	}

	@Override
	public void nglGetRenderbufferParameteriv(int arg0, int arg1, long arg2) {
		GLES30.nglGetRenderbufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetRenderbufferParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetRenderbufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetRenderbufferParameteriv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetRenderbufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public int glGetRenderbufferParameteri(int arg0, int arg1) {
		return GLES30.glGetRenderbufferParameteri(arg0, arg1);
	}

	@Override
	public void nglGetShaderiv(int arg0, int arg1, long arg2) {
		GLES30.nglGetShaderiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetShaderiv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetShaderiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetShaderiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetShaderiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetShaderi(int arg0, int arg1) {
		return GLES30.glGetShaderi(arg0, arg1);
	}

	@Override
	public void nglGetShaderInfoLog(int arg0, int arg1, long arg2, long arg3) {
		GLES30.nglGetShaderInfoLog(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetShaderInfoLog(int arg0) {
		return GLES30.glGetShaderInfoLog(arg0);
	}

	@Override
	public void glGetShaderInfoLog(int arg0, int[] arg1, java.nio.ByteBuffer arg2) {
		GLES30.glGetShaderInfoLog(arg0, arg1, arg2);
	}

	@Override
	public java.lang.String glGetShaderInfoLog(int arg0, int arg1) {
		return GLES30.glGetShaderInfoLog(arg0, arg1);
	}

	@Override
	public void glGetShaderInfoLog(int arg0, java.nio.IntBuffer arg1, java.nio.ByteBuffer arg2) {
		GLES30.glGetShaderInfoLog(arg0, arg1, arg2);
	}

	@Override
	public void nglGetShaderPrecisionFormat(int arg0, int arg1, long arg2, long arg3) {
		GLES30.nglGetShaderPrecisionFormat(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetShaderPrecisionFormat(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3) {
		GLES30.glGetShaderPrecisionFormat(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetShaderPrecisionFormat(int arg0, int arg1, int[] arg2, int[] arg3) {
		GLES30.glGetShaderPrecisionFormat(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglGetShaderSource(int arg0, int arg1, long arg2, long arg3) {
		GLES30.nglGetShaderSource(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetShaderSource(int arg0) {
		return GLES30.glGetShaderSource(arg0);
	}

	@Override
	public void glGetShaderSource(int arg0, int[] arg1, java.nio.ByteBuffer arg2) {
		GLES30.glGetShaderSource(arg0, arg1, arg2);
	}

	@Override
	public java.lang.String glGetShaderSource(int arg0, int arg1) {
		return GLES30.glGetShaderSource(arg0, arg1);
	}

	@Override
	public void glGetShaderSource(int arg0, java.nio.IntBuffer arg1, java.nio.ByteBuffer arg2) {
		GLES30.glGetShaderSource(arg0, arg1, arg2);
	}

	@Override
	public long nglGetString(int arg0) {
		return GLES30.nglGetString(arg0);
	}

	@Override
	public java.lang.String glGetString(int arg0) {
		return GLES30.glGetString(arg0);
	}

	@Override
	public void nglGetTexParameterfv(int arg0, int arg1, long arg2) {
		GLES30.nglGetTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameterfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GLES30.glGetTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameterfv(int arg0, int arg1, float[] arg2) {
		GLES30.glGetTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public float glGetTexParameterf(int arg0, int arg1) {
		return GLES30.glGetTexParameterf(arg0, arg1);
	}

	@Override
	public void nglGetTexParameteriv(int arg0, int arg1, long arg2) {
		GLES30.nglGetTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameteriv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public int glGetTexParameteri(int arg0, int arg1) {
		return GLES30.glGetTexParameteri(arg0, arg1);
	}

	@Override
	public void nglGetUniformfv(int arg0, int arg1, long arg2) {
		GLES30.nglGetUniformfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GLES30.glGetUniformfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformfv(int arg0, int arg1, float[] arg2) {
		GLES30.glGetUniformfv(arg0, arg1, arg2);
	}

	@Override
	public float glGetUniformf(int arg0, int arg1) {
		return GLES30.glGetUniformf(arg0, arg1);
	}

	@Override
	public void nglGetUniformiv(int arg0, int arg1, long arg2) {
		GLES30.nglGetUniformiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetUniformiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformiv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetUniformiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetUniformi(int arg0, int arg1) {
		return GLES30.glGetUniformi(arg0, arg1);
	}

	@Override
	public int nglGetUniformLocation(int arg0, long arg1) {
		return GLES30.nglGetUniformLocation(arg0, arg1);
	}

	@Override
	public int glGetUniformLocation(int arg0, java.lang.CharSequence arg1) {
		return GLES30.glGetUniformLocation(arg0, arg1);
	}

	@Override
	public int glGetUniformLocation(int arg0, java.nio.ByteBuffer arg1) {
		return GLES30.glGetUniformLocation(arg0, arg1);
	}

	@Override
	public void nglGetVertexAttribfv(int arg0, int arg1, long arg2) {
		GLES30.nglGetVertexAttribfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GLES30.glGetVertexAttribfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribfv(int arg0, int arg1, float[] arg2) {
		GLES30.glGetVertexAttribfv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetVertexAttribiv(int arg0, int arg1, long arg2) {
		GLES30.nglGetVertexAttribiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribiv(int arg0, int arg1, int[] arg2) {
		GLES30.glGetVertexAttribiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glGetVertexAttribiv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetVertexAttribPointerv(int arg0, int arg1, long arg2) {
		GLES30.nglGetVertexAttribPointerv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribPointerv(int arg0, int arg1, org.lwjgl.PointerBuffer arg2) {
		GLES30.glGetVertexAttribPointerv(arg0, arg1, arg2);
	}

	@Override
	public long glGetVertexAttribPointer(int arg0, int arg1) {
		return GLES30.glGetVertexAttribPointer(arg0, arg1);
	}

	@Override
	public void glHint(int arg0, int arg1) {
		GLES30.glHint(arg0, arg1);
	}

	@Override
	public boolean glIsBuffer(int arg0) {
		return GLES30.glIsBuffer(arg0);
	}

	@Override
	public boolean glIsEnabled(int arg0) {
		return GLES30.glIsEnabled(arg0);
	}

	@Override
	public boolean glIsFramebuffer(int arg0) {
		return GLES30.glIsFramebuffer(arg0);
	}

	@Override
	public boolean glIsProgram(int arg0) {
		return GLES30.glIsProgram(arg0);
	}

	@Override
	public boolean glIsRenderbuffer(int arg0) {
		return GLES30.glIsRenderbuffer(arg0);
	}

	@Override
	public boolean glIsShader(int arg0) {
		return GLES30.glIsShader(arg0);
	}

	@Override
	public boolean glIsTexture(int arg0) {
		return GLES30.glIsTexture(arg0);
	}

	@Override
	public void glLineWidth(float arg0) {
		GLES30.glLineWidth(arg0);
	}

	@Override
	public void glLinkProgram(int arg0) {
		GLES30.glLinkProgram(arg0);
	}

	@Override
	public void glPixelStorei(int arg0, int arg1) {
		GLES30.glPixelStorei(arg0, arg1);
	}

	@Override
	public void glPolygonOffset(float arg0, float arg1) {
		GLES30.glPolygonOffset(arg0, arg1);
	}

	@Override
	public void nglReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		GLES30.nglReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.ByteBuffer arg6) {
		GLES30.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, float[] arg6) {
		GLES30.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, short[] arg6) {
		GLES30.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int[] arg6) {
		GLES30.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.FloatBuffer arg6) {
		GLES30.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.IntBuffer arg6) {
		GLES30.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.ShortBuffer arg6) {
		GLES30.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		GLES30.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReleaseShaderCompiler() {
		GLES30.glReleaseShaderCompiler();
	}

	@Override
	public void glRenderbufferStorage(int arg0, int arg1, int arg2, int arg3) {
		GLES30.glRenderbufferStorage(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glSampleCoverage(float arg0, boolean arg1) {
		GLES30.glSampleCoverage(arg0, arg1);
	}

	@Override
	public void glScissor(int arg0, int arg1, int arg2, int arg3) {
		GLES30.glScissor(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglShaderBinary(int arg0, long arg1, int arg2, long arg3, int arg4) {
		GLES30.nglShaderBinary(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glShaderBinary(int[] arg0, int arg1, java.nio.ByteBuffer arg2) {
		GLES30.glShaderBinary(arg0, arg1, arg2);
	}

	@Override
	public void glShaderBinary(java.nio.IntBuffer arg0, int arg1, java.nio.ByteBuffer arg2) {
		GLES30.glShaderBinary(arg0, arg1, arg2);
	}

	@Override
	public void nglShaderSource(int arg0, int arg1, long arg2, long arg3) {
		GLES30.nglShaderSource(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glShaderSource(int arg0, java.lang.CharSequence arg1) {
		GLES30.glShaderSource(arg0, arg1);
	}

	@Override
	public void glShaderSource(int arg0, java.lang.CharSequence... arg1) {
		GLES30.glShaderSource(arg0, arg1);
	}

	@Override
	public void glShaderSource(int arg0, org.lwjgl.PointerBuffer arg1, int[] arg2) {
		GLES30.glShaderSource(arg0, arg1, arg2);
	}

	@Override
	public void glShaderSource(int arg0, org.lwjgl.PointerBuffer arg1, java.nio.IntBuffer arg2) {
		GLES30.glShaderSource(arg0, arg1, arg2);
	}

	@Override
	public void glStencilFunc(int arg0, int arg1, int arg2) {
		GLES30.glStencilFunc(arg0, arg1, arg2);
	}

	@Override
	public void glStencilFuncSeparate(int arg0, int arg1, int arg2, int arg3) {
		GLES30.glStencilFuncSeparate(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glStencilMask(int arg0) {
		GLES30.glStencilMask(arg0);
	}

	@Override
	public void glStencilMaskSeparate(int arg0, int arg1) {
		GLES30.glStencilMaskSeparate(arg0, arg1);
	}

	@Override
	public void glStencilOp(int arg0, int arg1, int arg2) {
		GLES30.glStencilOp(arg0, arg1, arg2);
	}

	@Override
	public void glStencilOpSeparate(int arg0, int arg1, int arg2, int arg3) {
		GLES30.glStencilOpSeparate(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GLES30.nglTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.ShortBuffer arg8) {
		GLES30.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GLES30.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.IntBuffer arg8) {
		GLES30.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.FloatBuffer arg8) {
		GLES30.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, short[] arg8) {
		GLES30.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.ByteBuffer arg8) {
		GLES30.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int[] arg8) {
		GLES30.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, float[] arg8) {
		GLES30.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexParameterf(int arg0, int arg1, float arg2) {
		GLES30.glTexParameterf(arg0, arg1, arg2);
	}

	@Override
	public void nglTexParameterfv(int arg0, int arg1, long arg2) {
		GLES30.nglTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameterfv(int arg0, int arg1, float[] arg2) {
		GLES30.glTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameterfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GLES30.glTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameteri(int arg0, int arg1, int arg2) {
		GLES30.glTexParameteri(arg0, arg1, arg2);
	}

	@Override
	public void nglTexParameteriv(int arg0, int arg1, long arg2) {
		GLES30.nglTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameteriv(int arg0, int arg1, int[] arg2) {
		GLES30.glTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GLES30.glTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void nglTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GLES30.nglTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.ByteBuffer arg8) {
		GLES30.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, float[] arg8) {
		GLES30.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int[] arg8) {
		GLES30.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, short[] arg8) {
		GLES30.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GLES30.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.ShortBuffer arg8) {
		GLES30.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.IntBuffer arg8) {
		GLES30.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.FloatBuffer arg8) {
		GLES30.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glUniform1f(int arg0, float arg1) {
		GLES30.glUniform1f(arg0, arg1);
	}

	@Override
	public void nglUniform1fv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform1fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform1fv(int arg0, float[] arg1) {
		GLES30.glUniform1fv(arg0, arg1);
	}

	@Override
	public void glUniform1fv(int arg0, java.nio.FloatBuffer arg1) {
		GLES30.glUniform1fv(arg0, arg1);
	}

	@Override
	public void glUniform1i(int arg0, int arg1) {
		GLES30.glUniform1i(arg0, arg1);
	}

	@Override
	public void nglUniform1iv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform1iv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform1iv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glUniform1iv(arg0, arg1);
	}

	@Override
	public void glUniform1iv(int arg0, int[] arg1) {
		GLES30.glUniform1iv(arg0, arg1);
	}

	@Override
	public void glUniform2f(int arg0, float arg1, float arg2) {
		GLES30.glUniform2f(arg0, arg1, arg2);
	}

	@Override
	public void nglUniform2fv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform2fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform2fv(int arg0, java.nio.FloatBuffer arg1) {
		GLES30.glUniform2fv(arg0, arg1);
	}

	@Override
	public void glUniform2fv(int arg0, float[] arg1) {
		GLES30.glUniform2fv(arg0, arg1);
	}

	@Override
	public void glUniform2i(int arg0, int arg1, int arg2) {
		GLES30.glUniform2i(arg0, arg1, arg2);
	}

	@Override
	public void nglUniform2iv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform2iv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform2iv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glUniform2iv(arg0, arg1);
	}

	@Override
	public void glUniform2iv(int arg0, int[] arg1) {
		GLES30.glUniform2iv(arg0, arg1);
	}

	@Override
	public void glUniform3f(int arg0, float arg1, float arg2, float arg3) {
		GLES30.glUniform3f(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglUniform3fv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform3fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform3fv(int arg0, java.nio.FloatBuffer arg1) {
		GLES30.glUniform3fv(arg0, arg1);
	}

	@Override
	public void glUniform3fv(int arg0, float[] arg1) {
		GLES30.glUniform3fv(arg0, arg1);
	}

	@Override
	public void glUniform3i(int arg0, int arg1, int arg2, int arg3) {
		GLES30.glUniform3i(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglUniform3iv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform3iv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform3iv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glUniform3iv(arg0, arg1);
	}

	@Override
	public void glUniform3iv(int arg0, int[] arg1) {
		GLES30.glUniform3iv(arg0, arg1);
	}

	@Override
	public void glUniform4f(int arg0, float arg1, float arg2, float arg3, float arg4) {
		GLES30.glUniform4f(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglUniform4fv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform4fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform4fv(int arg0, java.nio.FloatBuffer arg1) {
		GLES30.glUniform4fv(arg0, arg1);
	}

	@Override
	public void glUniform4fv(int arg0, float[] arg1) {
		GLES30.glUniform4fv(arg0, arg1);
	}

	@Override
	public void glUniform4i(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GLES30.glUniform4i(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglUniform4iv(int arg0, int arg1, long arg2) {
		GLES30.nglUniform4iv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform4iv(int arg0, java.nio.IntBuffer arg1) {
		GLES30.glUniform4iv(arg0, arg1);
	}

	@Override
	public void glUniform4iv(int arg0, int[] arg1) {
		GLES30.glUniform4iv(arg0, arg1);
	}

	@Override
	public void nglUniformMatrix2fv(int arg0, int arg1, boolean arg2, long arg3) {
		GLES30.nglUniformMatrix2fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix2fv(int arg0, boolean arg1, float[] arg2) {
		GLES30.glUniformMatrix2fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix2fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GLES30.glUniformMatrix2fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix3fv(int arg0, int arg1, boolean arg2, long arg3) {
		GLES30.nglUniformMatrix3fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix3fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GLES30.glUniformMatrix3fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix3fv(int arg0, boolean arg1, float[] arg2) {
		GLES30.glUniformMatrix3fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix4fv(int arg0, int arg1, boolean arg2, long arg3) {
		GLES30.nglUniformMatrix4fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix4fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GLES30.glUniformMatrix4fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix4fv(int arg0, boolean arg1, float[] arg2) {
		GLES30.glUniformMatrix4fv(arg0, arg1, arg2);
	}

	@Override
	public void glUseProgram(int arg0) {
		GLES30.glUseProgram(arg0);
	}

	@Override
	public void glValidateProgram(int arg0) {
		GLES30.glValidateProgram(arg0);
	}

	@Override
	public void glVertexAttrib1f(int arg0, float arg1) {
		GLES30.glVertexAttrib1f(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib1fv(int arg0, long arg1) {
		GLES30.nglVertexAttrib1fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib1fv(int arg0, float[] arg1) {
		GLES30.glVertexAttrib1fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib1fv(int arg0, java.nio.FloatBuffer arg1) {
		GLES30.glVertexAttrib1fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2f(int arg0, float arg1, float arg2) {
		GLES30.glVertexAttrib2f(arg0, arg1, arg2);
	}

	@Override
	public void nglVertexAttrib2fv(int arg0, long arg1) {
		GLES30.nglVertexAttrib2fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2fv(int arg0, float[] arg1) {
		GLES30.glVertexAttrib2fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2fv(int arg0, java.nio.FloatBuffer arg1) {
		GLES30.glVertexAttrib2fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib3f(int arg0, float arg1, float arg2, float arg3) {
		GLES30.glVertexAttrib3f(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglVertexAttrib3fv(int arg0, long arg1) {
		GLES30.nglVertexAttrib3fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib3fv(int arg0, float[] arg1) {
		GLES30.glVertexAttrib3fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib3fv(int arg0, java.nio.FloatBuffer arg1) {
		GLES30.glVertexAttrib3fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4f(int arg0, float arg1, float arg2, float arg3, float arg4) {
		GLES30.glVertexAttrib4f(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglVertexAttrib4fv(int arg0, long arg1) {
		GLES30.nglVertexAttrib4fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4fv(int arg0, java.nio.FloatBuffer arg1) {
		GLES30.glVertexAttrib4fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4fv(int arg0, float[] arg1) {
		GLES30.glVertexAttrib4fv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, long arg5) {
		GLES30.nglVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, long arg5) {
		GLES30.glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, java.nio.FloatBuffer arg5) {
		GLES30.glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, java.nio.IntBuffer arg5) {
		GLES30.glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, java.nio.ShortBuffer arg5) {
		GLES30.glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, java.nio.ByteBuffer arg5) {
		GLES30.glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glViewport(int arg0, int arg1, int arg2, int arg3) {
		GLES30.glViewport(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glBlendEquationi(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBlendEquationSeparatei(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBlendFunci(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBlendFuncSeparatei(int arg0, int arg1, int arg2, int arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglDrawArraysIndirect(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawArraysIndirect(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawArraysIndirect(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawArraysIndirect(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawArraysIndirect(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglDrawElementsIndirect(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsIndirect(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsIndirect(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsIndirect(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsIndirect(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform1d(int arg0, double arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform2d(int arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform3d(int arg0, double arg1, double arg2, double arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform4d(int arg0, double arg1, double arg2, double arg3, double arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniform1dv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform1dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform1dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniform2dv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform2dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform2dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniform3dv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform3dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform3dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniform4dv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform4dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniform4dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniformMatrix2dv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix2dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix2dv(int arg0, boolean arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniformMatrix3dv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix3dv(int arg0, boolean arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix3dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniformMatrix4dv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix4dv(int arg0, boolean arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix4dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniformMatrix2x3dv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix2x3dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix2x3dv(int arg0, boolean arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniformMatrix2x4dv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix2x4dv(int arg0, boolean arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix2x4dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniformMatrix3x2dv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix3x2dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix3x2dv(int arg0, boolean arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniformMatrix3x4dv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix3x4dv(int arg0, boolean arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix3x4dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniformMatrix4x2dv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix4x2dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix4x2dv(int arg0, boolean arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniformMatrix4x3dv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix4x3dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformMatrix4x3dv(int arg0, boolean arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetUniformdv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetUniformdv(int arg0, int arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetUniformdv(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public double glGetUniformd(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMinSampleShading(float arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int nglGetSubroutineUniformLocation(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetSubroutineUniformLocation(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetSubroutineUniformLocation(int arg0, int arg1, java.lang.CharSequence arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int nglGetSubroutineIndex(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetSubroutineIndex(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetSubroutineIndex(int arg0, int arg1, java.lang.CharSequence arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetActiveSubroutineUniformiv(int arg0, int arg1, int arg2, int arg3, long arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetActiveSubroutineUniformiv(int arg0, int arg1, int arg2, int arg3, java.nio.IntBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetActiveSubroutineUniformiv(int arg0, int arg1, int arg2, int arg3, int[] arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetActiveSubroutineUniformi(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetActiveSubroutineUniformName(int arg0, int arg1, int arg2, int arg3, long arg4, long arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetActiveSubroutineUniformName(int arg0, int arg1, int arg2, int[] arg3, java.nio.ByteBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public java.lang.String glGetActiveSubroutineUniformName(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetActiveSubroutineUniformName(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.ByteBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public java.lang.String glGetActiveSubroutineUniformName(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetActiveSubroutineName(int arg0, int arg1, int arg2, int arg3, long arg4, long arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetActiveSubroutineName(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.ByteBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public java.lang.String glGetActiveSubroutineName(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public java.lang.String glGetActiveSubroutineName(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetActiveSubroutineName(int arg0, int arg1, int arg2, int[] arg3, java.nio.ByteBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglUniformSubroutinesuiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformSubroutinesuiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformSubroutinesuiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glUniformSubroutinesui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetUniformSubroutineuiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetUniformSubroutineuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetUniformSubroutineuiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetUniformSubroutineui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetProgramStageiv(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetProgramStageiv(int arg0, int arg1, int arg2, int[] arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetProgramStageiv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetProgramStagei(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPatchParameteri(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglPatchParameterfv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPatchParameterfv(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPatchParameterfv(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawTransformFeedback(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawTransformFeedbackStream(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBeginQueryIndexed(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEndQueryIndexed(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetQueryIndexediv(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryIndexediv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryIndexediv(int arg0, int arg1, int arg2, int[] arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetQueryIndexedi(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglBindFragDataLocationIndexed(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBindFragDataLocationIndexed(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBindFragDataLocationIndexed(int arg0, int arg1, int arg2, java.lang.CharSequence arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int nglGetFragDataIndex(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetFragDataIndex(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetFragDataIndex(int arg0, java.lang.CharSequence arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSamplerParameterIiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSamplerParameterIiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSamplerParameterIiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSamplerParameterIuiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSamplerParameterIuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSamplerParameterIuiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetSamplerParameterIiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetSamplerParameterIiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetSamplerParameterIiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetSamplerParameterIi(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetSamplerParameterIuiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetSamplerParameterIuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetSamplerParameterIuiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetSamplerParameterIui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glQueryCounter(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetQueryObjecti64v(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryObjecti64v(int arg0, int arg1, java.nio.LongBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryObjecti64v(int arg0, int arg1, long[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryObjecti64v(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public long glGetQueryObjecti64(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetQueryObjectui64v(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryObjectui64v(int arg0, int arg1, long[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryObjectui64v(int arg0, int arg1, java.nio.LongBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryObjectui64v(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public long glGetQueryObjectui64(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexP2ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexP3ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexP4ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexP2uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexP2uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexP2uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexP3uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexP3uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexP3uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexP4uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexP4uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexP4uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP1ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP2ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP3ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP4ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoordP1uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP1uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP1uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoordP2uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP2uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP2uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoordP3uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP3uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP3uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoordP4uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP4uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordP4uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP1ui(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP2ui(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP3ui(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP4ui(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoordP1uiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP1uiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP1uiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoordP2uiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP2uiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP2uiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoordP3uiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP3uiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP3uiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoordP4uiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP4uiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoordP4uiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormalP3ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglNormalP3uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormalP3uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormalP3uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorP3ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorP4ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColorP3uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorP3uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorP3uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColorP4uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorP4uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorP4uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColorP3ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSecondaryColorP3uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColorP3uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColorP3uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP1ui(int arg0, int arg1, boolean arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP2ui(int arg0, int arg1, boolean arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP3ui(int arg0, int arg1, boolean arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP4ui(int arg0, int arg1, boolean arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribP1uiv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP1uiv(int arg0, int arg1, boolean arg2, int[] arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP1uiv(int arg0, int arg1, boolean arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribP2uiv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP2uiv(int arg0, int arg1, boolean arg2, int[] arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP2uiv(int arg0, int arg1, boolean arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribP3uiv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP3uiv(int arg0, int arg1, boolean arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP3uiv(int arg0, int arg1, boolean arg2, int[] arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribP4uiv(int arg0, int arg1, boolean arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP4uiv(int arg0, int arg1, boolean arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribP4uiv(int arg0, int arg1, boolean arg2, int[] arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglDrawElementsBaseVertex(int arg0, int arg1, int arg2, long arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsBaseVertex(int arg0, java.nio.ShortBuffer arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsBaseVertex(int arg0, java.nio.IntBuffer arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsBaseVertex(int arg0, java.nio.ByteBuffer arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsBaseVertex(int arg0, int arg1, java.nio.ByteBuffer arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsBaseVertex(int arg0, int arg1, int arg2, long arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, int arg3, int arg4, long arg5, int arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, int arg3, java.nio.ByteBuffer arg4, int arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, int arg3, int arg4, long arg5, int arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglDrawElementsInstancedBaseVertex(int arg0, int arg1, int arg2, long arg3, int arg4, int arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsInstancedBaseVertex(int arg0, java.nio.ByteBuffer arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsInstancedBaseVertex(int arg0, java.nio.IntBuffer arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsInstancedBaseVertex(int arg0, int arg1, java.nio.ByteBuffer arg2, int arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsInstancedBaseVertex(int arg0, int arg1, int arg2, long arg3, int arg4, int arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawElementsInstancedBaseVertex(int arg0, java.nio.ShortBuffer arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiDrawElementsBaseVertex(int arg0, long arg1, int arg2, long arg3, int arg4, long arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiDrawElementsBaseVertex(int arg0, int[] arg1, int arg2, org.lwjgl.PointerBuffer arg3, int[] arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiDrawElementsBaseVertex(int arg0, java.nio.IntBuffer arg1, int arg2, org.lwjgl.PointerBuffer arg3, java.nio.IntBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glProvokingVertex(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage2DMultisample(int arg0, int arg1, int arg2, int arg3, int arg4, boolean arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage3DMultisample(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, boolean arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetMultisamplefv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMultisamplefv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMultisamplefv(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public float glGetMultisamplef(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSampleMaski(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFramebufferTexture(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetUniformIndices(int arg0, java.lang.CharSequence arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetUniformIndices(int arg0, java.lang.CharSequence[] arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPrimitiveRestartIndex(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexBuffer(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetActiveUniformsi(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetActiveUniformName(int arg0, int arg1, int arg2, long arg3, long arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetActiveUniformName(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.ByteBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetActiveUniformName(int arg0, int arg1, int[] arg2, java.nio.ByteBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public java.lang.String glGetActiveUniformName(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public java.lang.String glGetActiveUniformName(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI1i(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI2i(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI3i(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI1ui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI2ui(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI3ui(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribI1iv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI1iv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI1iv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribI2iv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI2iv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI2iv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribI3iv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI3iv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI3iv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribI1uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI1uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI1uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribI2uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI2uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI2uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribI3uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI3uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI3uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribI4bv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI4bv(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribI4sv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI4sv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI4sv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribI4ubv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI4ubv(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttribI4usv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI4usv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttribI4usv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglBindFragDataLocation(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBindFragDataLocation(int arg0, int arg1, java.lang.CharSequence arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBindFragDataLocation(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBeginConditionalRender(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEndConditionalRender() {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glClampColor(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFramebufferTexture1D(int arg0, int arg1, int arg2, int arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFramebufferTexture3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexParameterIiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexParameterIiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexParameterIiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexParameterIi(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexParameterIuiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexParameterIuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexParameterIuiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexParameterIui(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetTexParameterIiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexParameterIiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexParameterIiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetTexParameterIi(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetTexParameterIuiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexParameterIuiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexParameterIuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetTexParameterIui(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorMaski(int arg0, boolean arg1, boolean arg2, boolean arg3, boolean arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetBooleani_v(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBooleani_v(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public boolean glGetBooleani(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEnablei(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDisablei(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public boolean glIsEnabledi(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib1s(int arg0, short arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib1d(int arg0, double arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib2s(int arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib2d(int arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib3s(int arg0, short arg1, short arg2, short arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib3d(int arg0, double arg1, double arg2, double arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4s(int arg0, short arg1, short arg2, short arg3, short arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4d(int arg0, double arg1, double arg2, double arg3, double arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Nub(int arg0, byte arg1, byte arg2, byte arg3, byte arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib1sv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib1sv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib1sv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib1dv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib1dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib1dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib2sv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib2sv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib2sv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib2dv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib2dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib2dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib3sv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib3sv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib3sv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib3dv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib3dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib3dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4sv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4sv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4sv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4dv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4iv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4iv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4iv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4bv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4bv(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4ubv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4ubv(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4usv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4usv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4usv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4uiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4uiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4uiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4Nbv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Nbv(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4Nsv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Nsv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Nsv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4Niv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Niv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Niv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4Nubv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Nubv(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4Nusv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Nusv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Nusv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexAttrib4Nuiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Nuiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexAttrib4Nuiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetVertexAttribi(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetVertexAttribdv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetVertexAttribdv(int arg0, int arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetVertexAttribdv(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryObjectuiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBufferData(int arg0, long[] arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBufferData(int arg0, java.nio.LongBuffer arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBufferData(int arg0, java.nio.DoubleBuffer arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBufferData(int arg0, double[] arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, long[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.LongBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetBufferSubData(int arg0, long arg1, long arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, short[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.ShortBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, long[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.LongBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public long nglMapBuffer(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public java.nio.ByteBuffer glMapBuffer(int arg0, int arg1, long arg2, java.nio.ByteBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public java.nio.ByteBuffer glMapBuffer(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public java.nio.ByteBuffer glMapBuffer(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetQueryObjectiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryObjectiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryObjectiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetQueryObjectiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetQueryObjecti(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogCoordf(float arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogCoordd(double arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglFogCoordfv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogCoordfv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogCoordfv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglFogCoorddv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogCoorddv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogCoorddv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglFogCoordPointer(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogCoordPointer(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogCoordPointer(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogCoordPointer(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogCoordPointer(int arg0, int arg1, java.nio.ShortBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiDrawArrays(int arg0, long arg1, long arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiDrawArrays(int arg0, int[] arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiDrawArrays(int arg0, java.nio.IntBuffer arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiDrawElements(int arg0, long arg1, int arg2, long arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiDrawElements(int arg0, java.nio.IntBuffer arg1, int arg2, org.lwjgl.PointerBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiDrawElements(int arg0, int[] arg1, int arg2, org.lwjgl.PointerBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPointParameterf(int arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPointParameteri(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglPointParameterfv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPointParameterfv(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPointParameterfv(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglPointParameteriv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPointParameteriv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPointParameteriv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3b(byte arg0, byte arg1, byte arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3s(short arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3i(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3f(float arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3d(double arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3ub(byte arg0, byte arg1, byte arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3us(short arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3ui(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSecondaryColor3bv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3bv(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSecondaryColor3sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSecondaryColor3iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSecondaryColor3fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSecondaryColor3dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSecondaryColor3ubv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3ubv(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSecondaryColor3usv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3usv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3usv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSecondaryColor3uiv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3uiv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColor3uiv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSecondaryColorPointer(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColorPointer(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColorPointer(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColorPointer(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColorPointer(int arg0, int arg1, int arg2, java.nio.FloatBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSecondaryColorPointer(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2i(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2s(short arg0, short arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2f(float arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2d(double arg0, double arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglWindowPos2iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglWindowPos2sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglWindowPos2fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglWindowPos2dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos2dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3i(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3s(short arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3f(float arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3d(double arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglWindowPos3iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglWindowPos3sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglWindowPos3fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglWindowPos3dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glWindowPos3dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglCompressedTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCompressedTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, java.nio.ByteBuffer arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCompressedTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglCompressedTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCompressedTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, java.nio.ByteBuffer arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCompressedTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetCompressedTexImage(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetCompressedTexImage(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetCompressedTexImage(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glClientActiveTexture(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1f(int arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1s(int arg0, short arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1i(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1d(int arg0, double arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord1fv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1fv(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1fv(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord1sv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1sv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1sv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord1iv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1iv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1iv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord1dv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord1dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2f(int arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2s(int arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2i(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2d(int arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord2fv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2fv(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2fv(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord2sv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2sv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2sv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord2iv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2iv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2iv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord2dv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord2dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3f(int arg0, float arg1, float arg2, float arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3s(int arg0, short arg1, short arg2, short arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3i(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3d(int arg0, double arg1, double arg2, double arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord3fv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3fv(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3fv(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord3sv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3sv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3sv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord3iv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3iv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3iv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord3dv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord3dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4f(int arg0, float arg1, float arg2, float arg3, float arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4s(int arg0, short arg1, short arg2, short arg3, short arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4i(int arg0, int arg1, int arg2, int arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4d(int arg0, double arg1, double arg2, double arg3, double arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord4fv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4fv(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4fv(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord4sv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4sv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4sv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord4iv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4iv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4iv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultiTexCoord4dv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4dv(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultiTexCoord4dv(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglLoadTransposeMatrixf(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLoadTransposeMatrixf(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLoadTransposeMatrixf(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglLoadTransposeMatrixd(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLoadTransposeMatrixd(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLoadTransposeMatrixd(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultTransposeMatrixf(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultTransposeMatrixf(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultTransposeMatrixf(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultTransposeMatrixd(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultTransposeMatrixd(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultTransposeMatrixd(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, double[] arg9) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.DoubleBuffer arg9) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, java.nio.DoubleBuffer arg10) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, double[] arg10) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.DoubleBuffer arg8) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, double[] arg8) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, double[] arg8) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.DoubleBuffer arg8) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glAccum(int arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glAlphaFunc(int arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public boolean nglAreTexturesResident(int arg0, long arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public boolean glAreTexturesResident(int[] arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public boolean glAreTexturesResident(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public boolean glAreTexturesResident(java.nio.IntBuffer arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glArrayElement(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBegin(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglBitmap(int arg0, int arg1, float arg2, float arg3, float arg4, float arg5, long arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBitmap(int arg0, int arg1, float arg2, float arg3, float arg4, float arg5, long arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glBitmap(int arg0, int arg1, float arg2, float arg3, float arg4, float arg5, java.nio.ByteBuffer arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCallList(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglCallLists(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCallLists(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCallLists(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCallLists(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCallLists(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glClearAccum(float arg0, float arg1, float arg2, float arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glClearDepth(double arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glClearIndex(float arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglClipPlane(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glClipPlane(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glClipPlane(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3b(byte arg0, byte arg1, byte arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3s(short arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3i(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3f(float arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3d(double arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3ub(byte arg0, byte arg1, byte arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3us(short arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3ui(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor3bv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3bv(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor3sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor3iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor3fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor3dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor3ubv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3ubv(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor3usv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3usv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3usv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor3uiv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3uiv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor3uiv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4b(byte arg0, byte arg1, byte arg2, byte arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4s(short arg0, short arg1, short arg2, short arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4i(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4f(float arg0, float arg1, float arg2, float arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4d(double arg0, double arg1, double arg2, double arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4ub(byte arg0, byte arg1, byte arg2, byte arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4us(short arg0, short arg1, short arg2, short arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4ui(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor4bv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4bv(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor4sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor4iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor4fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor4dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor4ubv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4ubv(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor4usv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4usv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4usv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColor4uiv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4uiv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColor4uiv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorMaterial(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglColorPointer(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorPointer(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorPointer(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorPointer(int arg0, int arg1, int arg2, java.nio.FloatBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorPointer(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glColorPointer(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCopyPixels(int arg0, int arg1, int arg2, int arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDeleteLists(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDepthRange(double arg0, double arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDisableClientState(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawBuffer(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglDrawPixels(int arg0, int arg1, int arg2, int arg3, long arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, java.nio.ShortBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, float[] arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, int[] arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, short[] arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, long arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, java.nio.FloatBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, java.nio.ByteBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, java.nio.IntBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEdgeFlag(boolean arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglEdgeFlagv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEdgeFlagv(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglEdgeFlagPointer(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEdgeFlagPointer(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEdgeFlagPointer(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEnableClientState(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEnd() {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord1f(float arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglEvalCoord1fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord1fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord1fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord1d(double arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglEvalCoord1dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord1dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord1dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord2f(float arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglEvalCoord2fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord2fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord2fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord2d(double arg0, double arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglEvalCoord2dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord2dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalCoord2dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalMesh1(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalMesh2(int arg0, int arg1, int arg2, int arg3, int arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalPoint1(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEvalPoint2(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglFeedbackBuffer(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFeedbackBuffer(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFeedbackBuffer(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogi(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglFogiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogf(int arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglFogfv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogfv(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFogfv(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGenLists(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetClipPlane(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetClipPlane(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetClipPlane(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetDoublev(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetDoublev(int arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetDoublev(int arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public double glGetDouble(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetLightiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetLightiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetLightiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetLighti(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetLightfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetLightfv(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetLightfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public float glGetLightf(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetMapiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMapiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMapiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetMapi(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetMapfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMapfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMapfv(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public float glGetMapf(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetMapdv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMapdv(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMapdv(int arg0, int arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public double glGetMapd(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetMaterialiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMaterialiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMaterialiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetMaterialfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMaterialfv(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetMaterialfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetPixelMapfv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPixelMapfv(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPixelMapfv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPixelMapfv(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetPixelMapusv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPixelMapusv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPixelMapusv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPixelMapusv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetPixelMapuiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPixelMapuiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPixelMapuiv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPixelMapuiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetPointerv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPointerv(int arg0, org.lwjgl.PointerBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public long glGetPointer(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetPolygonStipple(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPolygonStipple(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetPolygonStipple(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetTexEnviv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexEnviv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexEnviv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetTexEnvi(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetTexEnvfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexEnvfv(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexEnvfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public float glGetTexEnvf(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetTexGeniv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexGeniv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexGeniv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetTexGeni(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetTexGenfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexGenfv(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexGenfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public float glGetTexGenf(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetTexGendv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexGendv(int arg0, int arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexGendv(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public double glGetTexGend(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetTexImage(int arg0, int arg1, int arg2, int arg3, long arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, java.nio.ShortBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, double[] arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, java.nio.FloatBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, java.nio.DoubleBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, long arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, java.nio.IntBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, java.nio.ByteBuffer arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, float[] arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, short[] arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, int[] arg4) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetTexLevelParameteriv(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexLevelParameteriv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexLevelParameteriv(int arg0, int arg1, int arg2, int[] arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glGetTexLevelParameteri(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglGetTexLevelParameterfv(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexLevelParameterfv(int arg0, int arg1, int arg2, java.nio.FloatBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glGetTexLevelParameterfv(int arg0, int arg1, int arg2, float[] arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public float glGetTexLevelParameterf(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexi(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexub(byte arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexs(short arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexf(float arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexd(double arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglIndexiv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexiv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexiv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglIndexubv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexubv(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglIndexsv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexsv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexsv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglIndexfv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexfv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexfv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglIndexdv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexdv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexdv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexMask(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglIndexPointer(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexPointer(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexPointer(int arg0, java.nio.ByteBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexPointer(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexPointer(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glIndexPointer(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInitNames() {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglInterleavedArrays(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, short[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, java.nio.ShortBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public boolean glIsList(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightModeli(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightModelf(int arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglLightModeliv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightModeliv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightModeliv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglLightModelfv(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightModelfv(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightModelfv(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLighti(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightf(int arg0, int arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglLightiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglLightfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightfv(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLightfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLineStipple(int arg0, short arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glListBase(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglLoadMatrixf(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLoadMatrixf(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLoadMatrixf(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglLoadMatrixd(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLoadMatrixd(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLoadMatrixd(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLoadIdentity() {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLoadName(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glLogicOp(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMap1f(int arg0, float arg1, float arg2, int arg3, int arg4, long arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMap1f(int arg0, float arg1, float arg2, int arg3, int arg4, java.nio.FloatBuffer arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMap1f(int arg0, float arg1, float arg2, int arg3, int arg4, float[] arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMap1d(int arg0, double arg1, double arg2, int arg3, int arg4, long arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMap1d(int arg0, double arg1, double arg2, int arg3, int arg4, java.nio.DoubleBuffer arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMap1d(int arg0, double arg1, double arg2, int arg3, int arg4, double[] arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMap2f(int arg0, float arg1, float arg2, int arg3, int arg4, float arg5, float arg6, int arg7, int arg8, long arg9) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMap2f(int arg0, float arg1, float arg2, int arg3, int arg4, float arg5, float arg6, int arg7, int arg8, java.nio.FloatBuffer arg9) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMap2f(int arg0, float arg1, float arg2, int arg3, int arg4, float arg5, float arg6, int arg7, int arg8, float[] arg9) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMap2d(int arg0, double arg1, double arg2, int arg3, int arg4, double arg5, double arg6, int arg7, int arg8, long arg9) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMap2d(int arg0, double arg1, double arg2, int arg3, int arg4, double arg5, double arg6, int arg7, int arg8, java.nio.DoubleBuffer arg9) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMap2d(int arg0, double arg1, double arg2, int arg3, int arg4, double arg5, double arg6, int arg7, int arg8, double[] arg9) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMapGrid1f(int arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMapGrid1d(int arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMapGrid2f(int arg0, float arg1, float arg2, int arg3, float arg4, float arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMapGrid2d(int arg0, double arg1, double arg2, int arg3, double arg4, double arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMateriali(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMaterialf(int arg0, int arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMaterialiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMaterialiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMaterialiv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMaterialfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMaterialfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMaterialfv(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMatrixMode(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultMatrixf(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultMatrixf(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultMatrixf(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglMultMatrixd(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultMatrixd(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glMultMatrixd(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glFrustum(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNewList(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glEndList() {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3f(float arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3b(byte arg0, byte arg1, byte arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3s(short arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3i(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3d(double arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglNormal3fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglNormal3bv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3bv(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglNormal3sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglNormal3iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglNormal3dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormal3dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglNormalPointer(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormalPointer(int arg0, int arg1, java.nio.ShortBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormalPointer(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormalPointer(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormalPointer(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glNormalPointer(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glOrtho(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPassThrough(float arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglPixelMapfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelMapfv(int arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelMapfv(int arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelMapfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglPixelMapusv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelMapusv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelMapusv(int arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelMapusv(int arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglPixelMapuiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelMapuiv(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelMapuiv(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelMapuiv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelStoref(int arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelTransferi(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelTransferf(int arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPixelZoom(float arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPointSize(float arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPolygonMode(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglPolygonStipple(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPolygonStipple(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPolygonStipple(java.nio.ByteBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPushAttrib(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPushClientAttrib(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPopAttrib() {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPopClientAttrib() {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPopMatrix() {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPopName() {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglPrioritizeTextures(int arg0, long arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPrioritizeTextures(int[] arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPrioritizeTextures(java.nio.IntBuffer arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPushMatrix() {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glPushName(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2i(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2s(short arg0, short arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2f(float arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2d(double arg0, double arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos2iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos2sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos2fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos2dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos2dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3i(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3s(short arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3f(float arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3d(double arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos3iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos3sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos3fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos3dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos3dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4i(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4s(short arg0, short arg1, short arg2, short arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4f(float arg0, float arg1, float arg2, float arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4d(double arg0, double arg1, double arg2, double arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos4iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos4sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos4fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRasterPos4dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRasterPos4dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRecti(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRects(short arg0, short arg1, short arg2, short arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRectf(float arg0, float arg1, float arg2, float arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRectd(double arg0, double arg1, double arg2, double arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRectiv(long arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRectiv(int[] arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRectiv(java.nio.IntBuffer arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRectsv(long arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRectsv(short[] arg0, short[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRectsv(java.nio.ShortBuffer arg0, java.nio.ShortBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRectfv(long arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRectfv(java.nio.FloatBuffer arg0, java.nio.FloatBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRectfv(float[] arg0, float[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglRectdv(long arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRectdv(java.nio.DoubleBuffer arg0, java.nio.DoubleBuffer arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRectdv(double[] arg0, double[] arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public int glRenderMode(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRotatef(float arg0, float arg1, float arg2, float arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glRotated(double arg0, double arg1, double arg2, double arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glScalef(float arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glScaled(double arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglSelectBuffer(int arg0, long arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSelectBuffer(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glSelectBuffer(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glShadeModel(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1f(float arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1s(short arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1i(int arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1d(double arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord1fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord1sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord1iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord1dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord1dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2f(float arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2s(short arg0, short arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2i(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2d(double arg0, double arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord2fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord2sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord2iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord2dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord2dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3f(float arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3s(short arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3i(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3d(double arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord3fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord3sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord3iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord3dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord3dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4f(float arg0, float arg1, float arg2, float arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4s(short arg0, short arg1, short arg2, short arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4i(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4d(double arg0, double arg1, double arg2, double arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord4fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord4sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord4iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoord4dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoord4dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexCoordPointer(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordPointer(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordPointer(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordPointer(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordPointer(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexCoordPointer(int arg0, int arg1, int arg2, java.nio.FloatBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexEnvi(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexEnviv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexEnviv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexEnviv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexEnvf(int arg0, int arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexEnvfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexEnvfv(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexEnvfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexGeni(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexGeniv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexGeniv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexGeniv(int arg0, int arg1, int[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexGenf(int arg0, int arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexGenfv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexGenfv(int arg0, int arg1, float[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexGenfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexGend(int arg0, int arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexGendv(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexGendv(int arg0, int arg1, double[] arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexGendv(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, long arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, double[] arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, float[] arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.FloatBuffer arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.IntBuffer arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int[] arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, short[] arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.DoubleBuffer arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.ByteBuffer arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, long arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.ShortBuffer arg7) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCopyTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glCopyTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.ShortBuffer arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.IntBuffer arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.FloatBuffer arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.DoubleBuffer arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, double[] arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, float[] arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int[] arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, short[] arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.ByteBuffer arg6) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTranslatef(float arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glTranslated(double arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2f(float arg0, float arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2s(short arg0, short arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2i(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2d(double arg0, double arg1) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex2fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex2sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex2iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex2dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex2dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3f(float arg0, float arg1, float arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3s(short arg0, short arg1, short arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3i(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3d(double arg0, double arg1, double arg2) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex3fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex3sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex3iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex3dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex3dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4f(float arg0, float arg1, float arg2, float arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4s(short arg0, short arg1, short arg2, short arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4i(int arg0, int arg1, int arg2, int arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4d(double arg0, double arg1, double arg2, double arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex4fv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4fv(java.nio.FloatBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4fv(float[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex4sv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4sv(java.nio.ShortBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4sv(short[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex4iv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4iv(int[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4iv(java.nio.IntBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertex4dv(long arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4dv(java.nio.DoubleBuffer arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertex4dv(double[] arg0) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void nglVertexPointer(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexPointer(int arg0, int arg1, int arg2, java.nio.FloatBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexPointer(int arg0, int arg1, int arg2, long arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexPointer(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexPointer(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}

	@Override
	public void glVertexPointer(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GLES30.");
	}
}
