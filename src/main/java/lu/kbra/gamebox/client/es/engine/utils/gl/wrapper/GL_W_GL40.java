package lu.kbra.gamebox.client.es.engine.utils.gl.wrapper;

import org.lwjgl.opengl.GL40;

public class GL_W_GL40 implements GL_W_Call {
	public void init() {
		GL_W.WRAPPER = this;
		GL_W.GL_DRAW_INDIRECT_BUFFER = GL40.GL_DRAW_INDIRECT_BUFFER;
		GL_W.GL_DRAW_INDIRECT_BUFFER_BINDING = GL40.GL_DRAW_INDIRECT_BUFFER_BINDING;
		GL_W.GL_GEOMETRY_SHADER_INVOCATIONS = GL40.GL_GEOMETRY_SHADER_INVOCATIONS;
		GL_W.GL_MAX_GEOMETRY_SHADER_INVOCATIONS = GL40.GL_MAX_GEOMETRY_SHADER_INVOCATIONS;
		GL_W.GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = GL40.GL_MIN_FRAGMENT_INTERPOLATION_OFFSET;
		GL_W.GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = GL40.GL_MAX_FRAGMENT_INTERPOLATION_OFFSET;
		GL_W.GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = GL40.GL_FRAGMENT_INTERPOLATION_OFFSET_BITS;
		GL_W.GL_DOUBLE_VEC2 = GL40.GL_DOUBLE_VEC2;
		GL_W.GL_DOUBLE_VEC3 = GL40.GL_DOUBLE_VEC3;
		GL_W.GL_DOUBLE_VEC4 = GL40.GL_DOUBLE_VEC4;
		GL_W.GL_DOUBLE_MAT2 = GL40.GL_DOUBLE_MAT2;
		GL_W.GL_DOUBLE_MAT3 = GL40.GL_DOUBLE_MAT3;
		GL_W.GL_DOUBLE_MAT4 = GL40.GL_DOUBLE_MAT4;
		GL_W.GL_DOUBLE_MAT2x3 = GL40.GL_DOUBLE_MAT2x3;
		GL_W.GL_DOUBLE_MAT2x4 = GL40.GL_DOUBLE_MAT2x4;
		GL_W.GL_DOUBLE_MAT3x2 = GL40.GL_DOUBLE_MAT3x2;
		GL_W.GL_DOUBLE_MAT3x4 = GL40.GL_DOUBLE_MAT3x4;
		GL_W.GL_DOUBLE_MAT4x2 = GL40.GL_DOUBLE_MAT4x2;
		GL_W.GL_DOUBLE_MAT4x3 = GL40.GL_DOUBLE_MAT4x3;
		GL_W.GL_SAMPLE_SHADING = GL40.GL_SAMPLE_SHADING;
		GL_W.GL_MIN_SAMPLE_SHADING_VALUE = GL40.GL_MIN_SAMPLE_SHADING_VALUE;
		GL_W.GL_ACTIVE_SUBROUTINES = GL40.GL_ACTIVE_SUBROUTINES;
		GL_W.GL_ACTIVE_SUBROUTINE_UNIFORMS = GL40.GL_ACTIVE_SUBROUTINE_UNIFORMS;
		GL_W.GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = GL40.GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS;
		GL_W.GL_ACTIVE_SUBROUTINE_MAX_LENGTH = GL40.GL_ACTIVE_SUBROUTINE_MAX_LENGTH;
		GL_W.GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = GL40.GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH;
		GL_W.GL_MAX_SUBROUTINES = GL40.GL_MAX_SUBROUTINES;
		GL_W.GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = GL40.GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS;
		GL_W.GL_NUM_COMPATIBLE_SUBROUTINES = GL40.GL_NUM_COMPATIBLE_SUBROUTINES;
		GL_W.GL_COMPATIBLE_SUBROUTINES = GL40.GL_COMPATIBLE_SUBROUTINES;
		GL_W.GL_PATCHES = GL40.GL_PATCHES;
		GL_W.GL_PATCH_VERTICES = GL40.GL_PATCH_VERTICES;
		GL_W.GL_PATCH_DEFAULT_INNER_LEVEL = GL40.GL_PATCH_DEFAULT_INNER_LEVEL;
		GL_W.GL_PATCH_DEFAULT_OUTER_LEVEL = GL40.GL_PATCH_DEFAULT_OUTER_LEVEL;
		GL_W.GL_TESS_CONTROL_OUTPUT_VERTICES = GL40.GL_TESS_CONTROL_OUTPUT_VERTICES;
		GL_W.GL_TESS_GEN_MODE = GL40.GL_TESS_GEN_MODE;
		GL_W.GL_TESS_GEN_SPACING = GL40.GL_TESS_GEN_SPACING;
		GL_W.GL_TESS_GEN_VERTEX_ORDER = GL40.GL_TESS_GEN_VERTEX_ORDER;
		GL_W.GL_TESS_GEN_POINT_MODE = GL40.GL_TESS_GEN_POINT_MODE;
		GL_W.GL_ISOLINES = GL40.GL_ISOLINES;
		GL_W.GL_FRACTIONAL_ODD = GL40.GL_FRACTIONAL_ODD;
		GL_W.GL_FRACTIONAL_EVEN = GL40.GL_FRACTIONAL_EVEN;
		GL_W.GL_MAX_PATCH_VERTICES = GL40.GL_MAX_PATCH_VERTICES;
		GL_W.GL_MAX_TESS_GEN_LEVEL = GL40.GL_MAX_TESS_GEN_LEVEL;
		GL_W.GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = GL40.GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS;
		GL_W.GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = GL40.GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS;
		GL_W.GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = GL40.GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS;
		GL_W.GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = GL40.GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS;
		GL_W.GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = GL40.GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS;
		GL_W.GL_MAX_TESS_PATCH_COMPONENTS = GL40.GL_MAX_TESS_PATCH_COMPONENTS;
		GL_W.GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = GL40.GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS;
		GL_W.GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = GL40.GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS;
		GL_W.GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = GL40.GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS;
		GL_W.GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = GL40.GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS;
		GL_W.GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = GL40.GL_MAX_TESS_CONTROL_INPUT_COMPONENTS;
		GL_W.GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = GL40.GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS;
		GL_W.GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = GL40.GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS;
		GL_W.GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = GL40.GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS;
		GL_W.GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = GL40.GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER;
		GL_W.GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = GL40.GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER;
		GL_W.GL_TESS_EVALUATION_SHADER = GL40.GL_TESS_EVALUATION_SHADER;
		GL_W.GL_TESS_CONTROL_SHADER = GL40.GL_TESS_CONTROL_SHADER;
		GL_W.GL_TEXTURE_CUBE_MAP_ARRAY = GL40.GL_TEXTURE_CUBE_MAP_ARRAY;
		GL_W.GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = GL40.GL_TEXTURE_BINDING_CUBE_MAP_ARRAY;
		GL_W.GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = GL40.GL_PROXY_TEXTURE_CUBE_MAP_ARRAY;
		GL_W.GL_SAMPLER_CUBE_MAP_ARRAY = GL40.GL_SAMPLER_CUBE_MAP_ARRAY;
		GL_W.GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = GL40.GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW;
		GL_W.GL_INT_SAMPLER_CUBE_MAP_ARRAY = GL40.GL_INT_SAMPLER_CUBE_MAP_ARRAY;
		GL_W.GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = GL40.GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY;
		GL_W.GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = GL40.GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET;
		GL_W.GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = GL40.GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET;
		GL_W.GL_TRANSFORM_FEEDBACK = GL40.GL_TRANSFORM_FEEDBACK;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = GL40.GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = GL40.GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE;
		GL_W.GL_TRANSFORM_FEEDBACK_BINDING = GL40.GL_TRANSFORM_FEEDBACK_BINDING;
		GL_W.GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = GL40.GL_MAX_TRANSFORM_FEEDBACK_BUFFERS;
		GL_W.GL_MAX_VERTEX_STREAMS = GL40.GL_MAX_VERTEX_STREAMS;
		GL_W.GL_SRC1_COLOR = GL40.GL_SRC1_COLOR;
		GL_W.GL_ONE_MINUS_SRC1_COLOR = GL40.GL_ONE_MINUS_SRC1_COLOR;
		GL_W.GL_ONE_MINUS_SRC1_ALPHA = GL40.GL_ONE_MINUS_SRC1_ALPHA;
		GL_W.GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = GL40.GL_MAX_DUAL_SOURCE_DRAW_BUFFERS;
		GL_W.GL_ANY_SAMPLES_PASSED = GL40.GL_ANY_SAMPLES_PASSED;
		GL_W.GL_SAMPLER_BINDING = GL40.GL_SAMPLER_BINDING;
		GL_W.GL_RGB10_A2UI = GL40.GL_RGB10_A2UI;
		GL_W.GL_TEXTURE_SWIZZLE_R = GL40.GL_TEXTURE_SWIZZLE_R;
		GL_W.GL_TEXTURE_SWIZZLE_G = GL40.GL_TEXTURE_SWIZZLE_G;
		GL_W.GL_TEXTURE_SWIZZLE_B = GL40.GL_TEXTURE_SWIZZLE_B;
		GL_W.GL_TEXTURE_SWIZZLE_A = GL40.GL_TEXTURE_SWIZZLE_A;
		GL_W.GL_TEXTURE_SWIZZLE_RGBA = GL40.GL_TEXTURE_SWIZZLE_RGBA;
		GL_W.GL_TIME_ELAPSED = GL40.GL_TIME_ELAPSED;
		GL_W.GL_TIMESTAMP = GL40.GL_TIMESTAMP;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_DIVISOR = GL40.GL_VERTEX_ATTRIB_ARRAY_DIVISOR;
		GL_W.GL_INT_2_10_10_10_REV = GL40.GL_INT_2_10_10_10_REV;
		GL_W.GL_CONTEXT_PROFILE_MASK = GL40.GL_CONTEXT_PROFILE_MASK;
		GL_W.GL_CONTEXT_CORE_PROFILE_BIT = GL40.GL_CONTEXT_CORE_PROFILE_BIT;
		GL_W.GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = GL40.GL_CONTEXT_COMPATIBILITY_PROFILE_BIT;
		GL_W.GL_MAX_VERTEX_OUTPUT_COMPONENTS = GL40.GL_MAX_VERTEX_OUTPUT_COMPONENTS;
		GL_W.GL_MAX_GEOMETRY_INPUT_COMPONENTS = GL40.GL_MAX_GEOMETRY_INPUT_COMPONENTS;
		GL_W.GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = GL40.GL_MAX_GEOMETRY_OUTPUT_COMPONENTS;
		GL_W.GL_MAX_FRAGMENT_INPUT_COMPONENTS = GL40.GL_MAX_FRAGMENT_INPUT_COMPONENTS;
		GL_W.GL_FIRST_VERTEX_CONVENTION = GL40.GL_FIRST_VERTEX_CONVENTION;
		GL_W.GL_LAST_VERTEX_CONVENTION = GL40.GL_LAST_VERTEX_CONVENTION;
		GL_W.GL_PROVOKING_VERTEX = GL40.GL_PROVOKING_VERTEX;
		GL_W.GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = GL40.GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION;
		GL_W.GL_TEXTURE_CUBE_MAP_SEAMLESS = GL40.GL_TEXTURE_CUBE_MAP_SEAMLESS;
		GL_W.GL_SAMPLE_POSITION = GL40.GL_SAMPLE_POSITION;
		GL_W.GL_SAMPLE_MASK = GL40.GL_SAMPLE_MASK;
		GL_W.GL_SAMPLE_MASK_VALUE = GL40.GL_SAMPLE_MASK_VALUE;
		GL_W.GL_TEXTURE_2D_MULTISAMPLE = GL40.GL_TEXTURE_2D_MULTISAMPLE;
		GL_W.GL_PROXY_TEXTURE_2D_MULTISAMPLE = GL40.GL_PROXY_TEXTURE_2D_MULTISAMPLE;
		GL_W.GL_TEXTURE_2D_MULTISAMPLE_ARRAY = GL40.GL_TEXTURE_2D_MULTISAMPLE_ARRAY;
		GL_W.GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = GL40.GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY;
		GL_W.GL_MAX_SAMPLE_MASK_WORDS = GL40.GL_MAX_SAMPLE_MASK_WORDS;
		GL_W.GL_MAX_COLOR_TEXTURE_SAMPLES = GL40.GL_MAX_COLOR_TEXTURE_SAMPLES;
		GL_W.GL_MAX_DEPTH_TEXTURE_SAMPLES = GL40.GL_MAX_DEPTH_TEXTURE_SAMPLES;
		GL_W.GL_MAX_INTEGER_SAMPLES = GL40.GL_MAX_INTEGER_SAMPLES;
		GL_W.GL_TEXTURE_BINDING_2D_MULTISAMPLE = GL40.GL_TEXTURE_BINDING_2D_MULTISAMPLE;
		GL_W.GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = GL40.GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY;
		GL_W.GL_TEXTURE_SAMPLES = GL40.GL_TEXTURE_SAMPLES;
		GL_W.GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = GL40.GL_TEXTURE_FIXED_SAMPLE_LOCATIONS;
		GL_W.GL_SAMPLER_2D_MULTISAMPLE = GL40.GL_SAMPLER_2D_MULTISAMPLE;
		GL_W.GL_INT_SAMPLER_2D_MULTISAMPLE = GL40.GL_INT_SAMPLER_2D_MULTISAMPLE;
		GL_W.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = GL40.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE;
		GL_W.GL_SAMPLER_2D_MULTISAMPLE_ARRAY = GL40.GL_SAMPLER_2D_MULTISAMPLE_ARRAY;
		GL_W.GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = GL40.GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY;
		GL_W.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = GL40.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY;
		GL_W.GL_DEPTH_CLAMP = GL40.GL_DEPTH_CLAMP;
		GL_W.GL_GEOMETRY_SHADER = GL40.GL_GEOMETRY_SHADER;
		GL_W.GL_GEOMETRY_VERTICES_OUT = GL40.GL_GEOMETRY_VERTICES_OUT;
		GL_W.GL_GEOMETRY_INPUT_TYPE = GL40.GL_GEOMETRY_INPUT_TYPE;
		GL_W.GL_GEOMETRY_OUTPUT_TYPE = GL40.GL_GEOMETRY_OUTPUT_TYPE;
		GL_W.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = GL40.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS;
		GL_W.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = GL40.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS;
		GL_W.GL_MAX_GEOMETRY_OUTPUT_VERTICES = GL40.GL_MAX_GEOMETRY_OUTPUT_VERTICES;
		GL_W.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = GL40.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS;
		GL_W.GL_LINES_ADJACENCY = GL40.GL_LINES_ADJACENCY;
		GL_W.GL_LINE_STRIP_ADJACENCY = GL40.GL_LINE_STRIP_ADJACENCY;
		GL_W.GL_TRIANGLES_ADJACENCY = GL40.GL_TRIANGLES_ADJACENCY;
		GL_W.GL_TRIANGLE_STRIP_ADJACENCY = GL40.GL_TRIANGLE_STRIP_ADJACENCY;
		GL_W.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = GL40.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_LAYERED = GL40.GL_FRAMEBUFFER_ATTACHMENT_LAYERED;
		GL_W.GL_PROGRAM_POINT_SIZE = GL40.GL_PROGRAM_POINT_SIZE;
		GL_W.GL_MAX_SERVER_WAIT_TIMEOUT = GL40.GL_MAX_SERVER_WAIT_TIMEOUT;
		GL_W.GL_OBJECT_TYPE = GL40.GL_OBJECT_TYPE;
		GL_W.GL_SYNC_CONDITION = GL40.GL_SYNC_CONDITION;
		GL_W.GL_SYNC_STATUS = GL40.GL_SYNC_STATUS;
		GL_W.GL_SYNC_FLAGS = GL40.GL_SYNC_FLAGS;
		GL_W.GL_SYNC_FENCE = GL40.GL_SYNC_FENCE;
		GL_W.GL_SYNC_GPU_COMMANDS_COMPLETE = GL40.GL_SYNC_GPU_COMMANDS_COMPLETE;
		GL_W.GL_UNSIGNALED = GL40.GL_UNSIGNALED;
		GL_W.GL_SIGNALED = GL40.GL_SIGNALED;
		GL_W.GL_SYNC_FLUSH_COMMANDS_BIT = GL40.GL_SYNC_FLUSH_COMMANDS_BIT;
		GL_W.GL_ALREADY_SIGNALED = GL40.GL_ALREADY_SIGNALED;
		GL_W.GL_TIMEOUT_EXPIRED = GL40.GL_TIMEOUT_EXPIRED;
		GL_W.GL_CONDITION_SATISFIED = GL40.GL_CONDITION_SATISFIED;
		GL_W.GL_WAIT_FAILED = GL40.GL_WAIT_FAILED;
		GL_W.GL_R8_SNORM = GL40.GL_R8_SNORM;
		GL_W.GL_RG8_SNORM = GL40.GL_RG8_SNORM;
		GL_W.GL_RGB8_SNORM = GL40.GL_RGB8_SNORM;
		GL_W.GL_RGBA8_SNORM = GL40.GL_RGBA8_SNORM;
		GL_W.GL_R16_SNORM = GL40.GL_R16_SNORM;
		GL_W.GL_RG16_SNORM = GL40.GL_RG16_SNORM;
		GL_W.GL_RGB16_SNORM = GL40.GL_RGB16_SNORM;
		GL_W.GL_RGBA16_SNORM = GL40.GL_RGBA16_SNORM;
		GL_W.GL_SIGNED_NORMALIZED = GL40.GL_SIGNED_NORMALIZED;
		GL_W.GL_SAMPLER_BUFFER = GL40.GL_SAMPLER_BUFFER;
		GL_W.GL_INT_SAMPLER_2D_RECT = GL40.GL_INT_SAMPLER_2D_RECT;
		GL_W.GL_INT_SAMPLER_BUFFER = GL40.GL_INT_SAMPLER_BUFFER;
		GL_W.GL_UNSIGNED_INT_SAMPLER_2D_RECT = GL40.GL_UNSIGNED_INT_SAMPLER_2D_RECT;
		GL_W.GL_UNSIGNED_INT_SAMPLER_BUFFER = GL40.GL_UNSIGNED_INT_SAMPLER_BUFFER;
		GL_W.GL_COPY_READ_BUFFER = GL40.GL_COPY_READ_BUFFER;
		GL_W.GL_COPY_WRITE_BUFFER = GL40.GL_COPY_WRITE_BUFFER;
		GL_W.GL_PRIMITIVE_RESTART = GL40.GL_PRIMITIVE_RESTART;
		GL_W.GL_PRIMITIVE_RESTART_INDEX = GL40.GL_PRIMITIVE_RESTART_INDEX;
		GL_W.GL_TEXTURE_BUFFER = GL40.GL_TEXTURE_BUFFER;
		GL_W.GL_MAX_TEXTURE_BUFFER_SIZE = GL40.GL_MAX_TEXTURE_BUFFER_SIZE;
		GL_W.GL_TEXTURE_BINDING_BUFFER = GL40.GL_TEXTURE_BINDING_BUFFER;
		GL_W.GL_TEXTURE_BUFFER_DATA_STORE_BINDING = GL40.GL_TEXTURE_BUFFER_DATA_STORE_BINDING;
		GL_W.GL_TEXTURE_RECTANGLE = GL40.GL_TEXTURE_RECTANGLE;
		GL_W.GL_TEXTURE_BINDING_RECTANGLE = GL40.GL_TEXTURE_BINDING_RECTANGLE;
		GL_W.GL_PROXY_TEXTURE_RECTANGLE = GL40.GL_PROXY_TEXTURE_RECTANGLE;
		GL_W.GL_MAX_RECTANGLE_TEXTURE_SIZE = GL40.GL_MAX_RECTANGLE_TEXTURE_SIZE;
		GL_W.GL_SAMPLER_2D_RECT = GL40.GL_SAMPLER_2D_RECT;
		GL_W.GL_SAMPLER_2D_RECT_SHADOW = GL40.GL_SAMPLER_2D_RECT_SHADOW;
		GL_W.GL_UNIFORM_BUFFER = GL40.GL_UNIFORM_BUFFER;
		GL_W.GL_UNIFORM_BUFFER_BINDING = GL40.GL_UNIFORM_BUFFER_BINDING;
		GL_W.GL_UNIFORM_BUFFER_START = GL40.GL_UNIFORM_BUFFER_START;
		GL_W.GL_UNIFORM_BUFFER_SIZE = GL40.GL_UNIFORM_BUFFER_SIZE;
		GL_W.GL_MAX_VERTEX_UNIFORM_BLOCKS = GL40.GL_MAX_VERTEX_UNIFORM_BLOCKS;
		GL_W.GL_MAX_GEOMETRY_UNIFORM_BLOCKS = GL40.GL_MAX_GEOMETRY_UNIFORM_BLOCKS;
		GL_W.GL_MAX_FRAGMENT_UNIFORM_BLOCKS = GL40.GL_MAX_FRAGMENT_UNIFORM_BLOCKS;
		GL_W.GL_MAX_COMBINED_UNIFORM_BLOCKS = GL40.GL_MAX_COMBINED_UNIFORM_BLOCKS;
		GL_W.GL_MAX_UNIFORM_BUFFER_BINDINGS = GL40.GL_MAX_UNIFORM_BUFFER_BINDINGS;
		GL_W.GL_MAX_UNIFORM_BLOCK_SIZE = GL40.GL_MAX_UNIFORM_BLOCK_SIZE;
		GL_W.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = GL40.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
		GL_W.GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = GL40.GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS;
		GL_W.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = GL40.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
		GL_W.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = GL40.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT;
		GL_W.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = GL40.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH;
		GL_W.GL_ACTIVE_UNIFORM_BLOCKS = GL40.GL_ACTIVE_UNIFORM_BLOCKS;
		GL_W.GL_UNIFORM_TYPE = GL40.GL_UNIFORM_TYPE;
		GL_W.GL_UNIFORM_SIZE = GL40.GL_UNIFORM_SIZE;
		GL_W.GL_UNIFORM_NAME_LENGTH = GL40.GL_UNIFORM_NAME_LENGTH;
		GL_W.GL_UNIFORM_BLOCK_INDEX = GL40.GL_UNIFORM_BLOCK_INDEX;
		GL_W.GL_UNIFORM_OFFSET = GL40.GL_UNIFORM_OFFSET;
		GL_W.GL_UNIFORM_ARRAY_STRIDE = GL40.GL_UNIFORM_ARRAY_STRIDE;
		GL_W.GL_UNIFORM_MATRIX_STRIDE = GL40.GL_UNIFORM_MATRIX_STRIDE;
		GL_W.GL_UNIFORM_IS_ROW_MAJOR = GL40.GL_UNIFORM_IS_ROW_MAJOR;
		GL_W.GL_UNIFORM_BLOCK_BINDING = GL40.GL_UNIFORM_BLOCK_BINDING;
		GL_W.GL_UNIFORM_BLOCK_DATA_SIZE = GL40.GL_UNIFORM_BLOCK_DATA_SIZE;
		GL_W.GL_UNIFORM_BLOCK_NAME_LENGTH = GL40.GL_UNIFORM_BLOCK_NAME_LENGTH;
		GL_W.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = GL40.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS;
		GL_W.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = GL40.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
		GL_W.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = GL40.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
		GL_W.GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = GL40.GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER;
		GL_W.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = GL40.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
		GL_W.GL_INVALID_INDEX = GL40.GL_INVALID_INDEX;
		GL_W.GL_MAJOR_VERSION = GL40.GL_MAJOR_VERSION;
		GL_W.GL_MINOR_VERSION = GL40.GL_MINOR_VERSION;
		GL_W.GL_NUM_EXTENSIONS = GL40.GL_NUM_EXTENSIONS;
		GL_W.GL_CONTEXT_FLAGS = GL40.GL_CONTEXT_FLAGS;
		GL_W.GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = GL40.GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT;
		GL_W.GL_COMPARE_REF_TO_TEXTURE = GL40.GL_COMPARE_REF_TO_TEXTURE;
		GL_W.GL_CLIP_DISTANCE0 = GL40.GL_CLIP_DISTANCE0;
		GL_W.GL_CLIP_DISTANCE1 = GL40.GL_CLIP_DISTANCE1;
		GL_W.GL_CLIP_DISTANCE2 = GL40.GL_CLIP_DISTANCE2;
		GL_W.GL_CLIP_DISTANCE3 = GL40.GL_CLIP_DISTANCE3;
		GL_W.GL_CLIP_DISTANCE4 = GL40.GL_CLIP_DISTANCE4;
		GL_W.GL_CLIP_DISTANCE5 = GL40.GL_CLIP_DISTANCE5;
		GL_W.GL_CLIP_DISTANCE6 = GL40.GL_CLIP_DISTANCE6;
		GL_W.GL_CLIP_DISTANCE7 = GL40.GL_CLIP_DISTANCE7;
		GL_W.GL_MAX_CLIP_DISTANCES = GL40.GL_MAX_CLIP_DISTANCES;
		GL_W.GL_MAX_VARYING_COMPONENTS = GL40.GL_MAX_VARYING_COMPONENTS;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_INTEGER = GL40.GL_VERTEX_ATTRIB_ARRAY_INTEGER;
		GL_W.GL_SAMPLER_1D_ARRAY = GL40.GL_SAMPLER_1D_ARRAY;
		GL_W.GL_SAMPLER_2D_ARRAY = GL40.GL_SAMPLER_2D_ARRAY;
		GL_W.GL_SAMPLER_1D_ARRAY_SHADOW = GL40.GL_SAMPLER_1D_ARRAY_SHADOW;
		GL_W.GL_SAMPLER_2D_ARRAY_SHADOW = GL40.GL_SAMPLER_2D_ARRAY_SHADOW;
		GL_W.GL_SAMPLER_CUBE_SHADOW = GL40.GL_SAMPLER_CUBE_SHADOW;
		GL_W.GL_UNSIGNED_INT_VEC2 = GL40.GL_UNSIGNED_INT_VEC2;
		GL_W.GL_UNSIGNED_INT_VEC3 = GL40.GL_UNSIGNED_INT_VEC3;
		GL_W.GL_UNSIGNED_INT_VEC4 = GL40.GL_UNSIGNED_INT_VEC4;
		GL_W.GL_INT_SAMPLER_1D = GL40.GL_INT_SAMPLER_1D;
		GL_W.GL_INT_SAMPLER_2D = GL40.GL_INT_SAMPLER_2D;
		GL_W.GL_INT_SAMPLER_3D = GL40.GL_INT_SAMPLER_3D;
		GL_W.GL_INT_SAMPLER_CUBE = GL40.GL_INT_SAMPLER_CUBE;
		GL_W.GL_INT_SAMPLER_1D_ARRAY = GL40.GL_INT_SAMPLER_1D_ARRAY;
		GL_W.GL_INT_SAMPLER_2D_ARRAY = GL40.GL_INT_SAMPLER_2D_ARRAY;
		GL_W.GL_UNSIGNED_INT_SAMPLER_1D = GL40.GL_UNSIGNED_INT_SAMPLER_1D;
		GL_W.GL_UNSIGNED_INT_SAMPLER_2D = GL40.GL_UNSIGNED_INT_SAMPLER_2D;
		GL_W.GL_UNSIGNED_INT_SAMPLER_3D = GL40.GL_UNSIGNED_INT_SAMPLER_3D;
		GL_W.GL_UNSIGNED_INT_SAMPLER_CUBE = GL40.GL_UNSIGNED_INT_SAMPLER_CUBE;
		GL_W.GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = GL40.GL_UNSIGNED_INT_SAMPLER_1D_ARRAY;
		GL_W.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = GL40.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY;
		GL_W.GL_MIN_PROGRAM_TEXEL_OFFSET = GL40.GL_MIN_PROGRAM_TEXEL_OFFSET;
		GL_W.GL_MAX_PROGRAM_TEXEL_OFFSET = GL40.GL_MAX_PROGRAM_TEXEL_OFFSET;
		GL_W.GL_QUERY_WAIT = GL40.GL_QUERY_WAIT;
		GL_W.GL_QUERY_NO_WAIT = GL40.GL_QUERY_NO_WAIT;
		GL_W.GL_QUERY_BY_REGION_WAIT = GL40.GL_QUERY_BY_REGION_WAIT;
		GL_W.GL_QUERY_BY_REGION_NO_WAIT = GL40.GL_QUERY_BY_REGION_NO_WAIT;
		GL_W.GL_MAP_READ_BIT = GL40.GL_MAP_READ_BIT;
		GL_W.GL_MAP_WRITE_BIT = GL40.GL_MAP_WRITE_BIT;
		GL_W.GL_MAP_INVALIDATE_RANGE_BIT = GL40.GL_MAP_INVALIDATE_RANGE_BIT;
		GL_W.GL_MAP_INVALIDATE_BUFFER_BIT = GL40.GL_MAP_INVALIDATE_BUFFER_BIT;
		GL_W.GL_MAP_FLUSH_EXPLICIT_BIT = GL40.GL_MAP_FLUSH_EXPLICIT_BIT;
		GL_W.GL_MAP_UNSYNCHRONIZED_BIT = GL40.GL_MAP_UNSYNCHRONIZED_BIT;
		GL_W.GL_BUFFER_ACCESS_FLAGS = GL40.GL_BUFFER_ACCESS_FLAGS;
		GL_W.GL_BUFFER_MAP_LENGTH = GL40.GL_BUFFER_MAP_LENGTH;
		GL_W.GL_BUFFER_MAP_OFFSET = GL40.GL_BUFFER_MAP_OFFSET;
		GL_W.GL_CLAMP_VERTEX_COLOR = GL40.GL_CLAMP_VERTEX_COLOR;
		GL_W.GL_CLAMP_FRAGMENT_COLOR = GL40.GL_CLAMP_FRAGMENT_COLOR;
		GL_W.GL_CLAMP_READ_COLOR = GL40.GL_CLAMP_READ_COLOR;
		GL_W.GL_FIXED_ONLY = GL40.GL_FIXED_ONLY;
		GL_W.GL_DEPTH_COMPONENT32F = GL40.GL_DEPTH_COMPONENT32F;
		GL_W.GL_DEPTH32F_STENCIL8 = GL40.GL_DEPTH32F_STENCIL8;
		GL_W.GL_FLOAT_32_UNSIGNED_INT_24_8_REV = GL40.GL_FLOAT_32_UNSIGNED_INT_24_8_REV;
		GL_W.GL_TEXTURE_RED_TYPE = GL40.GL_TEXTURE_RED_TYPE;
		GL_W.GL_TEXTURE_GREEN_TYPE = GL40.GL_TEXTURE_GREEN_TYPE;
		GL_W.GL_TEXTURE_BLUE_TYPE = GL40.GL_TEXTURE_BLUE_TYPE;
		GL_W.GL_TEXTURE_ALPHA_TYPE = GL40.GL_TEXTURE_ALPHA_TYPE;
		GL_W.GL_TEXTURE_LUMINANCE_TYPE = GL40.GL_TEXTURE_LUMINANCE_TYPE;
		GL_W.GL_TEXTURE_INTENSITY_TYPE = GL40.GL_TEXTURE_INTENSITY_TYPE;
		GL_W.GL_TEXTURE_DEPTH_TYPE = GL40.GL_TEXTURE_DEPTH_TYPE;
		GL_W.GL_UNSIGNED_NORMALIZED = GL40.GL_UNSIGNED_NORMALIZED;
		GL_W.GL_RGBA32F = GL40.GL_RGBA32F;
		GL_W.GL_RGB32F = GL40.GL_RGB32F;
		GL_W.GL_RGBA16F = GL40.GL_RGBA16F;
		GL_W.GL_RGB16F = GL40.GL_RGB16F;
		GL_W.GL_R11F_G11F_B10F = GL40.GL_R11F_G11F_B10F;
		GL_W.GL_UNSIGNED_INT_10F_11F_11F_REV = GL40.GL_UNSIGNED_INT_10F_11F_11F_REV;
		GL_W.GL_RGB9_E5 = GL40.GL_RGB9_E5;
		GL_W.GL_UNSIGNED_INT_5_9_9_9_REV = GL40.GL_UNSIGNED_INT_5_9_9_9_REV;
		GL_W.GL_TEXTURE_SHARED_SIZE = GL40.GL_TEXTURE_SHARED_SIZE;
		GL_W.GL_FRAMEBUFFER = GL40.GL_FRAMEBUFFER;
		GL_W.GL_READ_FRAMEBUFFER = GL40.GL_READ_FRAMEBUFFER;
		GL_W.GL_DRAW_FRAMEBUFFER = GL40.GL_DRAW_FRAMEBUFFER;
		GL_W.GL_RENDERBUFFER = GL40.GL_RENDERBUFFER;
		GL_W.GL_STENCIL_INDEX1 = GL40.GL_STENCIL_INDEX1;
		GL_W.GL_STENCIL_INDEX4 = GL40.GL_STENCIL_INDEX4;
		GL_W.GL_STENCIL_INDEX8 = GL40.GL_STENCIL_INDEX8;
		GL_W.GL_STENCIL_INDEX16 = GL40.GL_STENCIL_INDEX16;
		GL_W.GL_RENDERBUFFER_WIDTH = GL40.GL_RENDERBUFFER_WIDTH;
		GL_W.GL_RENDERBUFFER_HEIGHT = GL40.GL_RENDERBUFFER_HEIGHT;
		GL_W.GL_RENDERBUFFER_INTERNAL_FORMAT = GL40.GL_RENDERBUFFER_INTERNAL_FORMAT;
		GL_W.GL_RENDERBUFFER_RED_SIZE = GL40.GL_RENDERBUFFER_RED_SIZE;
		GL_W.GL_RENDERBUFFER_GREEN_SIZE = GL40.GL_RENDERBUFFER_GREEN_SIZE;
		GL_W.GL_RENDERBUFFER_BLUE_SIZE = GL40.GL_RENDERBUFFER_BLUE_SIZE;
		GL_W.GL_RENDERBUFFER_ALPHA_SIZE = GL40.GL_RENDERBUFFER_ALPHA_SIZE;
		GL_W.GL_RENDERBUFFER_DEPTH_SIZE = GL40.GL_RENDERBUFFER_DEPTH_SIZE;
		GL_W.GL_RENDERBUFFER_STENCIL_SIZE = GL40.GL_RENDERBUFFER_STENCIL_SIZE;
		GL_W.GL_RENDERBUFFER_SAMPLES = GL40.GL_RENDERBUFFER_SAMPLES;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = GL40.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = GL40.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = GL40.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = GL40.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = GL40.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = GL40.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = GL40.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = GL40.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = GL40.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = GL40.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = GL40.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = GL40.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
		GL_W.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = GL40.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
		GL_W.GL_FRAMEBUFFER_DEFAULT = GL40.GL_FRAMEBUFFER_DEFAULT;
		GL_W.GL_INDEX = GL40.GL_INDEX;
		GL_W.GL_COLOR_ATTACHMENT0 = GL40.GL_COLOR_ATTACHMENT0;
		GL_W.GL_COLOR_ATTACHMENT1 = GL40.GL_COLOR_ATTACHMENT1;
		GL_W.GL_COLOR_ATTACHMENT2 = GL40.GL_COLOR_ATTACHMENT2;
		GL_W.GL_COLOR_ATTACHMENT3 = GL40.GL_COLOR_ATTACHMENT3;
		GL_W.GL_COLOR_ATTACHMENT4 = GL40.GL_COLOR_ATTACHMENT4;
		GL_W.GL_COLOR_ATTACHMENT5 = GL40.GL_COLOR_ATTACHMENT5;
		GL_W.GL_COLOR_ATTACHMENT6 = GL40.GL_COLOR_ATTACHMENT6;
		GL_W.GL_COLOR_ATTACHMENT7 = GL40.GL_COLOR_ATTACHMENT7;
		GL_W.GL_COLOR_ATTACHMENT8 = GL40.GL_COLOR_ATTACHMENT8;
		GL_W.GL_COLOR_ATTACHMENT9 = GL40.GL_COLOR_ATTACHMENT9;
		GL_W.GL_COLOR_ATTACHMENT10 = GL40.GL_COLOR_ATTACHMENT10;
		GL_W.GL_COLOR_ATTACHMENT11 = GL40.GL_COLOR_ATTACHMENT11;
		GL_W.GL_COLOR_ATTACHMENT12 = GL40.GL_COLOR_ATTACHMENT12;
		GL_W.GL_COLOR_ATTACHMENT13 = GL40.GL_COLOR_ATTACHMENT13;
		GL_W.GL_COLOR_ATTACHMENT14 = GL40.GL_COLOR_ATTACHMENT14;
		GL_W.GL_COLOR_ATTACHMENT15 = GL40.GL_COLOR_ATTACHMENT15;
		GL_W.GL_COLOR_ATTACHMENT16 = GL40.GL_COLOR_ATTACHMENT16;
		GL_W.GL_COLOR_ATTACHMENT17 = GL40.GL_COLOR_ATTACHMENT17;
		GL_W.GL_COLOR_ATTACHMENT18 = GL40.GL_COLOR_ATTACHMENT18;
		GL_W.GL_COLOR_ATTACHMENT19 = GL40.GL_COLOR_ATTACHMENT19;
		GL_W.GL_COLOR_ATTACHMENT20 = GL40.GL_COLOR_ATTACHMENT20;
		GL_W.GL_COLOR_ATTACHMENT21 = GL40.GL_COLOR_ATTACHMENT21;
		GL_W.GL_COLOR_ATTACHMENT22 = GL40.GL_COLOR_ATTACHMENT22;
		GL_W.GL_COLOR_ATTACHMENT23 = GL40.GL_COLOR_ATTACHMENT23;
		GL_W.GL_COLOR_ATTACHMENT24 = GL40.GL_COLOR_ATTACHMENT24;
		GL_W.GL_COLOR_ATTACHMENT25 = GL40.GL_COLOR_ATTACHMENT25;
		GL_W.GL_COLOR_ATTACHMENT26 = GL40.GL_COLOR_ATTACHMENT26;
		GL_W.GL_COLOR_ATTACHMENT27 = GL40.GL_COLOR_ATTACHMENT27;
		GL_W.GL_COLOR_ATTACHMENT28 = GL40.GL_COLOR_ATTACHMENT28;
		GL_W.GL_COLOR_ATTACHMENT29 = GL40.GL_COLOR_ATTACHMENT29;
		GL_W.GL_COLOR_ATTACHMENT30 = GL40.GL_COLOR_ATTACHMENT30;
		GL_W.GL_COLOR_ATTACHMENT31 = GL40.GL_COLOR_ATTACHMENT31;
		GL_W.GL_DEPTH_ATTACHMENT = GL40.GL_DEPTH_ATTACHMENT;
		GL_W.GL_STENCIL_ATTACHMENT = GL40.GL_STENCIL_ATTACHMENT;
		GL_W.GL_DEPTH_STENCIL_ATTACHMENT = GL40.GL_DEPTH_STENCIL_ATTACHMENT;
		GL_W.GL_MAX_SAMPLES = GL40.GL_MAX_SAMPLES;
		GL_W.GL_FRAMEBUFFER_COMPLETE = GL40.GL_FRAMEBUFFER_COMPLETE;
		GL_W.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = GL40.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
		GL_W.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = GL40.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
		GL_W.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = GL40.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER;
		GL_W.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = GL40.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER;
		GL_W.GL_FRAMEBUFFER_UNSUPPORTED = GL40.GL_FRAMEBUFFER_UNSUPPORTED;
		GL_W.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = GL40.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
		GL_W.GL_FRAMEBUFFER_UNDEFINED = GL40.GL_FRAMEBUFFER_UNDEFINED;
		GL_W.GL_FRAMEBUFFER_BINDING = GL40.GL_FRAMEBUFFER_BINDING;
		GL_W.GL_DRAW_FRAMEBUFFER_BINDING = GL40.GL_DRAW_FRAMEBUFFER_BINDING;
		GL_W.GL_READ_FRAMEBUFFER_BINDING = GL40.GL_READ_FRAMEBUFFER_BINDING;
		GL_W.GL_RENDERBUFFER_BINDING = GL40.GL_RENDERBUFFER_BINDING;
		GL_W.GL_MAX_COLOR_ATTACHMENTS = GL40.GL_MAX_COLOR_ATTACHMENTS;
		GL_W.GL_MAX_RENDERBUFFER_SIZE = GL40.GL_MAX_RENDERBUFFER_SIZE;
		GL_W.GL_INVALID_FRAMEBUFFER_OPERATION = GL40.GL_INVALID_FRAMEBUFFER_OPERATION;
		GL_W.GL_DEPTH_STENCIL = GL40.GL_DEPTH_STENCIL;
		GL_W.GL_UNSIGNED_INT_24_8 = GL40.GL_UNSIGNED_INT_24_8;
		GL_W.GL_DEPTH24_STENCIL8 = GL40.GL_DEPTH24_STENCIL8;
		GL_W.GL_TEXTURE_STENCIL_SIZE = GL40.GL_TEXTURE_STENCIL_SIZE;
		GL_W.GL_HALF_FLOAT = GL40.GL_HALF_FLOAT;
		GL_W.GL_RGBA32UI = GL40.GL_RGBA32UI;
		GL_W.GL_RGB32UI = GL40.GL_RGB32UI;
		GL_W.GL_RGBA16UI = GL40.GL_RGBA16UI;
		GL_W.GL_RGB16UI = GL40.GL_RGB16UI;
		GL_W.GL_RGBA8UI = GL40.GL_RGBA8UI;
		GL_W.GL_RGB8UI = GL40.GL_RGB8UI;
		GL_W.GL_RGBA32I = GL40.GL_RGBA32I;
		GL_W.GL_RGB32I = GL40.GL_RGB32I;
		GL_W.GL_RGBA16I = GL40.GL_RGBA16I;
		GL_W.GL_RGB16I = GL40.GL_RGB16I;
		GL_W.GL_RGBA8I = GL40.GL_RGBA8I;
		GL_W.GL_RGB8I = GL40.GL_RGB8I;
		GL_W.GL_RED_INTEGER = GL40.GL_RED_INTEGER;
		GL_W.GL_GREEN_INTEGER = GL40.GL_GREEN_INTEGER;
		GL_W.GL_BLUE_INTEGER = GL40.GL_BLUE_INTEGER;
		GL_W.GL_ALPHA_INTEGER = GL40.GL_ALPHA_INTEGER;
		GL_W.GL_RGB_INTEGER = GL40.GL_RGB_INTEGER;
		GL_W.GL_RGBA_INTEGER = GL40.GL_RGBA_INTEGER;
		GL_W.GL_BGR_INTEGER = GL40.GL_BGR_INTEGER;
		GL_W.GL_BGRA_INTEGER = GL40.GL_BGRA_INTEGER;
		GL_W.GL_TEXTURE_1D_ARRAY = GL40.GL_TEXTURE_1D_ARRAY;
		GL_W.GL_TEXTURE_2D_ARRAY = GL40.GL_TEXTURE_2D_ARRAY;
		GL_W.GL_PROXY_TEXTURE_2D_ARRAY = GL40.GL_PROXY_TEXTURE_2D_ARRAY;
		GL_W.GL_PROXY_TEXTURE_1D_ARRAY = GL40.GL_PROXY_TEXTURE_1D_ARRAY;
		GL_W.GL_TEXTURE_BINDING_1D_ARRAY = GL40.GL_TEXTURE_BINDING_1D_ARRAY;
		GL_W.GL_TEXTURE_BINDING_2D_ARRAY = GL40.GL_TEXTURE_BINDING_2D_ARRAY;
		GL_W.GL_MAX_ARRAY_TEXTURE_LAYERS = GL40.GL_MAX_ARRAY_TEXTURE_LAYERS;
		GL_W.GL_COMPRESSED_RED_RGTC1 = GL40.GL_COMPRESSED_RED_RGTC1;
		GL_W.GL_COMPRESSED_SIGNED_RED_RGTC1 = GL40.GL_COMPRESSED_SIGNED_RED_RGTC1;
		GL_W.GL_COMPRESSED_RG_RGTC2 = GL40.GL_COMPRESSED_RG_RGTC2;
		GL_W.GL_COMPRESSED_SIGNED_RG_RGTC2 = GL40.GL_COMPRESSED_SIGNED_RG_RGTC2;
		GL_W.GL_R8 = GL40.GL_R8;
		GL_W.GL_R16 = GL40.GL_R16;
		GL_W.GL_RG8 = GL40.GL_RG8;
		GL_W.GL_RG16 = GL40.GL_RG16;
		GL_W.GL_R16F = GL40.GL_R16F;
		GL_W.GL_R32F = GL40.GL_R32F;
		GL_W.GL_RG16F = GL40.GL_RG16F;
		GL_W.GL_RG32F = GL40.GL_RG32F;
		GL_W.GL_R8I = GL40.GL_R8I;
		GL_W.GL_R8UI = GL40.GL_R8UI;
		GL_W.GL_R16I = GL40.GL_R16I;
		GL_W.GL_R16UI = GL40.GL_R16UI;
		GL_W.GL_R32I = GL40.GL_R32I;
		GL_W.GL_R32UI = GL40.GL_R32UI;
		GL_W.GL_RG8I = GL40.GL_RG8I;
		GL_W.GL_RG8UI = GL40.GL_RG8UI;
		GL_W.GL_RG16I = GL40.GL_RG16I;
		GL_W.GL_RG16UI = GL40.GL_RG16UI;
		GL_W.GL_RG32I = GL40.GL_RG32I;
		GL_W.GL_RG32UI = GL40.GL_RG32UI;
		GL_W.GL_RG = GL40.GL_RG;
		GL_W.GL_COMPRESSED_RED = GL40.GL_COMPRESSED_RED;
		GL_W.GL_COMPRESSED_RG = GL40.GL_COMPRESSED_RG;
		GL_W.GL_RG_INTEGER = GL40.GL_RG_INTEGER;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER = GL40.GL_TRANSFORM_FEEDBACK_BUFFER;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER_START = GL40.GL_TRANSFORM_FEEDBACK_BUFFER_START;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = GL40.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = GL40.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING;
		GL_W.GL_INTERLEAVED_ATTRIBS = GL40.GL_INTERLEAVED_ATTRIBS;
		GL_W.GL_SEPARATE_ATTRIBS = GL40.GL_SEPARATE_ATTRIBS;
		GL_W.GL_PRIMITIVES_GENERATED = GL40.GL_PRIMITIVES_GENERATED;
		GL_W.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = GL40.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
		GL_W.GL_RASTERIZER_DISCARD = GL40.GL_RASTERIZER_DISCARD;
		GL_W.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = GL40.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
		GL_W.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = GL40.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
		GL_W.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = GL40.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
		GL_W.GL_TRANSFORM_FEEDBACK_VARYINGS = GL40.GL_TRANSFORM_FEEDBACK_VARYINGS;
		GL_W.GL_TRANSFORM_FEEDBACK_BUFFER_MODE = GL40.GL_TRANSFORM_FEEDBACK_BUFFER_MODE;
		GL_W.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = GL40.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH;
		GL_W.GL_VERTEX_ARRAY_BINDING = GL40.GL_VERTEX_ARRAY_BINDING;
		GL_W.GL_FRAMEBUFFER_SRGB = GL40.GL_FRAMEBUFFER_SRGB;
		GL_W.GL_CURRENT_RASTER_SECONDARY_COLOR = GL40.GL_CURRENT_RASTER_SECONDARY_COLOR;
		GL_W.GL_FLOAT_MAT2x3 = GL40.GL_FLOAT_MAT2x3;
		GL_W.GL_FLOAT_MAT2x4 = GL40.GL_FLOAT_MAT2x4;
		GL_W.GL_FLOAT_MAT3x2 = GL40.GL_FLOAT_MAT3x2;
		GL_W.GL_FLOAT_MAT3x4 = GL40.GL_FLOAT_MAT3x4;
		GL_W.GL_FLOAT_MAT4x2 = GL40.GL_FLOAT_MAT4x2;
		GL_W.GL_FLOAT_MAT4x3 = GL40.GL_FLOAT_MAT4x3;
		GL_W.GL_PIXEL_PACK_BUFFER = GL40.GL_PIXEL_PACK_BUFFER;
		GL_W.GL_PIXEL_UNPACK_BUFFER = GL40.GL_PIXEL_UNPACK_BUFFER;
		GL_W.GL_PIXEL_PACK_BUFFER_BINDING = GL40.GL_PIXEL_PACK_BUFFER_BINDING;
		GL_W.GL_PIXEL_UNPACK_BUFFER_BINDING = GL40.GL_PIXEL_UNPACK_BUFFER_BINDING;
		GL_W.GL_SRGB = GL40.GL_SRGB;
		GL_W.GL_SRGB8 = GL40.GL_SRGB8;
		GL_W.GL_SRGB_ALPHA = GL40.GL_SRGB_ALPHA;
		GL_W.GL_SRGB8_ALPHA8 = GL40.GL_SRGB8_ALPHA8;
		GL_W.GL_SLUMINANCE_ALPHA = GL40.GL_SLUMINANCE_ALPHA;
		GL_W.GL_SLUMINANCE8_ALPHA8 = GL40.GL_SLUMINANCE8_ALPHA8;
		GL_W.GL_SLUMINANCE = GL40.GL_SLUMINANCE;
		GL_W.GL_SLUMINANCE8 = GL40.GL_SLUMINANCE8;
		GL_W.GL_COMPRESSED_SRGB = GL40.GL_COMPRESSED_SRGB;
		GL_W.GL_COMPRESSED_SRGB_ALPHA = GL40.GL_COMPRESSED_SRGB_ALPHA;
		GL_W.GL_COMPRESSED_SLUMINANCE = GL40.GL_COMPRESSED_SLUMINANCE;
		GL_W.GL_COMPRESSED_SLUMINANCE_ALPHA = GL40.GL_COMPRESSED_SLUMINANCE_ALPHA;
		GL_W.GL_SHADING_LANGUAGE_VERSION = GL40.GL_SHADING_LANGUAGE_VERSION;
		GL_W.GL_CURRENT_PROGRAM = GL40.GL_CURRENT_PROGRAM;
		GL_W.GL_SHADER_TYPE = GL40.GL_SHADER_TYPE;
		GL_W.GL_DELETE_STATUS = GL40.GL_DELETE_STATUS;
		GL_W.GL_COMPILE_STATUS = GL40.GL_COMPILE_STATUS;
		GL_W.GL_LINK_STATUS = GL40.GL_LINK_STATUS;
		GL_W.GL_VALIDATE_STATUS = GL40.GL_VALIDATE_STATUS;
		GL_W.GL_INFO_LOG_LENGTH = GL40.GL_INFO_LOG_LENGTH;
		GL_W.GL_ATTACHED_SHADERS = GL40.GL_ATTACHED_SHADERS;
		GL_W.GL_ACTIVE_UNIFORMS = GL40.GL_ACTIVE_UNIFORMS;
		GL_W.GL_ACTIVE_UNIFORM_MAX_LENGTH = GL40.GL_ACTIVE_UNIFORM_MAX_LENGTH;
		GL_W.GL_ACTIVE_ATTRIBUTES = GL40.GL_ACTIVE_ATTRIBUTES;
		GL_W.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = GL40.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH;
		GL_W.GL_SHADER_SOURCE_LENGTH = GL40.GL_SHADER_SOURCE_LENGTH;
		GL_W.GL_FLOAT_VEC2 = GL40.GL_FLOAT_VEC2;
		GL_W.GL_FLOAT_VEC3 = GL40.GL_FLOAT_VEC3;
		GL_W.GL_FLOAT_VEC4 = GL40.GL_FLOAT_VEC4;
		GL_W.GL_INT_VEC2 = GL40.GL_INT_VEC2;
		GL_W.GL_INT_VEC3 = GL40.GL_INT_VEC3;
		GL_W.GL_INT_VEC4 = GL40.GL_INT_VEC4;
		GL_W.GL_BOOL = GL40.GL_BOOL;
		GL_W.GL_BOOL_VEC2 = GL40.GL_BOOL_VEC2;
		GL_W.GL_BOOL_VEC3 = GL40.GL_BOOL_VEC3;
		GL_W.GL_BOOL_VEC4 = GL40.GL_BOOL_VEC4;
		GL_W.GL_FLOAT_MAT2 = GL40.GL_FLOAT_MAT2;
		GL_W.GL_FLOAT_MAT3 = GL40.GL_FLOAT_MAT3;
		GL_W.GL_FLOAT_MAT4 = GL40.GL_FLOAT_MAT4;
		GL_W.GL_SAMPLER_1D = GL40.GL_SAMPLER_1D;
		GL_W.GL_SAMPLER_2D = GL40.GL_SAMPLER_2D;
		GL_W.GL_SAMPLER_3D = GL40.GL_SAMPLER_3D;
		GL_W.GL_SAMPLER_CUBE = GL40.GL_SAMPLER_CUBE;
		GL_W.GL_SAMPLER_1D_SHADOW = GL40.GL_SAMPLER_1D_SHADOW;
		GL_W.GL_SAMPLER_2D_SHADOW = GL40.GL_SAMPLER_2D_SHADOW;
		GL_W.GL_VERTEX_SHADER = GL40.GL_VERTEX_SHADER;
		GL_W.GL_MAX_VERTEX_UNIFORM_COMPONENTS = GL40.GL_MAX_VERTEX_UNIFORM_COMPONENTS;
		GL_W.GL_MAX_VARYING_FLOATS = GL40.GL_MAX_VARYING_FLOATS;
		GL_W.GL_MAX_VERTEX_ATTRIBS = GL40.GL_MAX_VERTEX_ATTRIBS;
		GL_W.GL_MAX_TEXTURE_IMAGE_UNITS = GL40.GL_MAX_TEXTURE_IMAGE_UNITS;
		GL_W.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = GL40.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS;
		GL_W.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = GL40.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS;
		GL_W.GL_MAX_TEXTURE_COORDS = GL40.GL_MAX_TEXTURE_COORDS;
		GL_W.GL_VERTEX_PROGRAM_POINT_SIZE = GL40.GL_VERTEX_PROGRAM_POINT_SIZE;
		GL_W.GL_VERTEX_PROGRAM_TWO_SIDE = GL40.GL_VERTEX_PROGRAM_TWO_SIDE;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_ENABLED = GL40.GL_VERTEX_ATTRIB_ARRAY_ENABLED;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_SIZE = GL40.GL_VERTEX_ATTRIB_ARRAY_SIZE;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_STRIDE = GL40.GL_VERTEX_ATTRIB_ARRAY_STRIDE;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_TYPE = GL40.GL_VERTEX_ATTRIB_ARRAY_TYPE;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = GL40.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED;
		GL_W.GL_CURRENT_VERTEX_ATTRIB = GL40.GL_CURRENT_VERTEX_ATTRIB;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_POINTER = GL40.GL_VERTEX_ATTRIB_ARRAY_POINTER;
		GL_W.GL_FRAGMENT_SHADER = GL40.GL_FRAGMENT_SHADER;
		GL_W.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = GL40.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS;
		GL_W.GL_FRAGMENT_SHADER_DERIVATIVE_HINT = GL40.GL_FRAGMENT_SHADER_DERIVATIVE_HINT;
		GL_W.GL_MAX_DRAW_BUFFERS = GL40.GL_MAX_DRAW_BUFFERS;
		GL_W.GL_DRAW_BUFFER0 = GL40.GL_DRAW_BUFFER0;
		GL_W.GL_DRAW_BUFFER1 = GL40.GL_DRAW_BUFFER1;
		GL_W.GL_DRAW_BUFFER2 = GL40.GL_DRAW_BUFFER2;
		GL_W.GL_DRAW_BUFFER3 = GL40.GL_DRAW_BUFFER3;
		GL_W.GL_DRAW_BUFFER4 = GL40.GL_DRAW_BUFFER4;
		GL_W.GL_DRAW_BUFFER5 = GL40.GL_DRAW_BUFFER5;
		GL_W.GL_DRAW_BUFFER6 = GL40.GL_DRAW_BUFFER6;
		GL_W.GL_DRAW_BUFFER7 = GL40.GL_DRAW_BUFFER7;
		GL_W.GL_DRAW_BUFFER8 = GL40.GL_DRAW_BUFFER8;
		GL_W.GL_DRAW_BUFFER9 = GL40.GL_DRAW_BUFFER9;
		GL_W.GL_DRAW_BUFFER10 = GL40.GL_DRAW_BUFFER10;
		GL_W.GL_DRAW_BUFFER11 = GL40.GL_DRAW_BUFFER11;
		GL_W.GL_DRAW_BUFFER12 = GL40.GL_DRAW_BUFFER12;
		GL_W.GL_DRAW_BUFFER13 = GL40.GL_DRAW_BUFFER13;
		GL_W.GL_DRAW_BUFFER14 = GL40.GL_DRAW_BUFFER14;
		GL_W.GL_DRAW_BUFFER15 = GL40.GL_DRAW_BUFFER15;
		GL_W.GL_POINT_SPRITE = GL40.GL_POINT_SPRITE;
		GL_W.GL_COORD_REPLACE = GL40.GL_COORD_REPLACE;
		GL_W.GL_POINT_SPRITE_COORD_ORIGIN = GL40.GL_POINT_SPRITE_COORD_ORIGIN;
		GL_W.GL_LOWER_LEFT = GL40.GL_LOWER_LEFT;
		GL_W.GL_UPPER_LEFT = GL40.GL_UPPER_LEFT;
		GL_W.GL_BLEND_EQUATION_RGB = GL40.GL_BLEND_EQUATION_RGB;
		GL_W.GL_BLEND_EQUATION_ALPHA = GL40.GL_BLEND_EQUATION_ALPHA;
		GL_W.GL_STENCIL_BACK_FUNC = GL40.GL_STENCIL_BACK_FUNC;
		GL_W.GL_STENCIL_BACK_FAIL = GL40.GL_STENCIL_BACK_FAIL;
		GL_W.GL_STENCIL_BACK_PASS_DEPTH_FAIL = GL40.GL_STENCIL_BACK_PASS_DEPTH_FAIL;
		GL_W.GL_STENCIL_BACK_PASS_DEPTH_PASS = GL40.GL_STENCIL_BACK_PASS_DEPTH_PASS;
		GL_W.GL_STENCIL_BACK_REF = GL40.GL_STENCIL_BACK_REF;
		GL_W.GL_STENCIL_BACK_VALUE_MASK = GL40.GL_STENCIL_BACK_VALUE_MASK;
		GL_W.GL_STENCIL_BACK_WRITEMASK = GL40.GL_STENCIL_BACK_WRITEMASK;
		GL_W.GL_FOG_COORD_SRC = GL40.GL_FOG_COORD_SRC;
		GL_W.GL_FOG_COORD = GL40.GL_FOG_COORD;
		GL_W.GL_CURRENT_FOG_COORD = GL40.GL_CURRENT_FOG_COORD;
		GL_W.GL_FOG_COORD_ARRAY_TYPE = GL40.GL_FOG_COORD_ARRAY_TYPE;
		GL_W.GL_FOG_COORD_ARRAY_STRIDE = GL40.GL_FOG_COORD_ARRAY_STRIDE;
		GL_W.GL_FOG_COORD_ARRAY_POINTER = GL40.GL_FOG_COORD_ARRAY_POINTER;
		GL_W.GL_FOG_COORD_ARRAY = GL40.GL_FOG_COORD_ARRAY;
		GL_W.GL_FOG_COORD_ARRAY_BUFFER_BINDING = GL40.GL_FOG_COORD_ARRAY_BUFFER_BINDING;
		GL_W.GL_SRC0_RGB = GL40.GL_SRC0_RGB;
		GL_W.GL_SRC1_RGB = GL40.GL_SRC1_RGB;
		GL_W.GL_SRC2_RGB = GL40.GL_SRC2_RGB;
		GL_W.GL_SRC0_ALPHA = GL40.GL_SRC0_ALPHA;
		GL_W.GL_SRC1_ALPHA = GL40.GL_SRC1_ALPHA;
		GL_W.GL_SRC2_ALPHA = GL40.GL_SRC2_ALPHA;
		GL_W.GL_ARRAY_BUFFER = GL40.GL_ARRAY_BUFFER;
		GL_W.GL_ELEMENT_ARRAY_BUFFER = GL40.GL_ELEMENT_ARRAY_BUFFER;
		GL_W.GL_ARRAY_BUFFER_BINDING = GL40.GL_ARRAY_BUFFER_BINDING;
		GL_W.GL_ELEMENT_ARRAY_BUFFER_BINDING = GL40.GL_ELEMENT_ARRAY_BUFFER_BINDING;
		GL_W.GL_VERTEX_ARRAY_BUFFER_BINDING = GL40.GL_VERTEX_ARRAY_BUFFER_BINDING;
		GL_W.GL_NORMAL_ARRAY_BUFFER_BINDING = GL40.GL_NORMAL_ARRAY_BUFFER_BINDING;
		GL_W.GL_COLOR_ARRAY_BUFFER_BINDING = GL40.GL_COLOR_ARRAY_BUFFER_BINDING;
		GL_W.GL_INDEX_ARRAY_BUFFER_BINDING = GL40.GL_INDEX_ARRAY_BUFFER_BINDING;
		GL_W.GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = GL40.GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING;
		GL_W.GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = GL40.GL_EDGE_FLAG_ARRAY_BUFFER_BINDING;
		GL_W.GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = GL40.GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING;
		GL_W.GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = GL40.GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING;
		GL_W.GL_WEIGHT_ARRAY_BUFFER_BINDING = GL40.GL_WEIGHT_ARRAY_BUFFER_BINDING;
		GL_W.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = GL40.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
		GL_W.GL_STREAM_DRAW = GL40.GL_STREAM_DRAW;
		GL_W.GL_STREAM_READ = GL40.GL_STREAM_READ;
		GL_W.GL_STREAM_COPY = GL40.GL_STREAM_COPY;
		GL_W.GL_STATIC_DRAW = GL40.GL_STATIC_DRAW;
		GL_W.GL_STATIC_READ = GL40.GL_STATIC_READ;
		GL_W.GL_STATIC_COPY = GL40.GL_STATIC_COPY;
		GL_W.GL_DYNAMIC_DRAW = GL40.GL_DYNAMIC_DRAW;
		GL_W.GL_DYNAMIC_READ = GL40.GL_DYNAMIC_READ;
		GL_W.GL_DYNAMIC_COPY = GL40.GL_DYNAMIC_COPY;
		GL_W.GL_READ_ONLY = GL40.GL_READ_ONLY;
		GL_W.GL_WRITE_ONLY = GL40.GL_WRITE_ONLY;
		GL_W.GL_READ_WRITE = GL40.GL_READ_WRITE;
		GL_W.GL_BUFFER_SIZE = GL40.GL_BUFFER_SIZE;
		GL_W.GL_BUFFER_USAGE = GL40.GL_BUFFER_USAGE;
		GL_W.GL_BUFFER_ACCESS = GL40.GL_BUFFER_ACCESS;
		GL_W.GL_BUFFER_MAPPED = GL40.GL_BUFFER_MAPPED;
		GL_W.GL_BUFFER_MAP_POINTER = GL40.GL_BUFFER_MAP_POINTER;
		GL_W.GL_SAMPLES_PASSED = GL40.GL_SAMPLES_PASSED;
		GL_W.GL_QUERY_COUNTER_BITS = GL40.GL_QUERY_COUNTER_BITS;
		GL_W.GL_CURRENT_QUERY = GL40.GL_CURRENT_QUERY;
		GL_W.GL_QUERY_RESULT = GL40.GL_QUERY_RESULT;
		GL_W.GL_QUERY_RESULT_AVAILABLE = GL40.GL_QUERY_RESULT_AVAILABLE;
		GL_W.GL_GENERATE_MIPMAP = GL40.GL_GENERATE_MIPMAP;
		GL_W.GL_GENERATE_MIPMAP_HINT = GL40.GL_GENERATE_MIPMAP_HINT;
		GL_W.GL_CONSTANT_COLOR = GL40.GL_CONSTANT_COLOR;
		GL_W.GL_ONE_MINUS_CONSTANT_COLOR = GL40.GL_ONE_MINUS_CONSTANT_COLOR;
		GL_W.GL_CONSTANT_ALPHA = GL40.GL_CONSTANT_ALPHA;
		GL_W.GL_ONE_MINUS_CONSTANT_ALPHA = GL40.GL_ONE_MINUS_CONSTANT_ALPHA;
		GL_W.GL_FUNC_ADD = GL40.GL_FUNC_ADD;
		GL_W.GL_MIN = GL40.GL_MIN;
		GL_W.GL_MAX = GL40.GL_MAX;
		GL_W.GL_FUNC_SUBTRACT = GL40.GL_FUNC_SUBTRACT;
		GL_W.GL_FUNC_REVERSE_SUBTRACT = GL40.GL_FUNC_REVERSE_SUBTRACT;
		GL_W.GL_DEPTH_COMPONENT16 = GL40.GL_DEPTH_COMPONENT16;
		GL_W.GL_DEPTH_COMPONENT24 = GL40.GL_DEPTH_COMPONENT24;
		GL_W.GL_DEPTH_COMPONENT32 = GL40.GL_DEPTH_COMPONENT32;
		GL_W.GL_TEXTURE_DEPTH_SIZE = GL40.GL_TEXTURE_DEPTH_SIZE;
		GL_W.GL_DEPTH_TEXTURE_MODE = GL40.GL_DEPTH_TEXTURE_MODE;
		GL_W.GL_TEXTURE_COMPARE_MODE = GL40.GL_TEXTURE_COMPARE_MODE;
		GL_W.GL_TEXTURE_COMPARE_FUNC = GL40.GL_TEXTURE_COMPARE_FUNC;
		GL_W.GL_COMPARE_R_TO_TEXTURE = GL40.GL_COMPARE_R_TO_TEXTURE;
		GL_W.GL_FOG_COORDINATE_SOURCE = GL40.GL_FOG_COORDINATE_SOURCE;
		GL_W.GL_FOG_COORDINATE = GL40.GL_FOG_COORDINATE;
		GL_W.GL_FRAGMENT_DEPTH = GL40.GL_FRAGMENT_DEPTH;
		GL_W.GL_CURRENT_FOG_COORDINATE = GL40.GL_CURRENT_FOG_COORDINATE;
		GL_W.GL_FOG_COORDINATE_ARRAY_TYPE = GL40.GL_FOG_COORDINATE_ARRAY_TYPE;
		GL_W.GL_FOG_COORDINATE_ARRAY_STRIDE = GL40.GL_FOG_COORDINATE_ARRAY_STRIDE;
		GL_W.GL_FOG_COORDINATE_ARRAY_POINTER = GL40.GL_FOG_COORDINATE_ARRAY_POINTER;
		GL_W.GL_FOG_COORDINATE_ARRAY = GL40.GL_FOG_COORDINATE_ARRAY;
		GL_W.GL_POINT_SIZE_MIN = GL40.GL_POINT_SIZE_MIN;
		GL_W.GL_POINT_SIZE_MAX = GL40.GL_POINT_SIZE_MAX;
		GL_W.GL_POINT_FADE_THRESHOLD_SIZE = GL40.GL_POINT_FADE_THRESHOLD_SIZE;
		GL_W.GL_POINT_DISTANCE_ATTENUATION = GL40.GL_POINT_DISTANCE_ATTENUATION;
		GL_W.GL_COLOR_SUM = GL40.GL_COLOR_SUM;
		GL_W.GL_CURRENT_SECONDARY_COLOR = GL40.GL_CURRENT_SECONDARY_COLOR;
		GL_W.GL_SECONDARY_COLOR_ARRAY_SIZE = GL40.GL_SECONDARY_COLOR_ARRAY_SIZE;
		GL_W.GL_SECONDARY_COLOR_ARRAY_TYPE = GL40.GL_SECONDARY_COLOR_ARRAY_TYPE;
		GL_W.GL_SECONDARY_COLOR_ARRAY_STRIDE = GL40.GL_SECONDARY_COLOR_ARRAY_STRIDE;
		GL_W.GL_SECONDARY_COLOR_ARRAY_POINTER = GL40.GL_SECONDARY_COLOR_ARRAY_POINTER;
		GL_W.GL_SECONDARY_COLOR_ARRAY = GL40.GL_SECONDARY_COLOR_ARRAY;
		GL_W.GL_BLEND_DST_RGB = GL40.GL_BLEND_DST_RGB;
		GL_W.GL_BLEND_SRC_RGB = GL40.GL_BLEND_SRC_RGB;
		GL_W.GL_BLEND_DST_ALPHA = GL40.GL_BLEND_DST_ALPHA;
		GL_W.GL_BLEND_SRC_ALPHA = GL40.GL_BLEND_SRC_ALPHA;
		GL_W.GL_INCR_WRAP = GL40.GL_INCR_WRAP;
		GL_W.GL_DECR_WRAP = GL40.GL_DECR_WRAP;
		GL_W.GL_TEXTURE_FILTER_CONTROL = GL40.GL_TEXTURE_FILTER_CONTROL;
		GL_W.GL_TEXTURE_LOD_BIAS = GL40.GL_TEXTURE_LOD_BIAS;
		GL_W.GL_MAX_TEXTURE_LOD_BIAS = GL40.GL_MAX_TEXTURE_LOD_BIAS;
		GL_W.GL_MIRRORED_REPEAT = GL40.GL_MIRRORED_REPEAT;
		GL_W.GL_COMPRESSED_ALPHA = GL40.GL_COMPRESSED_ALPHA;
		GL_W.GL_COMPRESSED_LUMINANCE = GL40.GL_COMPRESSED_LUMINANCE;
		GL_W.GL_COMPRESSED_LUMINANCE_ALPHA = GL40.GL_COMPRESSED_LUMINANCE_ALPHA;
		GL_W.GL_COMPRESSED_INTENSITY = GL40.GL_COMPRESSED_INTENSITY;
		GL_W.GL_COMPRESSED_RGB = GL40.GL_COMPRESSED_RGB;
		GL_W.GL_COMPRESSED_RGBA = GL40.GL_COMPRESSED_RGBA;
		GL_W.GL_TEXTURE_COMPRESSION_HINT = GL40.GL_TEXTURE_COMPRESSION_HINT;
		GL_W.GL_TEXTURE_COMPRESSED_IMAGE_SIZE = GL40.GL_TEXTURE_COMPRESSED_IMAGE_SIZE;
		GL_W.GL_TEXTURE_COMPRESSED = GL40.GL_TEXTURE_COMPRESSED;
		GL_W.GL_NUM_COMPRESSED_TEXTURE_FORMATS = GL40.GL_NUM_COMPRESSED_TEXTURE_FORMATS;
		GL_W.GL_COMPRESSED_TEXTURE_FORMATS = GL40.GL_COMPRESSED_TEXTURE_FORMATS;
		GL_W.GL_NORMAL_MAP = GL40.GL_NORMAL_MAP;
		GL_W.GL_REFLECTION_MAP = GL40.GL_REFLECTION_MAP;
		GL_W.GL_TEXTURE_CUBE_MAP = GL40.GL_TEXTURE_CUBE_MAP;
		GL_W.GL_TEXTURE_BINDING_CUBE_MAP = GL40.GL_TEXTURE_BINDING_CUBE_MAP;
		GL_W.GL_TEXTURE_CUBE_MAP_POSITIVE_X = GL40.GL_TEXTURE_CUBE_MAP_POSITIVE_X;
		GL_W.GL_TEXTURE_CUBE_MAP_NEGATIVE_X = GL40.GL_TEXTURE_CUBE_MAP_NEGATIVE_X;
		GL_W.GL_TEXTURE_CUBE_MAP_POSITIVE_Y = GL40.GL_TEXTURE_CUBE_MAP_POSITIVE_Y;
		GL_W.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = GL40.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;
		GL_W.GL_TEXTURE_CUBE_MAP_POSITIVE_Z = GL40.GL_TEXTURE_CUBE_MAP_POSITIVE_Z;
		GL_W.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = GL40.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;
		GL_W.GL_PROXY_TEXTURE_CUBE_MAP = GL40.GL_PROXY_TEXTURE_CUBE_MAP;
		GL_W.GL_MAX_CUBE_MAP_TEXTURE_SIZE = GL40.GL_MAX_CUBE_MAP_TEXTURE_SIZE;
		GL_W.GL_MULTISAMPLE = GL40.GL_MULTISAMPLE;
		GL_W.GL_SAMPLE_ALPHA_TO_COVERAGE = GL40.GL_SAMPLE_ALPHA_TO_COVERAGE;
		GL_W.GL_SAMPLE_ALPHA_TO_ONE = GL40.GL_SAMPLE_ALPHA_TO_ONE;
		GL_W.GL_SAMPLE_COVERAGE = GL40.GL_SAMPLE_COVERAGE;
		GL_W.GL_MULTISAMPLE_BIT = GL40.GL_MULTISAMPLE_BIT;
		GL_W.GL_SAMPLE_BUFFERS = GL40.GL_SAMPLE_BUFFERS;
		GL_W.GL_SAMPLES = GL40.GL_SAMPLES;
		GL_W.GL_SAMPLE_COVERAGE_VALUE = GL40.GL_SAMPLE_COVERAGE_VALUE;
		GL_W.GL_SAMPLE_COVERAGE_INVERT = GL40.GL_SAMPLE_COVERAGE_INVERT;
		GL_W.GL_TEXTURE0 = GL40.GL_TEXTURE0;
		GL_W.GL_TEXTURE1 = GL40.GL_TEXTURE1;
		GL_W.GL_TEXTURE2 = GL40.GL_TEXTURE2;
		GL_W.GL_TEXTURE3 = GL40.GL_TEXTURE3;
		GL_W.GL_TEXTURE4 = GL40.GL_TEXTURE4;
		GL_W.GL_TEXTURE5 = GL40.GL_TEXTURE5;
		GL_W.GL_TEXTURE6 = GL40.GL_TEXTURE6;
		GL_W.GL_TEXTURE7 = GL40.GL_TEXTURE7;
		GL_W.GL_TEXTURE8 = GL40.GL_TEXTURE8;
		GL_W.GL_TEXTURE9 = GL40.GL_TEXTURE9;
		GL_W.GL_TEXTURE10 = GL40.GL_TEXTURE10;
		GL_W.GL_TEXTURE11 = GL40.GL_TEXTURE11;
		GL_W.GL_TEXTURE12 = GL40.GL_TEXTURE12;
		GL_W.GL_TEXTURE13 = GL40.GL_TEXTURE13;
		GL_W.GL_TEXTURE14 = GL40.GL_TEXTURE14;
		GL_W.GL_TEXTURE15 = GL40.GL_TEXTURE15;
		GL_W.GL_TEXTURE16 = GL40.GL_TEXTURE16;
		GL_W.GL_TEXTURE17 = GL40.GL_TEXTURE17;
		GL_W.GL_TEXTURE18 = GL40.GL_TEXTURE18;
		GL_W.GL_TEXTURE19 = GL40.GL_TEXTURE19;
		GL_W.GL_TEXTURE20 = GL40.GL_TEXTURE20;
		GL_W.GL_TEXTURE21 = GL40.GL_TEXTURE21;
		GL_W.GL_TEXTURE22 = GL40.GL_TEXTURE22;
		GL_W.GL_TEXTURE23 = GL40.GL_TEXTURE23;
		GL_W.GL_TEXTURE24 = GL40.GL_TEXTURE24;
		GL_W.GL_TEXTURE25 = GL40.GL_TEXTURE25;
		GL_W.GL_TEXTURE26 = GL40.GL_TEXTURE26;
		GL_W.GL_TEXTURE27 = GL40.GL_TEXTURE27;
		GL_W.GL_TEXTURE28 = GL40.GL_TEXTURE28;
		GL_W.GL_TEXTURE29 = GL40.GL_TEXTURE29;
		GL_W.GL_TEXTURE30 = GL40.GL_TEXTURE30;
		GL_W.GL_TEXTURE31 = GL40.GL_TEXTURE31;
		GL_W.GL_ACTIVE_TEXTURE = GL40.GL_ACTIVE_TEXTURE;
		GL_W.GL_CLIENT_ACTIVE_TEXTURE = GL40.GL_CLIENT_ACTIVE_TEXTURE;
		GL_W.GL_MAX_TEXTURE_UNITS = GL40.GL_MAX_TEXTURE_UNITS;
		GL_W.GL_COMBINE = GL40.GL_COMBINE;
		GL_W.GL_COMBINE_RGB = GL40.GL_COMBINE_RGB;
		GL_W.GL_COMBINE_ALPHA = GL40.GL_COMBINE_ALPHA;
		GL_W.GL_SOURCE0_RGB = GL40.GL_SOURCE0_RGB;
		GL_W.GL_SOURCE1_RGB = GL40.GL_SOURCE1_RGB;
		GL_W.GL_SOURCE2_RGB = GL40.GL_SOURCE2_RGB;
		GL_W.GL_SOURCE0_ALPHA = GL40.GL_SOURCE0_ALPHA;
		GL_W.GL_SOURCE1_ALPHA = GL40.GL_SOURCE1_ALPHA;
		GL_W.GL_SOURCE2_ALPHA = GL40.GL_SOURCE2_ALPHA;
		GL_W.GL_OPERAND0_RGB = GL40.GL_OPERAND0_RGB;
		GL_W.GL_OPERAND1_RGB = GL40.GL_OPERAND1_RGB;
		GL_W.GL_OPERAND2_RGB = GL40.GL_OPERAND2_RGB;
		GL_W.GL_OPERAND0_ALPHA = GL40.GL_OPERAND0_ALPHA;
		GL_W.GL_OPERAND1_ALPHA = GL40.GL_OPERAND1_ALPHA;
		GL_W.GL_OPERAND2_ALPHA = GL40.GL_OPERAND2_ALPHA;
		GL_W.GL_RGB_SCALE = GL40.GL_RGB_SCALE;
		GL_W.GL_ADD_SIGNED = GL40.GL_ADD_SIGNED;
		GL_W.GL_INTERPOLATE = GL40.GL_INTERPOLATE;
		GL_W.GL_SUBTRACT = GL40.GL_SUBTRACT;
		GL_W.GL_CONSTANT = GL40.GL_CONSTANT;
		GL_W.GL_PRIMARY_COLOR = GL40.GL_PRIMARY_COLOR;
		GL_W.GL_PREVIOUS = GL40.GL_PREVIOUS;
		GL_W.GL_DOT3_RGB = GL40.GL_DOT3_RGB;
		GL_W.GL_DOT3_RGBA = GL40.GL_DOT3_RGBA;
		GL_W.GL_CLAMP_TO_BORDER = GL40.GL_CLAMP_TO_BORDER;
		GL_W.GL_TRANSPOSE_MODELVIEW_MATRIX = GL40.GL_TRANSPOSE_MODELVIEW_MATRIX;
		GL_W.GL_TRANSPOSE_PROJECTION_MATRIX = GL40.GL_TRANSPOSE_PROJECTION_MATRIX;
		GL_W.GL_TRANSPOSE_TEXTURE_MATRIX = GL40.GL_TRANSPOSE_TEXTURE_MATRIX;
		GL_W.GL_TRANSPOSE_COLOR_MATRIX = GL40.GL_TRANSPOSE_COLOR_MATRIX;
		GL_W.GL_ALIASED_POINT_SIZE_RANGE = GL40.GL_ALIASED_POINT_SIZE_RANGE;
		GL_W.GL_ALIASED_LINE_WIDTH_RANGE = GL40.GL_ALIASED_LINE_WIDTH_RANGE;
		GL_W.GL_SMOOTH_POINT_SIZE_RANGE = GL40.GL_SMOOTH_POINT_SIZE_RANGE;
		GL_W.GL_SMOOTH_POINT_SIZE_GRANULARITY = GL40.GL_SMOOTH_POINT_SIZE_GRANULARITY;
		GL_W.GL_SMOOTH_LINE_WIDTH_RANGE = GL40.GL_SMOOTH_LINE_WIDTH_RANGE;
		GL_W.GL_SMOOTH_LINE_WIDTH_GRANULARITY = GL40.GL_SMOOTH_LINE_WIDTH_GRANULARITY;
		GL_W.GL_TEXTURE_BINDING_3D = GL40.GL_TEXTURE_BINDING_3D;
		GL_W.GL_PACK_SKIP_IMAGES = GL40.GL_PACK_SKIP_IMAGES;
		GL_W.GL_PACK_IMAGE_HEIGHT = GL40.GL_PACK_IMAGE_HEIGHT;
		GL_W.GL_UNPACK_SKIP_IMAGES = GL40.GL_UNPACK_SKIP_IMAGES;
		GL_W.GL_UNPACK_IMAGE_HEIGHT = GL40.GL_UNPACK_IMAGE_HEIGHT;
		GL_W.GL_TEXTURE_3D = GL40.GL_TEXTURE_3D;
		GL_W.GL_PROXY_TEXTURE_3D = GL40.GL_PROXY_TEXTURE_3D;
		GL_W.GL_TEXTURE_DEPTH = GL40.GL_TEXTURE_DEPTH;
		GL_W.GL_TEXTURE_WRAP_R = GL40.GL_TEXTURE_WRAP_R;
		GL_W.GL_MAX_3D_TEXTURE_SIZE = GL40.GL_MAX_3D_TEXTURE_SIZE;
		GL_W.GL_BGR = GL40.GL_BGR;
		GL_W.GL_BGRA = GL40.GL_BGRA;
		GL_W.GL_UNSIGNED_BYTE_3_3_2 = GL40.GL_UNSIGNED_BYTE_3_3_2;
		GL_W.GL_UNSIGNED_BYTE_2_3_3_REV = GL40.GL_UNSIGNED_BYTE_2_3_3_REV;
		GL_W.GL_UNSIGNED_SHORT_5_6_5 = GL40.GL_UNSIGNED_SHORT_5_6_5;
		GL_W.GL_UNSIGNED_SHORT_5_6_5_REV = GL40.GL_UNSIGNED_SHORT_5_6_5_REV;
		GL_W.GL_UNSIGNED_SHORT_4_4_4_4 = GL40.GL_UNSIGNED_SHORT_4_4_4_4;
		GL_W.GL_UNSIGNED_SHORT_4_4_4_4_REV = GL40.GL_UNSIGNED_SHORT_4_4_4_4_REV;
		GL_W.GL_UNSIGNED_SHORT_5_5_5_1 = GL40.GL_UNSIGNED_SHORT_5_5_5_1;
		GL_W.GL_UNSIGNED_SHORT_1_5_5_5_REV = GL40.GL_UNSIGNED_SHORT_1_5_5_5_REV;
		GL_W.GL_UNSIGNED_INT_8_8_8_8 = GL40.GL_UNSIGNED_INT_8_8_8_8;
		GL_W.GL_UNSIGNED_INT_8_8_8_8_REV = GL40.GL_UNSIGNED_INT_8_8_8_8_REV;
		GL_W.GL_UNSIGNED_INT_10_10_10_2 = GL40.GL_UNSIGNED_INT_10_10_10_2;
		GL_W.GL_UNSIGNED_INT_2_10_10_10_REV = GL40.GL_UNSIGNED_INT_2_10_10_10_REV;
		GL_W.GL_RESCALE_NORMAL = GL40.GL_RESCALE_NORMAL;
		GL_W.GL_LIGHT_MODEL_COLOR_CONTROL = GL40.GL_LIGHT_MODEL_COLOR_CONTROL;
		GL_W.GL_SINGLE_COLOR = GL40.GL_SINGLE_COLOR;
		GL_W.GL_SEPARATE_SPECULAR_COLOR = GL40.GL_SEPARATE_SPECULAR_COLOR;
		GL_W.GL_CLAMP_TO_EDGE = GL40.GL_CLAMP_TO_EDGE;
		GL_W.GL_TEXTURE_MIN_LOD = GL40.GL_TEXTURE_MIN_LOD;
		GL_W.GL_TEXTURE_MAX_LOD = GL40.GL_TEXTURE_MAX_LOD;
		GL_W.GL_TEXTURE_BASE_LEVEL = GL40.GL_TEXTURE_BASE_LEVEL;
		GL_W.GL_TEXTURE_MAX_LEVEL = GL40.GL_TEXTURE_MAX_LEVEL;
		GL_W.GL_MAX_ELEMENTS_VERTICES = GL40.GL_MAX_ELEMENTS_VERTICES;
		GL_W.GL_MAX_ELEMENTS_INDICES = GL40.GL_MAX_ELEMENTS_INDICES;
		GL_W.GL_ACCUM = GL40.GL_ACCUM;
		GL_W.GL_LOAD = GL40.GL_LOAD;
		GL_W.GL_RETURN = GL40.GL_RETURN;
		GL_W.GL_MULT = GL40.GL_MULT;
		GL_W.GL_ADD = GL40.GL_ADD;
		GL_W.GL_NEVER = GL40.GL_NEVER;
		GL_W.GL_LESS = GL40.GL_LESS;
		GL_W.GL_EQUAL = GL40.GL_EQUAL;
		GL_W.GL_LEQUAL = GL40.GL_LEQUAL;
		GL_W.GL_GREATER = GL40.GL_GREATER;
		GL_W.GL_NOTEQUAL = GL40.GL_NOTEQUAL;
		GL_W.GL_GEQUAL = GL40.GL_GEQUAL;
		GL_W.GL_ALWAYS = GL40.GL_ALWAYS;
		GL_W.GL_CURRENT_BIT = GL40.GL_CURRENT_BIT;
		GL_W.GL_POINT_BIT = GL40.GL_POINT_BIT;
		GL_W.GL_LINE_BIT = GL40.GL_LINE_BIT;
		GL_W.GL_POLYGON_BIT = GL40.GL_POLYGON_BIT;
		GL_W.GL_POLYGON_STIPPLE_BIT = GL40.GL_POLYGON_STIPPLE_BIT;
		GL_W.GL_PIXEL_MODE_BIT = GL40.GL_PIXEL_MODE_BIT;
		GL_W.GL_LIGHTING_BIT = GL40.GL_LIGHTING_BIT;
		GL_W.GL_FOG_BIT = GL40.GL_FOG_BIT;
		GL_W.GL_DEPTH_BUFFER_BIT = GL40.GL_DEPTH_BUFFER_BIT;
		GL_W.GL_ACCUM_BUFFER_BIT = GL40.GL_ACCUM_BUFFER_BIT;
		GL_W.GL_STENCIL_BUFFER_BIT = GL40.GL_STENCIL_BUFFER_BIT;
		GL_W.GL_VIEWPORT_BIT = GL40.GL_VIEWPORT_BIT;
		GL_W.GL_TRANSFORM_BIT = GL40.GL_TRANSFORM_BIT;
		GL_W.GL_ENABLE_BIT = GL40.GL_ENABLE_BIT;
		GL_W.GL_COLOR_BUFFER_BIT = GL40.GL_COLOR_BUFFER_BIT;
		GL_W.GL_HINT_BIT = GL40.GL_HINT_BIT;
		GL_W.GL_EVAL_BIT = GL40.GL_EVAL_BIT;
		GL_W.GL_LIST_BIT = GL40.GL_LIST_BIT;
		GL_W.GL_TEXTURE_BIT = GL40.GL_TEXTURE_BIT;
		GL_W.GL_SCISSOR_BIT = GL40.GL_SCISSOR_BIT;
		GL_W.GL_ALL_ATTRIB_BITS = GL40.GL_ALL_ATTRIB_BITS;
		GL_W.GL_POINTS = GL40.GL_POINTS;
		GL_W.GL_LINES = GL40.GL_LINES;
		GL_W.GL_LINE_LOOP = GL40.GL_LINE_LOOP;
		GL_W.GL_LINE_STRIP = GL40.GL_LINE_STRIP;
		GL_W.GL_TRIANGLES = GL40.GL_TRIANGLES;
		GL_W.GL_TRIANGLE_STRIP = GL40.GL_TRIANGLE_STRIP;
		GL_W.GL_TRIANGLE_FAN = GL40.GL_TRIANGLE_FAN;
		GL_W.GL_QUADS = GL40.GL_QUADS;
		GL_W.GL_QUAD_STRIP = GL40.GL_QUAD_STRIP;
		GL_W.GL_POLYGON = GL40.GL_POLYGON;
		GL_W.GL_ZERO = GL40.GL_ZERO;
		GL_W.GL_ONE = GL40.GL_ONE;
		GL_W.GL_SRC_COLOR = GL40.GL_SRC_COLOR;
		GL_W.GL_ONE_MINUS_SRC_COLOR = GL40.GL_ONE_MINUS_SRC_COLOR;
		GL_W.GL_SRC_ALPHA = GL40.GL_SRC_ALPHA;
		GL_W.GL_ONE_MINUS_SRC_ALPHA = GL40.GL_ONE_MINUS_SRC_ALPHA;
		GL_W.GL_DST_ALPHA = GL40.GL_DST_ALPHA;
		GL_W.GL_ONE_MINUS_DST_ALPHA = GL40.GL_ONE_MINUS_DST_ALPHA;
		GL_W.GL_DST_COLOR = GL40.GL_DST_COLOR;
		GL_W.GL_ONE_MINUS_DST_COLOR = GL40.GL_ONE_MINUS_DST_COLOR;
		GL_W.GL_SRC_ALPHA_SATURATE = GL40.GL_SRC_ALPHA_SATURATE;
		GL_W.GL_TRUE = GL40.GL_TRUE;
		GL_W.GL_FALSE = GL40.GL_FALSE;
		GL_W.GL_CLIP_PLANE0 = GL40.GL_CLIP_PLANE0;
		GL_W.GL_CLIP_PLANE1 = GL40.GL_CLIP_PLANE1;
		GL_W.GL_CLIP_PLANE2 = GL40.GL_CLIP_PLANE2;
		GL_W.GL_CLIP_PLANE3 = GL40.GL_CLIP_PLANE3;
		GL_W.GL_CLIP_PLANE4 = GL40.GL_CLIP_PLANE4;
		GL_W.GL_CLIP_PLANE5 = GL40.GL_CLIP_PLANE5;
		GL_W.GL_BYTE = GL40.GL_BYTE;
		GL_W.GL_UNSIGNED_BYTE = GL40.GL_UNSIGNED_BYTE;
		GL_W.GL_SHORT = GL40.GL_SHORT;
		GL_W.GL_UNSIGNED_SHORT = GL40.GL_UNSIGNED_SHORT;
		GL_W.GL_INT = GL40.GL_INT;
		GL_W.GL_UNSIGNED_INT = GL40.GL_UNSIGNED_INT;
		GL_W.GL_FLOAT = GL40.GL_FLOAT;
		GL_W.GL_2_BYTES = GL40.GL_2_BYTES;
		GL_W.GL_3_BYTES = GL40.GL_3_BYTES;
		GL_W.GL_4_BYTES = GL40.GL_4_BYTES;
		GL_W.GL_DOUBLE = GL40.GL_DOUBLE;
		GL_W.GL_NONE = GL40.GL_NONE;
		GL_W.GL_FRONT_LEFT = GL40.GL_FRONT_LEFT;
		GL_W.GL_FRONT_RIGHT = GL40.GL_FRONT_RIGHT;
		GL_W.GL_BACK_LEFT = GL40.GL_BACK_LEFT;
		GL_W.GL_BACK_RIGHT = GL40.GL_BACK_RIGHT;
		GL_W.GL_FRONT = GL40.GL_FRONT;
		GL_W.GL_BACK = GL40.GL_BACK;
		GL_W.GL_LEFT = GL40.GL_LEFT;
		GL_W.GL_RIGHT = GL40.GL_RIGHT;
		GL_W.GL_FRONT_AND_BACK = GL40.GL_FRONT_AND_BACK;
		GL_W.GL_AUX0 = GL40.GL_AUX0;
		GL_W.GL_AUX1 = GL40.GL_AUX1;
		GL_W.GL_AUX2 = GL40.GL_AUX2;
		GL_W.GL_AUX3 = GL40.GL_AUX3;
		GL_W.GL_NO_ERROR = GL40.GL_NO_ERROR;
		GL_W.GL_INVALID_ENUM = GL40.GL_INVALID_ENUM;
		GL_W.GL_INVALID_VALUE = GL40.GL_INVALID_VALUE;
		GL_W.GL_INVALID_OPERATION = GL40.GL_INVALID_OPERATION;
		GL_W.GL_STACK_OVERFLOW = GL40.GL_STACK_OVERFLOW;
		GL_W.GL_STACK_UNDERFLOW = GL40.GL_STACK_UNDERFLOW;
		GL_W.GL_OUT_OF_MEMORY = GL40.GL_OUT_OF_MEMORY;
		GL_W.GL_2D = GL40.GL_2D;
		GL_W.GL_3D = GL40.GL_3D;
		GL_W.GL_3D_COLOR = GL40.GL_3D_COLOR;
		GL_W.GL_3D_COLOR_TEXTURE = GL40.GL_3D_COLOR_TEXTURE;
		GL_W.GL_4D_COLOR_TEXTURE = GL40.GL_4D_COLOR_TEXTURE;
		GL_W.GL_PASS_THROUGH_TOKEN = GL40.GL_PASS_THROUGH_TOKEN;
		GL_W.GL_POINT_TOKEN = GL40.GL_POINT_TOKEN;
		GL_W.GL_LINE_TOKEN = GL40.GL_LINE_TOKEN;
		GL_W.GL_POLYGON_TOKEN = GL40.GL_POLYGON_TOKEN;
		GL_W.GL_BITMAP_TOKEN = GL40.GL_BITMAP_TOKEN;
		GL_W.GL_DRAW_PIXEL_TOKEN = GL40.GL_DRAW_PIXEL_TOKEN;
		GL_W.GL_COPY_PIXEL_TOKEN = GL40.GL_COPY_PIXEL_TOKEN;
		GL_W.GL_LINE_RESET_TOKEN = GL40.GL_LINE_RESET_TOKEN;
		GL_W.GL_EXP = GL40.GL_EXP;
		GL_W.GL_EXP2 = GL40.GL_EXP2;
		GL_W.GL_CW = GL40.GL_CW;
		GL_W.GL_CCW = GL40.GL_CCW;
		GL_W.GL_COEFF = GL40.GL_COEFF;
		GL_W.GL_ORDER = GL40.GL_ORDER;
		GL_W.GL_DOMAIN = GL40.GL_DOMAIN;
		GL_W.GL_CURRENT_COLOR = GL40.GL_CURRENT_COLOR;
		GL_W.GL_CURRENT_INDEX = GL40.GL_CURRENT_INDEX;
		GL_W.GL_CURRENT_NORMAL = GL40.GL_CURRENT_NORMAL;
		GL_W.GL_CURRENT_TEXTURE_COORDS = GL40.GL_CURRENT_TEXTURE_COORDS;
		GL_W.GL_CURRENT_RASTER_COLOR = GL40.GL_CURRENT_RASTER_COLOR;
		GL_W.GL_CURRENT_RASTER_INDEX = GL40.GL_CURRENT_RASTER_INDEX;
		GL_W.GL_CURRENT_RASTER_TEXTURE_COORDS = GL40.GL_CURRENT_RASTER_TEXTURE_COORDS;
		GL_W.GL_CURRENT_RASTER_POSITION = GL40.GL_CURRENT_RASTER_POSITION;
		GL_W.GL_CURRENT_RASTER_POSITION_VALID = GL40.GL_CURRENT_RASTER_POSITION_VALID;
		GL_W.GL_CURRENT_RASTER_DISTANCE = GL40.GL_CURRENT_RASTER_DISTANCE;
		GL_W.GL_POINT_SMOOTH = GL40.GL_POINT_SMOOTH;
		GL_W.GL_POINT_SIZE = GL40.GL_POINT_SIZE;
		GL_W.GL_POINT_SIZE_RANGE = GL40.GL_POINT_SIZE_RANGE;
		GL_W.GL_POINT_SIZE_GRANULARITY = GL40.GL_POINT_SIZE_GRANULARITY;
		GL_W.GL_LINE_SMOOTH = GL40.GL_LINE_SMOOTH;
		GL_W.GL_LINE_WIDTH = GL40.GL_LINE_WIDTH;
		GL_W.GL_LINE_WIDTH_RANGE = GL40.GL_LINE_WIDTH_RANGE;
		GL_W.GL_LINE_WIDTH_GRANULARITY = GL40.GL_LINE_WIDTH_GRANULARITY;
		GL_W.GL_LINE_STIPPLE = GL40.GL_LINE_STIPPLE;
		GL_W.GL_LINE_STIPPLE_PATTERN = GL40.GL_LINE_STIPPLE_PATTERN;
		GL_W.GL_LINE_STIPPLE_REPEAT = GL40.GL_LINE_STIPPLE_REPEAT;
		GL_W.GL_LIST_MODE = GL40.GL_LIST_MODE;
		GL_W.GL_MAX_LIST_NESTING = GL40.GL_MAX_LIST_NESTING;
		GL_W.GL_LIST_BASE = GL40.GL_LIST_BASE;
		GL_W.GL_LIST_INDEX = GL40.GL_LIST_INDEX;
		GL_W.GL_POLYGON_MODE = GL40.GL_POLYGON_MODE;
		GL_W.GL_POLYGON_SMOOTH = GL40.GL_POLYGON_SMOOTH;
		GL_W.GL_POLYGON_STIPPLE = GL40.GL_POLYGON_STIPPLE;
		GL_W.GL_EDGE_FLAG = GL40.GL_EDGE_FLAG;
		GL_W.GL_CULL_FACE = GL40.GL_CULL_FACE;
		GL_W.GL_CULL_FACE_MODE = GL40.GL_CULL_FACE_MODE;
		GL_W.GL_FRONT_FACE = GL40.GL_FRONT_FACE;
		GL_W.GL_LIGHTING = GL40.GL_LIGHTING;
		GL_W.GL_LIGHT_MODEL_LOCAL_VIEWER = GL40.GL_LIGHT_MODEL_LOCAL_VIEWER;
		GL_W.GL_LIGHT_MODEL_TWO_SIDE = GL40.GL_LIGHT_MODEL_TWO_SIDE;
		GL_W.GL_LIGHT_MODEL_AMBIENT = GL40.GL_LIGHT_MODEL_AMBIENT;
		GL_W.GL_SHADE_MODEL = GL40.GL_SHADE_MODEL;
		GL_W.GL_COLOR_MATERIAL_FACE = GL40.GL_COLOR_MATERIAL_FACE;
		GL_W.GL_COLOR_MATERIAL_PARAMETER = GL40.GL_COLOR_MATERIAL_PARAMETER;
		GL_W.GL_COLOR_MATERIAL = GL40.GL_COLOR_MATERIAL;
		GL_W.GL_FOG = GL40.GL_FOG;
		GL_W.GL_FOG_INDEX = GL40.GL_FOG_INDEX;
		GL_W.GL_FOG_DENSITY = GL40.GL_FOG_DENSITY;
		GL_W.GL_FOG_START = GL40.GL_FOG_START;
		GL_W.GL_FOG_END = GL40.GL_FOG_END;
		GL_W.GL_FOG_MODE = GL40.GL_FOG_MODE;
		GL_W.GL_FOG_COLOR = GL40.GL_FOG_COLOR;
		GL_W.GL_DEPTH_RANGE = GL40.GL_DEPTH_RANGE;
		GL_W.GL_DEPTH_TEST = GL40.GL_DEPTH_TEST;
		GL_W.GL_DEPTH_WRITEMASK = GL40.GL_DEPTH_WRITEMASK;
		GL_W.GL_DEPTH_CLEAR_VALUE = GL40.GL_DEPTH_CLEAR_VALUE;
		GL_W.GL_DEPTH_FUNC = GL40.GL_DEPTH_FUNC;
		GL_W.GL_ACCUM_CLEAR_VALUE = GL40.GL_ACCUM_CLEAR_VALUE;
		GL_W.GL_STENCIL_TEST = GL40.GL_STENCIL_TEST;
		GL_W.GL_STENCIL_CLEAR_VALUE = GL40.GL_STENCIL_CLEAR_VALUE;
		GL_W.GL_STENCIL_FUNC = GL40.GL_STENCIL_FUNC;
		GL_W.GL_STENCIL_VALUE_MASK = GL40.GL_STENCIL_VALUE_MASK;
		GL_W.GL_STENCIL_FAIL = GL40.GL_STENCIL_FAIL;
		GL_W.GL_STENCIL_PASS_DEPTH_FAIL = GL40.GL_STENCIL_PASS_DEPTH_FAIL;
		GL_W.GL_STENCIL_PASS_DEPTH_PASS = GL40.GL_STENCIL_PASS_DEPTH_PASS;
		GL_W.GL_STENCIL_REF = GL40.GL_STENCIL_REF;
		GL_W.GL_STENCIL_WRITEMASK = GL40.GL_STENCIL_WRITEMASK;
		GL_W.GL_MATRIX_MODE = GL40.GL_MATRIX_MODE;
		GL_W.GL_NORMALIZE = GL40.GL_NORMALIZE;
		GL_W.GL_VIEWPORT = GL40.GL_VIEWPORT;
		GL_W.GL_MODELVIEW_STACK_DEPTH = GL40.GL_MODELVIEW_STACK_DEPTH;
		GL_W.GL_PROJECTION_STACK_DEPTH = GL40.GL_PROJECTION_STACK_DEPTH;
		GL_W.GL_TEXTURE_STACK_DEPTH = GL40.GL_TEXTURE_STACK_DEPTH;
		GL_W.GL_MODELVIEW_MATRIX = GL40.GL_MODELVIEW_MATRIX;
		GL_W.GL_PROJECTION_MATRIX = GL40.GL_PROJECTION_MATRIX;
		GL_W.GL_TEXTURE_MATRIX = GL40.GL_TEXTURE_MATRIX;
		GL_W.GL_ATTRIB_STACK_DEPTH = GL40.GL_ATTRIB_STACK_DEPTH;
		GL_W.GL_CLIENT_ATTRIB_STACK_DEPTH = GL40.GL_CLIENT_ATTRIB_STACK_DEPTH;
		GL_W.GL_ALPHA_TEST = GL40.GL_ALPHA_TEST;
		GL_W.GL_ALPHA_TEST_FUNC = GL40.GL_ALPHA_TEST_FUNC;
		GL_W.GL_ALPHA_TEST_REF = GL40.GL_ALPHA_TEST_REF;
		GL_W.GL_DITHER = GL40.GL_DITHER;
		GL_W.GL_BLEND_DST = GL40.GL_BLEND_DST;
		GL_W.GL_BLEND_SRC = GL40.GL_BLEND_SRC;
		GL_W.GL_BLEND = GL40.GL_BLEND;
		GL_W.GL_LOGIC_OP_MODE = GL40.GL_LOGIC_OP_MODE;
		GL_W.GL_INDEX_LOGIC_OP = GL40.GL_INDEX_LOGIC_OP;
		GL_W.GL_LOGIC_OP = GL40.GL_LOGIC_OP;
		GL_W.GL_COLOR_LOGIC_OP = GL40.GL_COLOR_LOGIC_OP;
		GL_W.GL_AUX_BUFFERS = GL40.GL_AUX_BUFFERS;
		GL_W.GL_DRAW_BUFFER = GL40.GL_DRAW_BUFFER;
		GL_W.GL_READ_BUFFER = GL40.GL_READ_BUFFER;
		GL_W.GL_SCISSOR_BOX = GL40.GL_SCISSOR_BOX;
		GL_W.GL_SCISSOR_TEST = GL40.GL_SCISSOR_TEST;
		GL_W.GL_INDEX_CLEAR_VALUE = GL40.GL_INDEX_CLEAR_VALUE;
		GL_W.GL_INDEX_WRITEMASK = GL40.GL_INDEX_WRITEMASK;
		GL_W.GL_COLOR_CLEAR_VALUE = GL40.GL_COLOR_CLEAR_VALUE;
		GL_W.GL_COLOR_WRITEMASK = GL40.GL_COLOR_WRITEMASK;
		GL_W.GL_INDEX_MODE = GL40.GL_INDEX_MODE;
		GL_W.GL_RGBA_MODE = GL40.GL_RGBA_MODE;
		GL_W.GL_DOUBLEBUFFER = GL40.GL_DOUBLEBUFFER;
		GL_W.GL_STEREO = GL40.GL_STEREO;
		GL_W.GL_RENDER_MODE = GL40.GL_RENDER_MODE;
		GL_W.GL_PERSPECTIVE_CORRECTION_HINT = GL40.GL_PERSPECTIVE_CORRECTION_HINT;
		GL_W.GL_POINT_SMOOTH_HINT = GL40.GL_POINT_SMOOTH_HINT;
		GL_W.GL_LINE_SMOOTH_HINT = GL40.GL_LINE_SMOOTH_HINT;
		GL_W.GL_POLYGON_SMOOTH_HINT = GL40.GL_POLYGON_SMOOTH_HINT;
		GL_W.GL_FOG_HINT = GL40.GL_FOG_HINT;
		GL_W.GL_TEXTURE_GEN_S = GL40.GL_TEXTURE_GEN_S;
		GL_W.GL_TEXTURE_GEN_T = GL40.GL_TEXTURE_GEN_T;
		GL_W.GL_TEXTURE_GEN_R = GL40.GL_TEXTURE_GEN_R;
		GL_W.GL_TEXTURE_GEN_Q = GL40.GL_TEXTURE_GEN_Q;
		GL_W.GL_PIXEL_MAP_I_TO_I = GL40.GL_PIXEL_MAP_I_TO_I;
		GL_W.GL_PIXEL_MAP_S_TO_S = GL40.GL_PIXEL_MAP_S_TO_S;
		GL_W.GL_PIXEL_MAP_I_TO_R = GL40.GL_PIXEL_MAP_I_TO_R;
		GL_W.GL_PIXEL_MAP_I_TO_G = GL40.GL_PIXEL_MAP_I_TO_G;
		GL_W.GL_PIXEL_MAP_I_TO_B = GL40.GL_PIXEL_MAP_I_TO_B;
		GL_W.GL_PIXEL_MAP_I_TO_A = GL40.GL_PIXEL_MAP_I_TO_A;
		GL_W.GL_PIXEL_MAP_R_TO_R = GL40.GL_PIXEL_MAP_R_TO_R;
		GL_W.GL_PIXEL_MAP_G_TO_G = GL40.GL_PIXEL_MAP_G_TO_G;
		GL_W.GL_PIXEL_MAP_B_TO_B = GL40.GL_PIXEL_MAP_B_TO_B;
		GL_W.GL_PIXEL_MAP_A_TO_A = GL40.GL_PIXEL_MAP_A_TO_A;
		GL_W.GL_PIXEL_MAP_I_TO_I_SIZE = GL40.GL_PIXEL_MAP_I_TO_I_SIZE;
		GL_W.GL_PIXEL_MAP_S_TO_S_SIZE = GL40.GL_PIXEL_MAP_S_TO_S_SIZE;
		GL_W.GL_PIXEL_MAP_I_TO_R_SIZE = GL40.GL_PIXEL_MAP_I_TO_R_SIZE;
		GL_W.GL_PIXEL_MAP_I_TO_G_SIZE = GL40.GL_PIXEL_MAP_I_TO_G_SIZE;
		GL_W.GL_PIXEL_MAP_I_TO_B_SIZE = GL40.GL_PIXEL_MAP_I_TO_B_SIZE;
		GL_W.GL_PIXEL_MAP_I_TO_A_SIZE = GL40.GL_PIXEL_MAP_I_TO_A_SIZE;
		GL_W.GL_PIXEL_MAP_R_TO_R_SIZE = GL40.GL_PIXEL_MAP_R_TO_R_SIZE;
		GL_W.GL_PIXEL_MAP_G_TO_G_SIZE = GL40.GL_PIXEL_MAP_G_TO_G_SIZE;
		GL_W.GL_PIXEL_MAP_B_TO_B_SIZE = GL40.GL_PIXEL_MAP_B_TO_B_SIZE;
		GL_W.GL_PIXEL_MAP_A_TO_A_SIZE = GL40.GL_PIXEL_MAP_A_TO_A_SIZE;
		GL_W.GL_UNPACK_SWAP_BYTES = GL40.GL_UNPACK_SWAP_BYTES;
		GL_W.GL_UNPACK_LSB_FIRST = GL40.GL_UNPACK_LSB_FIRST;
		GL_W.GL_UNPACK_ROW_LENGTH = GL40.GL_UNPACK_ROW_LENGTH;
		GL_W.GL_UNPACK_SKIP_ROWS = GL40.GL_UNPACK_SKIP_ROWS;
		GL_W.GL_UNPACK_SKIP_PIXELS = GL40.GL_UNPACK_SKIP_PIXELS;
		GL_W.GL_UNPACK_ALIGNMENT = GL40.GL_UNPACK_ALIGNMENT;
		GL_W.GL_PACK_SWAP_BYTES = GL40.GL_PACK_SWAP_BYTES;
		GL_W.GL_PACK_LSB_FIRST = GL40.GL_PACK_LSB_FIRST;
		GL_W.GL_PACK_ROW_LENGTH = GL40.GL_PACK_ROW_LENGTH;
		GL_W.GL_PACK_SKIP_ROWS = GL40.GL_PACK_SKIP_ROWS;
		GL_W.GL_PACK_SKIP_PIXELS = GL40.GL_PACK_SKIP_PIXELS;
		GL_W.GL_PACK_ALIGNMENT = GL40.GL_PACK_ALIGNMENT;
		GL_W.GL_MAP_COLOR = GL40.GL_MAP_COLOR;
		GL_W.GL_MAP_STENCIL = GL40.GL_MAP_STENCIL;
		GL_W.GL_INDEX_SHIFT = GL40.GL_INDEX_SHIFT;
		GL_W.GL_INDEX_OFFSET = GL40.GL_INDEX_OFFSET;
		GL_W.GL_RED_SCALE = GL40.GL_RED_SCALE;
		GL_W.GL_RED_BIAS = GL40.GL_RED_BIAS;
		GL_W.GL_ZOOM_X = GL40.GL_ZOOM_X;
		GL_W.GL_ZOOM_Y = GL40.GL_ZOOM_Y;
		GL_W.GL_GREEN_SCALE = GL40.GL_GREEN_SCALE;
		GL_W.GL_GREEN_BIAS = GL40.GL_GREEN_BIAS;
		GL_W.GL_BLUE_SCALE = GL40.GL_BLUE_SCALE;
		GL_W.GL_BLUE_BIAS = GL40.GL_BLUE_BIAS;
		GL_W.GL_ALPHA_SCALE = GL40.GL_ALPHA_SCALE;
		GL_W.GL_ALPHA_BIAS = GL40.GL_ALPHA_BIAS;
		GL_W.GL_DEPTH_SCALE = GL40.GL_DEPTH_SCALE;
		GL_W.GL_DEPTH_BIAS = GL40.GL_DEPTH_BIAS;
		GL_W.GL_MAX_EVAL_ORDER = GL40.GL_MAX_EVAL_ORDER;
		GL_W.GL_MAX_LIGHTS = GL40.GL_MAX_LIGHTS;
		GL_W.GL_MAX_CLIP_PLANES = GL40.GL_MAX_CLIP_PLANES;
		GL_W.GL_MAX_TEXTURE_SIZE = GL40.GL_MAX_TEXTURE_SIZE;
		GL_W.GL_MAX_PIXEL_MAP_TABLE = GL40.GL_MAX_PIXEL_MAP_TABLE;
		GL_W.GL_MAX_ATTRIB_STACK_DEPTH = GL40.GL_MAX_ATTRIB_STACK_DEPTH;
		GL_W.GL_MAX_MODELVIEW_STACK_DEPTH = GL40.GL_MAX_MODELVIEW_STACK_DEPTH;
		GL_W.GL_MAX_NAME_STACK_DEPTH = GL40.GL_MAX_NAME_STACK_DEPTH;
		GL_W.GL_MAX_PROJECTION_STACK_DEPTH = GL40.GL_MAX_PROJECTION_STACK_DEPTH;
		GL_W.GL_MAX_TEXTURE_STACK_DEPTH = GL40.GL_MAX_TEXTURE_STACK_DEPTH;
		GL_W.GL_MAX_VIEWPORT_DIMS = GL40.GL_MAX_VIEWPORT_DIMS;
		GL_W.GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = GL40.GL_MAX_CLIENT_ATTRIB_STACK_DEPTH;
		GL_W.GL_SUBPIXEL_BITS = GL40.GL_SUBPIXEL_BITS;
		GL_W.GL_INDEX_BITS = GL40.GL_INDEX_BITS;
		GL_W.GL_RED_BITS = GL40.GL_RED_BITS;
		GL_W.GL_GREEN_BITS = GL40.GL_GREEN_BITS;
		GL_W.GL_BLUE_BITS = GL40.GL_BLUE_BITS;
		GL_W.GL_ALPHA_BITS = GL40.GL_ALPHA_BITS;
		GL_W.GL_DEPTH_BITS = GL40.GL_DEPTH_BITS;
		GL_W.GL_STENCIL_BITS = GL40.GL_STENCIL_BITS;
		GL_W.GL_ACCUM_RED_BITS = GL40.GL_ACCUM_RED_BITS;
		GL_W.GL_ACCUM_GREEN_BITS = GL40.GL_ACCUM_GREEN_BITS;
		GL_W.GL_ACCUM_BLUE_BITS = GL40.GL_ACCUM_BLUE_BITS;
		GL_W.GL_ACCUM_ALPHA_BITS = GL40.GL_ACCUM_ALPHA_BITS;
		GL_W.GL_NAME_STACK_DEPTH = GL40.GL_NAME_STACK_DEPTH;
		GL_W.GL_AUTO_NORMAL = GL40.GL_AUTO_NORMAL;
		GL_W.GL_MAP1_COLOR_4 = GL40.GL_MAP1_COLOR_4;
		GL_W.GL_MAP1_INDEX = GL40.GL_MAP1_INDEX;
		GL_W.GL_MAP1_NORMAL = GL40.GL_MAP1_NORMAL;
		GL_W.GL_MAP1_TEXTURE_COORD_1 = GL40.GL_MAP1_TEXTURE_COORD_1;
		GL_W.GL_MAP1_TEXTURE_COORD_2 = GL40.GL_MAP1_TEXTURE_COORD_2;
		GL_W.GL_MAP1_TEXTURE_COORD_3 = GL40.GL_MAP1_TEXTURE_COORD_3;
		GL_W.GL_MAP1_TEXTURE_COORD_4 = GL40.GL_MAP1_TEXTURE_COORD_4;
		GL_W.GL_MAP1_VERTEX_3 = GL40.GL_MAP1_VERTEX_3;
		GL_W.GL_MAP1_VERTEX_4 = GL40.GL_MAP1_VERTEX_4;
		GL_W.GL_MAP2_COLOR_4 = GL40.GL_MAP2_COLOR_4;
		GL_W.GL_MAP2_INDEX = GL40.GL_MAP2_INDEX;
		GL_W.GL_MAP2_NORMAL = GL40.GL_MAP2_NORMAL;
		GL_W.GL_MAP2_TEXTURE_COORD_1 = GL40.GL_MAP2_TEXTURE_COORD_1;
		GL_W.GL_MAP2_TEXTURE_COORD_2 = GL40.GL_MAP2_TEXTURE_COORD_2;
		GL_W.GL_MAP2_TEXTURE_COORD_3 = GL40.GL_MAP2_TEXTURE_COORD_3;
		GL_W.GL_MAP2_TEXTURE_COORD_4 = GL40.GL_MAP2_TEXTURE_COORD_4;
		GL_W.GL_MAP2_VERTEX_3 = GL40.GL_MAP2_VERTEX_3;
		GL_W.GL_MAP2_VERTEX_4 = GL40.GL_MAP2_VERTEX_4;
		GL_W.GL_MAP1_GRID_DOMAIN = GL40.GL_MAP1_GRID_DOMAIN;
		GL_W.GL_MAP1_GRID_SEGMENTS = GL40.GL_MAP1_GRID_SEGMENTS;
		GL_W.GL_MAP2_GRID_DOMAIN = GL40.GL_MAP2_GRID_DOMAIN;
		GL_W.GL_MAP2_GRID_SEGMENTS = GL40.GL_MAP2_GRID_SEGMENTS;
		GL_W.GL_TEXTURE_1D = GL40.GL_TEXTURE_1D;
		GL_W.GL_TEXTURE_2D = GL40.GL_TEXTURE_2D;
		GL_W.GL_FEEDBACK_BUFFER_POINTER = GL40.GL_FEEDBACK_BUFFER_POINTER;
		GL_W.GL_FEEDBACK_BUFFER_SIZE = GL40.GL_FEEDBACK_BUFFER_SIZE;
		GL_W.GL_FEEDBACK_BUFFER_TYPE = GL40.GL_FEEDBACK_BUFFER_TYPE;
		GL_W.GL_SELECTION_BUFFER_POINTER = GL40.GL_SELECTION_BUFFER_POINTER;
		GL_W.GL_SELECTION_BUFFER_SIZE = GL40.GL_SELECTION_BUFFER_SIZE;
		GL_W.GL_TEXTURE_WIDTH = GL40.GL_TEXTURE_WIDTH;
		GL_W.GL_TEXTURE_HEIGHT = GL40.GL_TEXTURE_HEIGHT;
		GL_W.GL_TEXTURE_INTERNAL_FORMAT = GL40.GL_TEXTURE_INTERNAL_FORMAT;
		GL_W.GL_TEXTURE_COMPONENTS = GL40.GL_TEXTURE_COMPONENTS;
		GL_W.GL_TEXTURE_BORDER_COLOR = GL40.GL_TEXTURE_BORDER_COLOR;
		GL_W.GL_TEXTURE_BORDER = GL40.GL_TEXTURE_BORDER;
		GL_W.GL_DONT_CARE = GL40.GL_DONT_CARE;
		GL_W.GL_FASTEST = GL40.GL_FASTEST;
		GL_W.GL_NICEST = GL40.GL_NICEST;
		GL_W.GL_LIGHT0 = GL40.GL_LIGHT0;
		GL_W.GL_LIGHT1 = GL40.GL_LIGHT1;
		GL_W.GL_LIGHT2 = GL40.GL_LIGHT2;
		GL_W.GL_LIGHT3 = GL40.GL_LIGHT3;
		GL_W.GL_LIGHT4 = GL40.GL_LIGHT4;
		GL_W.GL_LIGHT5 = GL40.GL_LIGHT5;
		GL_W.GL_LIGHT6 = GL40.GL_LIGHT6;
		GL_W.GL_LIGHT7 = GL40.GL_LIGHT7;
		GL_W.GL_AMBIENT = GL40.GL_AMBIENT;
		GL_W.GL_DIFFUSE = GL40.GL_DIFFUSE;
		GL_W.GL_SPECULAR = GL40.GL_SPECULAR;
		GL_W.GL_POSITION = GL40.GL_POSITION;
		GL_W.GL_SPOT_DIRECTION = GL40.GL_SPOT_DIRECTION;
		GL_W.GL_SPOT_EXPONENT = GL40.GL_SPOT_EXPONENT;
		GL_W.GL_SPOT_CUTOFF = GL40.GL_SPOT_CUTOFF;
		GL_W.GL_CONSTANT_ATTENUATION = GL40.GL_CONSTANT_ATTENUATION;
		GL_W.GL_LINEAR_ATTENUATION = GL40.GL_LINEAR_ATTENUATION;
		GL_W.GL_QUADRATIC_ATTENUATION = GL40.GL_QUADRATIC_ATTENUATION;
		GL_W.GL_COMPILE = GL40.GL_COMPILE;
		GL_W.GL_COMPILE_AND_EXECUTE = GL40.GL_COMPILE_AND_EXECUTE;
		GL_W.GL_CLEAR = GL40.GL_CLEAR;
		GL_W.GL_AND = GL40.GL_AND;
		GL_W.GL_AND_REVERSE = GL40.GL_AND_REVERSE;
		GL_W.GL_COPY = GL40.GL_COPY;
		GL_W.GL_AND_INVERTED = GL40.GL_AND_INVERTED;
		GL_W.GL_NOOP = GL40.GL_NOOP;
		GL_W.GL_XOR = GL40.GL_XOR;
		GL_W.GL_OR = GL40.GL_OR;
		GL_W.GL_NOR = GL40.GL_NOR;
		GL_W.GL_EQUIV = GL40.GL_EQUIV;
		GL_W.GL_INVERT = GL40.GL_INVERT;
		GL_W.GL_OR_REVERSE = GL40.GL_OR_REVERSE;
		GL_W.GL_COPY_INVERTED = GL40.GL_COPY_INVERTED;
		GL_W.GL_OR_INVERTED = GL40.GL_OR_INVERTED;
		GL_W.GL_NAND = GL40.GL_NAND;
		GL_W.GL_SET = GL40.GL_SET;
		GL_W.GL_EMISSION = GL40.GL_EMISSION;
		GL_W.GL_SHININESS = GL40.GL_SHININESS;
		GL_W.GL_AMBIENT_AND_DIFFUSE = GL40.GL_AMBIENT_AND_DIFFUSE;
		GL_W.GL_COLOR_INDEXES = GL40.GL_COLOR_INDEXES;
		GL_W.GL_MODELVIEW = GL40.GL_MODELVIEW;
		GL_W.GL_PROJECTION = GL40.GL_PROJECTION;
		GL_W.GL_TEXTURE = GL40.GL_TEXTURE;
		GL_W.GL_COLOR = GL40.GL_COLOR;
		GL_W.GL_DEPTH = GL40.GL_DEPTH;
		GL_W.GL_STENCIL = GL40.GL_STENCIL;
		GL_W.GL_COLOR_INDEX = GL40.GL_COLOR_INDEX;
		GL_W.GL_STENCIL_INDEX = GL40.GL_STENCIL_INDEX;
		GL_W.GL_DEPTH_COMPONENT = GL40.GL_DEPTH_COMPONENT;
		GL_W.GL_RED = GL40.GL_RED;
		GL_W.GL_GREEN = GL40.GL_GREEN;
		GL_W.GL_BLUE = GL40.GL_BLUE;
		GL_W.GL_ALPHA = GL40.GL_ALPHA;
		GL_W.GL_RGB = GL40.GL_RGB;
		GL_W.GL_RGBA = GL40.GL_RGBA;
		GL_W.GL_LUMINANCE = GL40.GL_LUMINANCE;
		GL_W.GL_LUMINANCE_ALPHA = GL40.GL_LUMINANCE_ALPHA;
		GL_W.GL_BITMAP = GL40.GL_BITMAP;
		GL_W.GL_POINT = GL40.GL_POINT;
		GL_W.GL_LINE = GL40.GL_LINE;
		GL_W.GL_FILL = GL40.GL_FILL;
		GL_W.GL_RENDER = GL40.GL_RENDER;
		GL_W.GL_FEEDBACK = GL40.GL_FEEDBACK;
		GL_W.GL_SELECT = GL40.GL_SELECT;
		GL_W.GL_FLAT = GL40.GL_FLAT;
		GL_W.GL_SMOOTH = GL40.GL_SMOOTH;
		GL_W.GL_KEEP = GL40.GL_KEEP;
		GL_W.GL_REPLACE = GL40.GL_REPLACE;
		GL_W.GL_INCR = GL40.GL_INCR;
		GL_W.GL_DECR = GL40.GL_DECR;
		GL_W.GL_VENDOR = GL40.GL_VENDOR;
		GL_W.GL_RENDERER = GL40.GL_RENDERER;
		GL_W.GL_VERSION = GL40.GL_VERSION;
		GL_W.GL_EXTENSIONS = GL40.GL_EXTENSIONS;
		GL_W.GL_S = GL40.GL_S;
		GL_W.GL_T = GL40.GL_T;
		GL_W.GL_R = GL40.GL_R;
		GL_W.GL_Q = GL40.GL_Q;
		GL_W.GL_MODULATE = GL40.GL_MODULATE;
		GL_W.GL_DECAL = GL40.GL_DECAL;
		GL_W.GL_TEXTURE_ENV_MODE = GL40.GL_TEXTURE_ENV_MODE;
		GL_W.GL_TEXTURE_ENV_COLOR = GL40.GL_TEXTURE_ENV_COLOR;
		GL_W.GL_TEXTURE_ENV = GL40.GL_TEXTURE_ENV;
		GL_W.GL_EYE_LINEAR = GL40.GL_EYE_LINEAR;
		GL_W.GL_OBJECT_LINEAR = GL40.GL_OBJECT_LINEAR;
		GL_W.GL_SPHERE_MAP = GL40.GL_SPHERE_MAP;
		GL_W.GL_TEXTURE_GEN_MODE = GL40.GL_TEXTURE_GEN_MODE;
		GL_W.GL_OBJECT_PLANE = GL40.GL_OBJECT_PLANE;
		GL_W.GL_EYE_PLANE = GL40.GL_EYE_PLANE;
		GL_W.GL_NEAREST = GL40.GL_NEAREST;
		GL_W.GL_LINEAR = GL40.GL_LINEAR;
		GL_W.GL_NEAREST_MIPMAP_NEAREST = GL40.GL_NEAREST_MIPMAP_NEAREST;
		GL_W.GL_LINEAR_MIPMAP_NEAREST = GL40.GL_LINEAR_MIPMAP_NEAREST;
		GL_W.GL_NEAREST_MIPMAP_LINEAR = GL40.GL_NEAREST_MIPMAP_LINEAR;
		GL_W.GL_LINEAR_MIPMAP_LINEAR = GL40.GL_LINEAR_MIPMAP_LINEAR;
		GL_W.GL_TEXTURE_MAG_FILTER = GL40.GL_TEXTURE_MAG_FILTER;
		GL_W.GL_TEXTURE_MIN_FILTER = GL40.GL_TEXTURE_MIN_FILTER;
		GL_W.GL_TEXTURE_WRAP_S = GL40.GL_TEXTURE_WRAP_S;
		GL_W.GL_TEXTURE_WRAP_T = GL40.GL_TEXTURE_WRAP_T;
		GL_W.GL_CLAMP = GL40.GL_CLAMP;
		GL_W.GL_REPEAT = GL40.GL_REPEAT;
		GL_W.GL_CLIENT_PIXEL_STORE_BIT = GL40.GL_CLIENT_PIXEL_STORE_BIT;
		GL_W.GL_CLIENT_VERTEX_ARRAY_BIT = GL40.GL_CLIENT_VERTEX_ARRAY_BIT;
		GL_W.GL_CLIENT_ALL_ATTRIB_BITS = GL40.GL_CLIENT_ALL_ATTRIB_BITS;
		GL_W.GL_POLYGON_OFFSET_FACTOR = GL40.GL_POLYGON_OFFSET_FACTOR;
		GL_W.GL_POLYGON_OFFSET_UNITS = GL40.GL_POLYGON_OFFSET_UNITS;
		GL_W.GL_POLYGON_OFFSET_POINT = GL40.GL_POLYGON_OFFSET_POINT;
		GL_W.GL_POLYGON_OFFSET_LINE = GL40.GL_POLYGON_OFFSET_LINE;
		GL_W.GL_POLYGON_OFFSET_FILL = GL40.GL_POLYGON_OFFSET_FILL;
		GL_W.GL_ALPHA4 = GL40.GL_ALPHA4;
		GL_W.GL_ALPHA8 = GL40.GL_ALPHA8;
		GL_W.GL_ALPHA12 = GL40.GL_ALPHA12;
		GL_W.GL_ALPHA16 = GL40.GL_ALPHA16;
		GL_W.GL_LUMINANCE4 = GL40.GL_LUMINANCE4;
		GL_W.GL_LUMINANCE8 = GL40.GL_LUMINANCE8;
		GL_W.GL_LUMINANCE12 = GL40.GL_LUMINANCE12;
		GL_W.GL_LUMINANCE16 = GL40.GL_LUMINANCE16;
		GL_W.GL_LUMINANCE4_ALPHA4 = GL40.GL_LUMINANCE4_ALPHA4;
		GL_W.GL_LUMINANCE6_ALPHA2 = GL40.GL_LUMINANCE6_ALPHA2;
		GL_W.GL_LUMINANCE8_ALPHA8 = GL40.GL_LUMINANCE8_ALPHA8;
		GL_W.GL_LUMINANCE12_ALPHA4 = GL40.GL_LUMINANCE12_ALPHA4;
		GL_W.GL_LUMINANCE12_ALPHA12 = GL40.GL_LUMINANCE12_ALPHA12;
		GL_W.GL_LUMINANCE16_ALPHA16 = GL40.GL_LUMINANCE16_ALPHA16;
		GL_W.GL_INTENSITY = GL40.GL_INTENSITY;
		GL_W.GL_INTENSITY4 = GL40.GL_INTENSITY4;
		GL_W.GL_INTENSITY8 = GL40.GL_INTENSITY8;
		GL_W.GL_INTENSITY12 = GL40.GL_INTENSITY12;
		GL_W.GL_INTENSITY16 = GL40.GL_INTENSITY16;
		GL_W.GL_R3_G3_B2 = GL40.GL_R3_G3_B2;
		GL_W.GL_RGB4 = GL40.GL_RGB4;
		GL_W.GL_RGB5 = GL40.GL_RGB5;
		GL_W.GL_RGB8 = GL40.GL_RGB8;
		GL_W.GL_RGB10 = GL40.GL_RGB10;
		GL_W.GL_RGB12 = GL40.GL_RGB12;
		GL_W.GL_RGB16 = GL40.GL_RGB16;
		GL_W.GL_RGBA2 = GL40.GL_RGBA2;
		GL_W.GL_RGBA4 = GL40.GL_RGBA4;
		GL_W.GL_RGB5_A1 = GL40.GL_RGB5_A1;
		GL_W.GL_RGBA8 = GL40.GL_RGBA8;
		GL_W.GL_RGB10_A2 = GL40.GL_RGB10_A2;
		GL_W.GL_RGBA12 = GL40.GL_RGBA12;
		GL_W.GL_RGBA16 = GL40.GL_RGBA16;
		GL_W.GL_TEXTURE_RED_SIZE = GL40.GL_TEXTURE_RED_SIZE;
		GL_W.GL_TEXTURE_GREEN_SIZE = GL40.GL_TEXTURE_GREEN_SIZE;
		GL_W.GL_TEXTURE_BLUE_SIZE = GL40.GL_TEXTURE_BLUE_SIZE;
		GL_W.GL_TEXTURE_ALPHA_SIZE = GL40.GL_TEXTURE_ALPHA_SIZE;
		GL_W.GL_TEXTURE_LUMINANCE_SIZE = GL40.GL_TEXTURE_LUMINANCE_SIZE;
		GL_W.GL_TEXTURE_INTENSITY_SIZE = GL40.GL_TEXTURE_INTENSITY_SIZE;
		GL_W.GL_PROXY_TEXTURE_1D = GL40.GL_PROXY_TEXTURE_1D;
		GL_W.GL_PROXY_TEXTURE_2D = GL40.GL_PROXY_TEXTURE_2D;
		GL_W.GL_TEXTURE_PRIORITY = GL40.GL_TEXTURE_PRIORITY;
		GL_W.GL_TEXTURE_RESIDENT = GL40.GL_TEXTURE_RESIDENT;
		GL_W.GL_TEXTURE_BINDING_1D = GL40.GL_TEXTURE_BINDING_1D;
		GL_W.GL_TEXTURE_BINDING_2D = GL40.GL_TEXTURE_BINDING_2D;
		GL_W.GL_VERTEX_ARRAY = GL40.GL_VERTEX_ARRAY;
		GL_W.GL_NORMAL_ARRAY = GL40.GL_NORMAL_ARRAY;
		GL_W.GL_COLOR_ARRAY = GL40.GL_COLOR_ARRAY;
		GL_W.GL_INDEX_ARRAY = GL40.GL_INDEX_ARRAY;
		GL_W.GL_TEXTURE_COORD_ARRAY = GL40.GL_TEXTURE_COORD_ARRAY;
		GL_W.GL_EDGE_FLAG_ARRAY = GL40.GL_EDGE_FLAG_ARRAY;
		GL_W.GL_VERTEX_ARRAY_SIZE = GL40.GL_VERTEX_ARRAY_SIZE;
		GL_W.GL_VERTEX_ARRAY_TYPE = GL40.GL_VERTEX_ARRAY_TYPE;
		GL_W.GL_VERTEX_ARRAY_STRIDE = GL40.GL_VERTEX_ARRAY_STRIDE;
		GL_W.GL_NORMAL_ARRAY_TYPE = GL40.GL_NORMAL_ARRAY_TYPE;
		GL_W.GL_NORMAL_ARRAY_STRIDE = GL40.GL_NORMAL_ARRAY_STRIDE;
		GL_W.GL_COLOR_ARRAY_SIZE = GL40.GL_COLOR_ARRAY_SIZE;
		GL_W.GL_COLOR_ARRAY_TYPE = GL40.GL_COLOR_ARRAY_TYPE;
		GL_W.GL_COLOR_ARRAY_STRIDE = GL40.GL_COLOR_ARRAY_STRIDE;
		GL_W.GL_INDEX_ARRAY_TYPE = GL40.GL_INDEX_ARRAY_TYPE;
		GL_W.GL_INDEX_ARRAY_STRIDE = GL40.GL_INDEX_ARRAY_STRIDE;
		GL_W.GL_TEXTURE_COORD_ARRAY_SIZE = GL40.GL_TEXTURE_COORD_ARRAY_SIZE;
		GL_W.GL_TEXTURE_COORD_ARRAY_TYPE = GL40.GL_TEXTURE_COORD_ARRAY_TYPE;
		GL_W.GL_TEXTURE_COORD_ARRAY_STRIDE = GL40.GL_TEXTURE_COORD_ARRAY_STRIDE;
		GL_W.GL_EDGE_FLAG_ARRAY_STRIDE = GL40.GL_EDGE_FLAG_ARRAY_STRIDE;
		GL_W.GL_VERTEX_ARRAY_POINTER = GL40.GL_VERTEX_ARRAY_POINTER;
		GL_W.GL_NORMAL_ARRAY_POINTER = GL40.GL_NORMAL_ARRAY_POINTER;
		GL_W.GL_COLOR_ARRAY_POINTER = GL40.GL_COLOR_ARRAY_POINTER;
		GL_W.GL_INDEX_ARRAY_POINTER = GL40.GL_INDEX_ARRAY_POINTER;
		GL_W.GL_TEXTURE_COORD_ARRAY_POINTER = GL40.GL_TEXTURE_COORD_ARRAY_POINTER;
		GL_W.GL_EDGE_FLAG_ARRAY_POINTER = GL40.GL_EDGE_FLAG_ARRAY_POINTER;
		GL_W.GL_V2F = GL40.GL_V2F;
		GL_W.GL_V3F = GL40.GL_V3F;
		GL_W.GL_C4UB_V2F = GL40.GL_C4UB_V2F;
		GL_W.GL_C4UB_V3F = GL40.GL_C4UB_V3F;
		GL_W.GL_C3F_V3F = GL40.GL_C3F_V3F;
		GL_W.GL_N3F_V3F = GL40.GL_N3F_V3F;
		GL_W.GL_C4F_N3F_V3F = GL40.GL_C4F_N3F_V3F;
		GL_W.GL_T2F_V3F = GL40.GL_T2F_V3F;
		GL_W.GL_T4F_V4F = GL40.GL_T4F_V4F;
		GL_W.GL_T2F_C4UB_V3F = GL40.GL_T2F_C4UB_V3F;
		GL_W.GL_T2F_C3F_V3F = GL40.GL_T2F_C3F_V3F;
		GL_W.GL_T2F_N3F_V3F = GL40.GL_T2F_N3F_V3F;
		GL_W.GL_T2F_C4F_N3F_V3F = GL40.GL_T2F_C4F_N3F_V3F;
		GL_W.GL_T4F_C4F_N3F_V4F = GL40.GL_T4F_C4F_N3F_V4F;
	}

	@Override
	public void glBindTransformFeedback(int arg0, int arg1) {
		GL40.glBindTransformFeedback(arg0, arg1);
	}

	@Override
	public void nglDeleteTransformFeedbacks(int arg0, long arg1) {
		GL40.nglDeleteTransformFeedbacks(arg0, arg1);
	}

	@Override
	public void glDeleteTransformFeedbacks(java.nio.IntBuffer arg0) {
		GL40.glDeleteTransformFeedbacks(arg0);
	}

	@Override
	public void glDeleteTransformFeedbacks(int arg0) {
		GL40.glDeleteTransformFeedbacks(arg0);
	}

	@Override
	public void glDeleteTransformFeedbacks(int[] arg0) {
		GL40.glDeleteTransformFeedbacks(arg0);
	}

	@Override
	public void nglGenTransformFeedbacks(int arg0, long arg1) {
		GL40.nglGenTransformFeedbacks(arg0, arg1);
	}

	@Override
	public void glGenTransformFeedbacks(int[] arg0) {
		GL40.glGenTransformFeedbacks(arg0);
	}

	@Override
	public void glGenTransformFeedbacks(java.nio.IntBuffer arg0) {
		GL40.glGenTransformFeedbacks(arg0);
	}

	@Override
	public int glGenTransformFeedbacks() {
		return GL40.glGenTransformFeedbacks();
	}

	@Override
	public boolean glIsTransformFeedback(int arg0) {
		return GL40.glIsTransformFeedback(arg0);
	}

	@Override
	public void glPauseTransformFeedback() {
		GL40.glPauseTransformFeedback();
	}

	@Override
	public void glResumeTransformFeedback() {
		GL40.glResumeTransformFeedback();
	}

	@Override
	public void glBlendEquationi(int arg0, int arg1) {
		GL40.glBlendEquationi(arg0, arg1);
	}

	@Override
	public void glBlendEquationSeparatei(int arg0, int arg1, int arg2) {
		GL40.glBlendEquationSeparatei(arg0, arg1, arg2);
	}

	@Override
	public void glBlendFunci(int arg0, int arg1, int arg2) {
		GL40.glBlendFunci(arg0, arg1, arg2);
	}

	@Override
	public void glBlendFuncSeparatei(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glBlendFuncSeparatei(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglDrawArraysIndirect(int arg0, long arg1) {
		GL40.nglDrawArraysIndirect(arg0, arg1);
	}

	@Override
	public void glDrawArraysIndirect(int arg0, long arg1) {
		GL40.glDrawArraysIndirect(arg0, arg1);
	}

	@Override
	public void glDrawArraysIndirect(int arg0, java.nio.IntBuffer arg1) {
		GL40.glDrawArraysIndirect(arg0, arg1);
	}

	@Override
	public void glDrawArraysIndirect(int arg0, int[] arg1) {
		GL40.glDrawArraysIndirect(arg0, arg1);
	}

	@Override
	public void glDrawArraysIndirect(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glDrawArraysIndirect(arg0, arg1);
	}

	@Override
	public void nglDrawElementsIndirect(int arg0, int arg1, long arg2) {
		GL40.nglDrawElementsIndirect(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsIndirect(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GL40.glDrawElementsIndirect(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsIndirect(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glDrawElementsIndirect(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsIndirect(int arg0, int arg1, int[] arg2) {
		GL40.glDrawElementsIndirect(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsIndirect(int arg0, int arg1, long arg2) {
		GL40.glDrawElementsIndirect(arg0, arg1, arg2);
	}

	@Override
	public void glUniform1d(int arg0, double arg1) {
		GL40.glUniform1d(arg0, arg1);
	}

	@Override
	public void glUniform2d(int arg0, double arg1, double arg2) {
		GL40.glUniform2d(arg0, arg1, arg2);
	}

	@Override
	public void glUniform3d(int arg0, double arg1, double arg2, double arg3) {
		GL40.glUniform3d(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniform4d(int arg0, double arg1, double arg2, double arg3, double arg4) {
		GL40.glUniform4d(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglUniform1dv(int arg0, int arg1, long arg2) {
		GL40.nglUniform1dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform1dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glUniform1dv(arg0, arg1);
	}

	@Override
	public void glUniform1dv(int arg0, double[] arg1) {
		GL40.glUniform1dv(arg0, arg1);
	}

	@Override
	public void nglUniform2dv(int arg0, int arg1, long arg2) {
		GL40.nglUniform2dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform2dv(int arg0, double[] arg1) {
		GL40.glUniform2dv(arg0, arg1);
	}

	@Override
	public void glUniform2dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glUniform2dv(arg0, arg1);
	}

	@Override
	public void nglUniform3dv(int arg0, int arg1, long arg2) {
		GL40.nglUniform3dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform3dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glUniform3dv(arg0, arg1);
	}

	@Override
	public void glUniform3dv(int arg0, double[] arg1) {
		GL40.glUniform3dv(arg0, arg1);
	}

	@Override
	public void nglUniform4dv(int arg0, int arg1, long arg2) {
		GL40.nglUniform4dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform4dv(int arg0, double[] arg1) {
		GL40.glUniform4dv(arg0, arg1);
	}

	@Override
	public void glUniform4dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glUniform4dv(arg0, arg1);
	}

	@Override
	public void nglUniformMatrix2dv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix2dv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix2dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		GL40.glUniformMatrix2dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix2dv(int arg0, boolean arg1, double[] arg2) {
		GL40.glUniformMatrix2dv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix3dv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix3dv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix3dv(int arg0, boolean arg1, double[] arg2) {
		GL40.glUniformMatrix3dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix3dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		GL40.glUniformMatrix3dv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix4dv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix4dv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix4dv(int arg0, boolean arg1, double[] arg2) {
		GL40.glUniformMatrix4dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix4dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		GL40.glUniformMatrix4dv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix2x3dv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix2x3dv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix2x3dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		GL40.glUniformMatrix2x3dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix2x3dv(int arg0, boolean arg1, double[] arg2) {
		GL40.glUniformMatrix2x3dv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix2x4dv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix2x4dv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix2x4dv(int arg0, boolean arg1, double[] arg2) {
		GL40.glUniformMatrix2x4dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix2x4dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		GL40.glUniformMatrix2x4dv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix3x2dv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix3x2dv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix3x2dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		GL40.glUniformMatrix3x2dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix3x2dv(int arg0, boolean arg1, double[] arg2) {
		GL40.glUniformMatrix3x2dv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix3x4dv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix3x4dv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix3x4dv(int arg0, boolean arg1, double[] arg2) {
		GL40.glUniformMatrix3x4dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix3x4dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		GL40.glUniformMatrix3x4dv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix4x2dv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix4x2dv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix4x2dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		GL40.glUniformMatrix4x2dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix4x2dv(int arg0, boolean arg1, double[] arg2) {
		GL40.glUniformMatrix4x2dv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix4x3dv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix4x3dv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix4x3dv(int arg0, boolean arg1, java.nio.DoubleBuffer arg2) {
		GL40.glUniformMatrix4x3dv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix4x3dv(int arg0, boolean arg1, double[] arg2) {
		GL40.glUniformMatrix4x3dv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetUniformdv(int arg0, int arg1, long arg2) {
		GL40.nglGetUniformdv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformdv(int arg0, int arg1, double[] arg2) {
		GL40.glGetUniformdv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformdv(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		GL40.glGetUniformdv(arg0, arg1, arg2);
	}

	@Override
	public double glGetUniformd(int arg0, int arg1) {
		return GL40.glGetUniformd(arg0, arg1);
	}

	@Override
	public void glMinSampleShading(float arg0) {
		GL40.glMinSampleShading(arg0);
	}

	@Override
	public int nglGetSubroutineUniformLocation(int arg0, int arg1, long arg2) {
		return GL40.nglGetSubroutineUniformLocation(arg0, arg1, arg2);
	}

	@Override
	public int glGetSubroutineUniformLocation(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		return GL40.glGetSubroutineUniformLocation(arg0, arg1, arg2);
	}

	@Override
	public int glGetSubroutineUniformLocation(int arg0, int arg1, java.lang.CharSequence arg2) {
		return GL40.glGetSubroutineUniformLocation(arg0, arg1, arg2);
	}

	@Override
	public int nglGetSubroutineIndex(int arg0, int arg1, long arg2) {
		return GL40.nglGetSubroutineIndex(arg0, arg1, arg2);
	}

	@Override
	public int glGetSubroutineIndex(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		return GL40.glGetSubroutineIndex(arg0, arg1, arg2);
	}

	@Override
	public int glGetSubroutineIndex(int arg0, int arg1, java.lang.CharSequence arg2) {
		return GL40.glGetSubroutineIndex(arg0, arg1, arg2);
	}

	@Override
	public void nglGetActiveSubroutineUniformiv(int arg0, int arg1, int arg2, int arg3, long arg4) {
		GL40.nglGetActiveSubroutineUniformiv(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetActiveSubroutineUniformiv(int arg0, int arg1, int arg2, int arg3, java.nio.IntBuffer arg4) {
		GL40.glGetActiveSubroutineUniformiv(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetActiveSubroutineUniformiv(int arg0, int arg1, int arg2, int arg3, int[] arg4) {
		GL40.glGetActiveSubroutineUniformiv(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public int glGetActiveSubroutineUniformi(int arg0, int arg1, int arg2, int arg3) {
		return GL40.glGetActiveSubroutineUniformi(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglGetActiveSubroutineUniformName(int arg0, int arg1, int arg2, int arg3, long arg4, long arg5) {
		GL40.nglGetActiveSubroutineUniformName(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glGetActiveSubroutineUniformName(int arg0, int arg1, int arg2, int[] arg3, java.nio.ByteBuffer arg4) {
		GL40.glGetActiveSubroutineUniformName(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public java.lang.String glGetActiveSubroutineUniformName(int arg0, int arg1, int arg2, int arg3) {
		return GL40.glGetActiveSubroutineUniformName(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveSubroutineUniformName(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.ByteBuffer arg4) {
		GL40.glGetActiveSubroutineUniformName(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public java.lang.String glGetActiveSubroutineUniformName(int arg0, int arg1, int arg2) {
		return GL40.glGetActiveSubroutineUniformName(arg0, arg1, arg2);
	}

	@Override
	public void nglGetActiveSubroutineName(int arg0, int arg1, int arg2, int arg3, long arg4, long arg5) {
		GL40.nglGetActiveSubroutineName(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glGetActiveSubroutineName(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.ByteBuffer arg4) {
		GL40.glGetActiveSubroutineName(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public java.lang.String glGetActiveSubroutineName(int arg0, int arg1, int arg2, int arg3) {
		return GL40.glGetActiveSubroutineName(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetActiveSubroutineName(int arg0, int arg1, int arg2) {
		return GL40.glGetActiveSubroutineName(arg0, arg1, arg2);
	}

	@Override
	public void glGetActiveSubroutineName(int arg0, int arg1, int arg2, int[] arg3, java.nio.ByteBuffer arg4) {
		GL40.glGetActiveSubroutineName(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglUniformSubroutinesuiv(int arg0, int arg1, long arg2) {
		GL40.nglUniformSubroutinesuiv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformSubroutinesuiv(int arg0, int[] arg1) {
		GL40.glUniformSubroutinesuiv(arg0, arg1);
	}

	@Override
	public void glUniformSubroutinesuiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glUniformSubroutinesuiv(arg0, arg1);
	}

	@Override
	public void glUniformSubroutinesui(int arg0, int arg1) {
		GL40.glUniformSubroutinesui(arg0, arg1);
	}

	@Override
	public void nglGetUniformSubroutineuiv(int arg0, int arg1, long arg2) {
		GL40.nglGetUniformSubroutineuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformSubroutineuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetUniformSubroutineuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformSubroutineuiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetUniformSubroutineuiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetUniformSubroutineui(int arg0, int arg1) {
		return GL40.glGetUniformSubroutineui(arg0, arg1);
	}

	@Override
	public void nglGetProgramStageiv(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglGetProgramStageiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetProgramStageiv(int arg0, int arg1, int arg2, int[] arg3) {
		GL40.glGetProgramStageiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetProgramStageiv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glGetProgramStageiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int glGetProgramStagei(int arg0, int arg1, int arg2) {
		return GL40.glGetProgramStagei(arg0, arg1, arg2);
	}

	@Override
	public void glPatchParameteri(int arg0, int arg1) {
		GL40.glPatchParameteri(arg0, arg1);
	}

	@Override
	public void nglPatchParameterfv(int arg0, long arg1) {
		GL40.nglPatchParameterfv(arg0, arg1);
	}

	@Override
	public void glPatchParameterfv(int arg0, float[] arg1) {
		GL40.glPatchParameterfv(arg0, arg1);
	}

	@Override
	public void glPatchParameterfv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glPatchParameterfv(arg0, arg1);
	}

	@Override
	public void glDrawTransformFeedback(int arg0, int arg1) {
		GL40.glDrawTransformFeedback(arg0, arg1);
	}

	@Override
	public void glDrawTransformFeedbackStream(int arg0, int arg1, int arg2) {
		GL40.glDrawTransformFeedbackStream(arg0, arg1, arg2);
	}

	@Override
	public void glBeginQueryIndexed(int arg0, int arg1, int arg2) {
		GL40.glBeginQueryIndexed(arg0, arg1, arg2);
	}

	@Override
	public void glEndQueryIndexed(int arg0, int arg1) {
		GL40.glEndQueryIndexed(arg0, arg1);
	}

	@Override
	public void nglGetQueryIndexediv(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglGetQueryIndexediv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetQueryIndexediv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glGetQueryIndexediv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetQueryIndexediv(int arg0, int arg1, int arg2, int[] arg3) {
		GL40.glGetQueryIndexediv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int glGetQueryIndexedi(int arg0, int arg1, int arg2) {
		return GL40.glGetQueryIndexedi(arg0, arg1, arg2);
	}

	@Override
	public void nglGenSamplers(int arg0, long arg1) {
		GL40.nglGenSamplers(arg0, arg1);
	}

	@Override
	public void glGenSamplers(int[] arg0) {
		GL40.glGenSamplers(arg0);
	}

	@Override
	public int glGenSamplers() {
		return GL40.glGenSamplers();
	}

	@Override
	public void glGenSamplers(java.nio.IntBuffer arg0) {
		GL40.glGenSamplers(arg0);
	}

	@Override
	public void nglDeleteSamplers(int arg0, long arg1) {
		GL40.nglDeleteSamplers(arg0, arg1);
	}

	@Override
	public void glDeleteSamplers(int arg0) {
		GL40.glDeleteSamplers(arg0);
	}

	@Override
	public void glDeleteSamplers(java.nio.IntBuffer arg0) {
		GL40.glDeleteSamplers(arg0);
	}

	@Override
	public void glDeleteSamplers(int[] arg0) {
		GL40.glDeleteSamplers(arg0);
	}

	@Override
	public boolean glIsSampler(int arg0) {
		return GL40.glIsSampler(arg0);
	}

	@Override
	public void glBindSampler(int arg0, int arg1) {
		GL40.glBindSampler(arg0, arg1);
	}

	@Override
	public void glSamplerParameteri(int arg0, int arg1, int arg2) {
		GL40.glSamplerParameteri(arg0, arg1, arg2);
	}

	@Override
	public void nglSamplerParameteriv(int arg0, int arg1, long arg2) {
		GL40.nglSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameteriv(int arg0, int arg1, int[] arg2) {
		GL40.glSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameterf(int arg0, int arg1, float arg2) {
		GL40.glSamplerParameterf(arg0, arg1, arg2);
	}

	@Override
	public void nglSamplerParameterfv(int arg0, int arg1, long arg2) {
		GL40.nglSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameterfv(int arg0, int arg1, float[] arg2) {
		GL40.glSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameterfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetSamplerParameteriv(int arg0, int arg1, long arg2) {
		GL40.nglGetSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameteriv(int arg0, int arg1, int[] arg2) {
		GL40.glGetSamplerParameteriv(arg0, arg1, arg2);
	}

	@Override
	public int glGetSamplerParameteri(int arg0, int arg1) {
		return GL40.glGetSamplerParameteri(arg0, arg1);
	}

	@Override
	public void nglGetSamplerParameterfv(int arg0, int arg1, long arg2) {
		GL40.nglGetSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameterfv(int arg0, int arg1, float[] arg2) {
		GL40.glGetSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameterfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetSamplerParameterfv(arg0, arg1, arg2);
	}

	@Override
	public float glGetSamplerParameterf(int arg0, int arg1) {
		return GL40.glGetSamplerParameterf(arg0, arg1);
	}

	@Override
	public void glVertexAttribDivisor(int arg0, int arg1) {
		GL40.glVertexAttribDivisor(arg0, arg1);
	}

	@Override
	public void nglBindFragDataLocationIndexed(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglBindFragDataLocationIndexed(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glBindFragDataLocationIndexed(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		GL40.glBindFragDataLocationIndexed(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glBindFragDataLocationIndexed(int arg0, int arg1, int arg2, java.lang.CharSequence arg3) {
		GL40.glBindFragDataLocationIndexed(arg0, arg1, arg2, arg3);
	}

	@Override
	public int nglGetFragDataIndex(int arg0, long arg1) {
		return GL40.nglGetFragDataIndex(arg0, arg1);
	}

	@Override
	public int glGetFragDataIndex(int arg0, java.nio.ByteBuffer arg1) {
		return GL40.glGetFragDataIndex(arg0, arg1);
	}

	@Override
	public int glGetFragDataIndex(int arg0, java.lang.CharSequence arg1) {
		return GL40.glGetFragDataIndex(arg0, arg1);
	}

	@Override
	public void nglSamplerParameterIiv(int arg0, int arg1, long arg2) {
		GL40.nglSamplerParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameterIiv(int arg0, int arg1, int[] arg2) {
		GL40.glSamplerParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameterIiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glSamplerParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public void nglSamplerParameterIuiv(int arg0, int arg1, long arg2) {
		GL40.nglSamplerParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameterIuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glSamplerParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glSamplerParameterIuiv(int arg0, int arg1, int[] arg2) {
		GL40.glSamplerParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetSamplerParameterIiv(int arg0, int arg1, long arg2) {
		GL40.nglGetSamplerParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameterIiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetSamplerParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameterIiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetSamplerParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetSamplerParameterIi(int arg0, int arg1) {
		return GL40.glGetSamplerParameterIi(arg0, arg1);
	}

	@Override
	public void nglGetSamplerParameterIuiv(int arg0, int arg1, long arg2) {
		GL40.nglGetSamplerParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameterIuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetSamplerParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetSamplerParameterIuiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetSamplerParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetSamplerParameterIui(int arg0, int arg1) {
		return GL40.glGetSamplerParameterIui(arg0, arg1);
	}

	@Override
	public void glQueryCounter(int arg0, int arg1) {
		GL40.glQueryCounter(arg0, arg1);
	}

	@Override
	public void nglGetQueryObjecti64v(int arg0, int arg1, long arg2) {
		GL40.nglGetQueryObjecti64v(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjecti64v(int arg0, int arg1, java.nio.LongBuffer arg2) {
		GL40.glGetQueryObjecti64v(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjecti64v(int arg0, int arg1, long[] arg2) {
		GL40.glGetQueryObjecti64v(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjecti64v(int arg0, int arg1, long arg2) {
		GL40.glGetQueryObjecti64v(arg0, arg1, arg2);
	}

	@Override
	public long glGetQueryObjecti64(int arg0, int arg1) {
		return GL40.glGetQueryObjecti64(arg0, arg1);
	}

	@Override
	public void nglGetQueryObjectui64v(int arg0, int arg1, long arg2) {
		GL40.nglGetQueryObjectui64v(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectui64v(int arg0, int arg1, long[] arg2) {
		GL40.glGetQueryObjectui64v(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectui64v(int arg0, int arg1, java.nio.LongBuffer arg2) {
		GL40.glGetQueryObjectui64v(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectui64v(int arg0, int arg1, long arg2) {
		GL40.glGetQueryObjectui64v(arg0, arg1, arg2);
	}

	@Override
	public long glGetQueryObjectui64(int arg0, int arg1) {
		return GL40.glGetQueryObjectui64(arg0, arg1);
	}

	@Override
	public void glVertexP2ui(int arg0, int arg1) {
		GL40.glVertexP2ui(arg0, arg1);
	}

	@Override
	public void glVertexP3ui(int arg0, int arg1) {
		GL40.glVertexP3ui(arg0, arg1);
	}

	@Override
	public void glVertexP4ui(int arg0, int arg1) {
		GL40.glVertexP4ui(arg0, arg1);
	}

	@Override
	public void nglVertexP2uiv(int arg0, long arg1) {
		GL40.nglVertexP2uiv(arg0, arg1);
	}

	@Override
	public void glVertexP2uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexP2uiv(arg0, arg1);
	}

	@Override
	public void glVertexP2uiv(int arg0, int[] arg1) {
		GL40.glVertexP2uiv(arg0, arg1);
	}

	@Override
	public void nglVertexP3uiv(int arg0, long arg1) {
		GL40.nglVertexP3uiv(arg0, arg1);
	}

	@Override
	public void glVertexP3uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexP3uiv(arg0, arg1);
	}

	@Override
	public void glVertexP3uiv(int arg0, int[] arg1) {
		GL40.glVertexP3uiv(arg0, arg1);
	}

	@Override
	public void nglVertexP4uiv(int arg0, long arg1) {
		GL40.nglVertexP4uiv(arg0, arg1);
	}

	@Override
	public void glVertexP4uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexP4uiv(arg0, arg1);
	}

	@Override
	public void glVertexP4uiv(int arg0, int[] arg1) {
		GL40.glVertexP4uiv(arg0, arg1);
	}

	@Override
	public void glTexCoordP1ui(int arg0, int arg1) {
		GL40.glTexCoordP1ui(arg0, arg1);
	}

	@Override
	public void glTexCoordP2ui(int arg0, int arg1) {
		GL40.glTexCoordP2ui(arg0, arg1);
	}

	@Override
	public void glTexCoordP3ui(int arg0, int arg1) {
		GL40.glTexCoordP3ui(arg0, arg1);
	}

	@Override
	public void glTexCoordP4ui(int arg0, int arg1) {
		GL40.glTexCoordP4ui(arg0, arg1);
	}

	@Override
	public void nglTexCoordP1uiv(int arg0, long arg1) {
		GL40.nglTexCoordP1uiv(arg0, arg1);
	}

	@Override
	public void glTexCoordP1uiv(int arg0, int[] arg1) {
		GL40.glTexCoordP1uiv(arg0, arg1);
	}

	@Override
	public void glTexCoordP1uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glTexCoordP1uiv(arg0, arg1);
	}

	@Override
	public void nglTexCoordP2uiv(int arg0, long arg1) {
		GL40.nglTexCoordP2uiv(arg0, arg1);
	}

	@Override
	public void glTexCoordP2uiv(int arg0, int[] arg1) {
		GL40.glTexCoordP2uiv(arg0, arg1);
	}

	@Override
	public void glTexCoordP2uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glTexCoordP2uiv(arg0, arg1);
	}

	@Override
	public void nglTexCoordP3uiv(int arg0, long arg1) {
		GL40.nglTexCoordP3uiv(arg0, arg1);
	}

	@Override
	public void glTexCoordP3uiv(int arg0, int[] arg1) {
		GL40.glTexCoordP3uiv(arg0, arg1);
	}

	@Override
	public void glTexCoordP3uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glTexCoordP3uiv(arg0, arg1);
	}

	@Override
	public void nglTexCoordP4uiv(int arg0, long arg1) {
		GL40.nglTexCoordP4uiv(arg0, arg1);
	}

	@Override
	public void glTexCoordP4uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glTexCoordP4uiv(arg0, arg1);
	}

	@Override
	public void glTexCoordP4uiv(int arg0, int[] arg1) {
		GL40.glTexCoordP4uiv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoordP1ui(int arg0, int arg1, int arg2) {
		GL40.glMultiTexCoordP1ui(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP2ui(int arg0, int arg1, int arg2) {
		GL40.glMultiTexCoordP2ui(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP3ui(int arg0, int arg1, int arg2) {
		GL40.glMultiTexCoordP3ui(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP4ui(int arg0, int arg1, int arg2) {
		GL40.glMultiTexCoordP4ui(arg0, arg1, arg2);
	}

	@Override
	public void nglMultiTexCoordP1uiv(int arg0, int arg1, long arg2) {
		GL40.nglMultiTexCoordP1uiv(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP1uiv(int arg0, int arg1, int[] arg2) {
		GL40.glMultiTexCoordP1uiv(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP1uiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glMultiTexCoordP1uiv(arg0, arg1, arg2);
	}

	@Override
	public void nglMultiTexCoordP2uiv(int arg0, int arg1, long arg2) {
		GL40.nglMultiTexCoordP2uiv(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP2uiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glMultiTexCoordP2uiv(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP2uiv(int arg0, int arg1, int[] arg2) {
		GL40.glMultiTexCoordP2uiv(arg0, arg1, arg2);
	}

	@Override
	public void nglMultiTexCoordP3uiv(int arg0, int arg1, long arg2) {
		GL40.nglMultiTexCoordP3uiv(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP3uiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glMultiTexCoordP3uiv(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP3uiv(int arg0, int arg1, int[] arg2) {
		GL40.glMultiTexCoordP3uiv(arg0, arg1, arg2);
	}

	@Override
	public void nglMultiTexCoordP4uiv(int arg0, int arg1, long arg2) {
		GL40.nglMultiTexCoordP4uiv(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP4uiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glMultiTexCoordP4uiv(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoordP4uiv(int arg0, int arg1, int[] arg2) {
		GL40.glMultiTexCoordP4uiv(arg0, arg1, arg2);
	}

	@Override
	public void glNormalP3ui(int arg0, int arg1) {
		GL40.glNormalP3ui(arg0, arg1);
	}

	@Override
	public void nglNormalP3uiv(int arg0, long arg1) {
		GL40.nglNormalP3uiv(arg0, arg1);
	}

	@Override
	public void glNormalP3uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glNormalP3uiv(arg0, arg1);
	}

	@Override
	public void glNormalP3uiv(int arg0, int[] arg1) {
		GL40.glNormalP3uiv(arg0, arg1);
	}

	@Override
	public void glColorP3ui(int arg0, int arg1) {
		GL40.glColorP3ui(arg0, arg1);
	}

	@Override
	public void glColorP4ui(int arg0, int arg1) {
		GL40.glColorP4ui(arg0, arg1);
	}

	@Override
	public void nglColorP3uiv(int arg0, long arg1) {
		GL40.nglColorP3uiv(arg0, arg1);
	}

	@Override
	public void glColorP3uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glColorP3uiv(arg0, arg1);
	}

	@Override
	public void glColorP3uiv(int arg0, int[] arg1) {
		GL40.glColorP3uiv(arg0, arg1);
	}

	@Override
	public void nglColorP4uiv(int arg0, long arg1) {
		GL40.nglColorP4uiv(arg0, arg1);
	}

	@Override
	public void glColorP4uiv(int arg0, int[] arg1) {
		GL40.glColorP4uiv(arg0, arg1);
	}

	@Override
	public void glColorP4uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glColorP4uiv(arg0, arg1);
	}

	@Override
	public void glSecondaryColorP3ui(int arg0, int arg1) {
		GL40.glSecondaryColorP3ui(arg0, arg1);
	}

	@Override
	public void nglSecondaryColorP3uiv(int arg0, long arg1) {
		GL40.nglSecondaryColorP3uiv(arg0, arg1);
	}

	@Override
	public void glSecondaryColorP3uiv(int arg0, int[] arg1) {
		GL40.glSecondaryColorP3uiv(arg0, arg1);
	}

	@Override
	public void glSecondaryColorP3uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glSecondaryColorP3uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribP1ui(int arg0, int arg1, boolean arg2, int arg3) {
		GL40.glVertexAttribP1ui(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP2ui(int arg0, int arg1, boolean arg2, int arg3) {
		GL40.glVertexAttribP2ui(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP3ui(int arg0, int arg1, boolean arg2, int arg3) {
		GL40.glVertexAttribP3ui(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP4ui(int arg0, int arg1, boolean arg2, int arg3) {
		GL40.glVertexAttribP4ui(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglVertexAttribP1uiv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglVertexAttribP1uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP1uiv(int arg0, int arg1, boolean arg2, int[] arg3) {
		GL40.glVertexAttribP1uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP1uiv(int arg0, int arg1, boolean arg2, java.nio.IntBuffer arg3) {
		GL40.glVertexAttribP1uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglVertexAttribP2uiv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglVertexAttribP2uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP2uiv(int arg0, int arg1, boolean arg2, int[] arg3) {
		GL40.glVertexAttribP2uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP2uiv(int arg0, int arg1, boolean arg2, java.nio.IntBuffer arg3) {
		GL40.glVertexAttribP2uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglVertexAttribP3uiv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglVertexAttribP3uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP3uiv(int arg0, int arg1, boolean arg2, java.nio.IntBuffer arg3) {
		GL40.glVertexAttribP3uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP3uiv(int arg0, int arg1, boolean arg2, int[] arg3) {
		GL40.glVertexAttribP3uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglVertexAttribP4uiv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglVertexAttribP4uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP4uiv(int arg0, int arg1, boolean arg2, java.nio.IntBuffer arg3) {
		GL40.glVertexAttribP4uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribP4uiv(int arg0, int arg1, boolean arg2, int[] arg3) {
		GL40.glVertexAttribP4uiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public long glFenceSync(int arg0, int arg1) {
		return GL40.glFenceSync(arg0, arg1);
	}

	@Override
	public boolean nglIsSync(long arg0) {
		return GL40.nglIsSync(arg0);
	}

	@Override
	public boolean glIsSync(long arg0) {
		return GL40.glIsSync(arg0);
	}

	@Override
	public void nglDeleteSync(long arg0) {
		GL40.nglDeleteSync(arg0);
	}

	@Override
	public void glDeleteSync(long arg0) {
		GL40.glDeleteSync(arg0);
	}

	@Override
	public int nglClientWaitSync(long arg0, int arg1, long arg2) {
		return GL40.nglClientWaitSync(arg0, arg1, arg2);
	}

	@Override
	public int glClientWaitSync(long arg0, int arg1, long arg2) {
		return GL40.glClientWaitSync(arg0, arg1, arg2);
	}

	@Override
	public void nglWaitSync(long arg0, int arg1, long arg2) {
		GL40.nglWaitSync(arg0, arg1, arg2);
	}

	@Override
	public void glWaitSync(long arg0, int arg1, long arg2) {
		GL40.glWaitSync(arg0, arg1, arg2);
	}

	@Override
	public void nglGetInteger64v(int arg0, long arg1) {
		GL40.nglGetInteger64v(arg0, arg1);
	}

	@Override
	public void glGetInteger64v(int arg0, long[] arg1) {
		GL40.glGetInteger64v(arg0, arg1);
	}

	@Override
	public void glGetInteger64v(int arg0, java.nio.LongBuffer arg1) {
		GL40.glGetInteger64v(arg0, arg1);
	}

	@Override
	public long glGetInteger64(int arg0) {
		return GL40.glGetInteger64(arg0);
	}

	@Override
	public void nglGetSynciv(long arg0, int arg1, int arg2, long arg3, long arg4) {
		GL40.nglGetSynciv(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetSynciv(long arg0, int arg1, int[] arg2, int[] arg3) {
		GL40.glGetSynciv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetSynciv(long arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3) {
		GL40.glGetSynciv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int glGetSynci(long arg0, int arg1, java.nio.IntBuffer arg2) {
		return GL40.glGetSynci(arg0, arg1, arg2);
	}

	@Override
	public void nglGetInteger64i_v(int arg0, int arg1, long arg2) {
		GL40.nglGetInteger64i_v(arg0, arg1, arg2);
	}

	@Override
	public void glGetInteger64i_v(int arg0, int arg1, java.nio.LongBuffer arg2) {
		GL40.glGetInteger64i_v(arg0, arg1, arg2);
	}

	@Override
	public void glGetInteger64i_v(int arg0, int arg1, long[] arg2) {
		GL40.glGetInteger64i_v(arg0, arg1, arg2);
	}

	@Override
	public long glGetInteger64i(int arg0, int arg1) {
		return GL40.glGetInteger64i(arg0, arg1);
	}

	@Override
	public void nglGetBufferParameteri64v(int arg0, int arg1, long arg2) {
		GL40.nglGetBufferParameteri64v(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferParameteri64v(int arg0, int arg1, java.nio.LongBuffer arg2) {
		GL40.glGetBufferParameteri64v(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferParameteri64v(int arg0, int arg1, long[] arg2) {
		GL40.glGetBufferParameteri64v(arg0, arg1, arg2);
	}

	@Override
	public long glGetBufferParameteri64(int arg0, int arg1) {
		return GL40.glGetBufferParameteri64(arg0, arg1);
	}

	@Override
	public void nglDrawElementsBaseVertex(int arg0, int arg1, int arg2, long arg3, int arg4) {
		GL40.nglDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawElementsBaseVertex(int arg0, java.nio.ShortBuffer arg1, int arg2) {
		GL40.glDrawElementsBaseVertex(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsBaseVertex(int arg0, java.nio.IntBuffer arg1, int arg2) {
		GL40.glDrawElementsBaseVertex(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsBaseVertex(int arg0, java.nio.ByteBuffer arg1, int arg2) {
		GL40.glDrawElementsBaseVertex(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsBaseVertex(int arg0, int arg1, java.nio.ByteBuffer arg2, int arg3) {
		GL40.glDrawElementsBaseVertex(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawElementsBaseVertex(int arg0, int arg1, int arg2, long arg3, int arg4) {
		GL40.glDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, int arg3, int arg4, long arg5, int arg6) {
		GL40.nglDrawRangeElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3, int arg4) {
		GL40.glDrawRangeElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, int arg3, java.nio.ByteBuffer arg4, int arg5) {
		GL40.glDrawRangeElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, int arg3, int arg4, long arg5, int arg6) {
		GL40.glDrawRangeElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3, int arg4) {
		GL40.glDrawRangeElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawRangeElementsBaseVertex(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, int arg4) {
		GL40.glDrawRangeElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglDrawElementsInstancedBaseVertex(int arg0, int arg1, int arg2, long arg3, int arg4, int arg5) {
		GL40.nglDrawElementsInstancedBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glDrawElementsInstancedBaseVertex(int arg0, java.nio.ByteBuffer arg1, int arg2, int arg3) {
		GL40.glDrawElementsInstancedBaseVertex(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawElementsInstancedBaseVertex(int arg0, java.nio.IntBuffer arg1, int arg2, int arg3) {
		GL40.glDrawElementsInstancedBaseVertex(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawElementsInstancedBaseVertex(int arg0, int arg1, java.nio.ByteBuffer arg2, int arg3, int arg4) {
		GL40.glDrawElementsInstancedBaseVertex(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawElementsInstancedBaseVertex(int arg0, int arg1, int arg2, long arg3, int arg4, int arg5) {
		GL40.glDrawElementsInstancedBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glDrawElementsInstancedBaseVertex(int arg0, java.nio.ShortBuffer arg1, int arg2, int arg3) {
		GL40.glDrawElementsInstancedBaseVertex(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglMultiDrawElementsBaseVertex(int arg0, long arg1, int arg2, long arg3, int arg4, long arg5) {
		GL40.nglMultiDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glMultiDrawElementsBaseVertex(int arg0, int[] arg1, int arg2, org.lwjgl.PointerBuffer arg3, int[] arg4) {
		GL40.glMultiDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glMultiDrawElementsBaseVertex(int arg0, java.nio.IntBuffer arg1, int arg2, org.lwjgl.PointerBuffer arg3, java.nio.IntBuffer arg4) {
		GL40.glMultiDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glProvokingVertex(int arg0) {
		GL40.glProvokingVertex(arg0);
	}

	@Override
	public void glTexImage2DMultisample(int arg0, int arg1, int arg2, int arg3, int arg4, boolean arg5) {
		GL40.glTexImage2DMultisample(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glTexImage3DMultisample(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, boolean arg6) {
		GL40.glTexImage3DMultisample(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void nglGetMultisamplefv(int arg0, int arg1, long arg2) {
		GL40.nglGetMultisamplefv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMultisamplefv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetMultisamplefv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMultisamplefv(int arg0, int arg1, float[] arg2) {
		GL40.glGetMultisamplefv(arg0, arg1, arg2);
	}

	@Override
	public float glGetMultisamplef(int arg0, int arg1) {
		return GL40.glGetMultisamplef(arg0, arg1);
	}

	@Override
	public void glSampleMaski(int arg0, int arg1) {
		GL40.glSampleMaski(arg0, arg1);
	}

	@Override
	public void glFramebufferTexture(int arg0, int arg1, int arg2, int arg3) {
		GL40.glFramebufferTexture(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glCopyBufferSubData(int arg0, int arg1, long arg2, long arg3, long arg4) {
		GL40.glCopyBufferSubData(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglGetUniformIndices(int arg0, int arg1, long arg2, long arg3) {
		GL40.nglGetUniformIndices(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetUniformIndices(int arg0, org.lwjgl.PointerBuffer arg1, int[] arg2) {
		GL40.glGetUniformIndices(arg0, arg1, arg2);
	}

	@Override
	public int glGetUniformIndices(int arg0, java.lang.CharSequence arg1) {
		return GL40.glGetUniformIndices(arg0, arg1);
	}

	@Override
	public void glGetUniformIndices(int arg0, java.lang.CharSequence[] arg1, java.nio.IntBuffer arg2) {
		GL40.glGetUniformIndices(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformIndices(int arg0, org.lwjgl.PointerBuffer arg1, java.nio.IntBuffer arg2) {
		GL40.glGetUniformIndices(arg0, arg1, arg2);
	}

	@Override
	public void nglGetActiveUniformsiv(int arg0, int arg1, long arg2, int arg3, long arg4) {
		GL40.nglGetActiveUniformsiv(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetActiveUniformsiv(int arg0, java.nio.IntBuffer arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glGetActiveUniformsiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveUniformsiv(int arg0, int[] arg1, int arg2, int[] arg3) {
		GL40.glGetActiveUniformsiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int nglGetUniformBlockIndex(int arg0, long arg1) {
		return GL40.nglGetUniformBlockIndex(arg0, arg1);
	}

	@Override
	public int glGetUniformBlockIndex(int arg0, java.lang.CharSequence arg1) {
		return GL40.glGetUniformBlockIndex(arg0, arg1);
	}

	@Override
	public int glGetUniformBlockIndex(int arg0, java.nio.ByteBuffer arg1) {
		return GL40.glGetUniformBlockIndex(arg0, arg1);
	}

	@Override
	public void nglGetActiveUniformBlockiv(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglGetActiveUniformBlockiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveUniformBlockiv(int arg0, int arg1, int arg2, int[] arg3) {
		GL40.glGetActiveUniformBlockiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveUniformBlockiv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glGetActiveUniformBlockiv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int glGetActiveUniformBlocki(int arg0, int arg1, int arg2) {
		return GL40.glGetActiveUniformBlocki(arg0, arg1, arg2);
	}

	@Override
	public void nglGetActiveUniformBlockName(int arg0, int arg1, int arg2, long arg3, long arg4) {
		GL40.nglGetActiveUniformBlockName(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public java.lang.String glGetActiveUniformBlockName(int arg0, int arg1) {
		return GL40.glGetActiveUniformBlockName(arg0, arg1);
	}

	@Override
	public void glGetActiveUniformBlockName(int arg0, int arg1, int[] arg2, java.nio.ByteBuffer arg3) {
		GL40.glGetActiveUniformBlockName(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveUniformBlockName(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.ByteBuffer arg3) {
		GL40.glGetActiveUniformBlockName(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetActiveUniformBlockName(int arg0, int arg1, int arg2) {
		return GL40.glGetActiveUniformBlockName(arg0, arg1, arg2);
	}

	@Override
	public void glUniformBlockBinding(int arg0, int arg1, int arg2) {
		GL40.glUniformBlockBinding(arg0, arg1, arg2);
	}

	@Override
	public void glDrawArraysInstanced(int arg0, int arg1, int arg2, int arg3) {
		GL40.glDrawArraysInstanced(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglDrawElementsInstanced(int arg0, int arg1, int arg2, long arg3, int arg4) {
		GL40.nglDrawElementsInstanced(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawElementsInstanced(int arg0, int arg1, int arg2, long arg3, int arg4) {
		GL40.glDrawElementsInstanced(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawElementsInstanced(int arg0, java.nio.IntBuffer arg1, int arg2) {
		GL40.glDrawElementsInstanced(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsInstanced(int arg0, java.nio.ShortBuffer arg1, int arg2) {
		GL40.glDrawElementsInstanced(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsInstanced(int arg0, java.nio.ByteBuffer arg1, int arg2) {
		GL40.glDrawElementsInstanced(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElementsInstanced(int arg0, int arg1, java.nio.ByteBuffer arg2, int arg3) {
		GL40.glDrawElementsInstanced(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glPrimitiveRestartIndex(int arg0) {
		GL40.glPrimitiveRestartIndex(arg0);
	}

	@Override
	public void glTexBuffer(int arg0, int arg1, int arg2) {
		GL40.glTexBuffer(arg0, arg1, arg2);
	}

	@Override
	public int glGetActiveUniformsi(int arg0, int arg1, int arg2) {
		return GL40.glGetActiveUniformsi(arg0, arg1, arg2);
	}

	@Override
	public void nglGetActiveUniformName(int arg0, int arg1, int arg2, long arg3, long arg4) {
		GL40.nglGetActiveUniformName(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetActiveUniformName(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.ByteBuffer arg3) {
		GL40.glGetActiveUniformName(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetActiveUniformName(int arg0, int arg1, int[] arg2, java.nio.ByteBuffer arg3) {
		GL40.glGetActiveUniformName(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetActiveUniformName(int arg0, int arg1) {
		return GL40.glGetActiveUniformName(arg0, arg1);
	}

	@Override
	public java.lang.String glGetActiveUniformName(int arg0, int arg1, int arg2) {
		return GL40.glGetActiveUniformName(arg0, arg1, arg2);
	}

	@Override
	public void glBlitFramebuffer(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) {
		GL40.glBlitFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glRenderbufferStorageMultisample(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glRenderbufferStorageMultisample(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glFramebufferTextureLayer(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glFramebufferTextureLayer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public long nglMapBufferRange(int arg0, long arg1, long arg2, int arg3) {
		return GL40.nglMapBufferRange(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.nio.ByteBuffer glMapBufferRange(int arg0, long arg1, long arg2, int arg3, java.nio.ByteBuffer arg4) {
		return GL40.glMapBufferRange(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public java.nio.ByteBuffer glMapBufferRange(int arg0, long arg1, long arg2, int arg3) {
		return GL40.glMapBufferRange(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glFlushMappedBufferRange(int arg0, long arg1, long arg2) {
		GL40.glFlushMappedBufferRange(arg0, arg1, arg2);
	}

	@Override
	public void glBindVertexArray(int arg0) {
		GL40.glBindVertexArray(arg0);
	}

	@Override
	public void nglDeleteVertexArrays(int arg0, long arg1) {
		GL40.nglDeleteVertexArrays(arg0, arg1);
	}

	@Override
	public void glDeleteVertexArrays(int arg0) {
		GL40.glDeleteVertexArrays(arg0);
	}

	@Override
	public void glDeleteVertexArrays(java.nio.IntBuffer arg0) {
		GL40.glDeleteVertexArrays(arg0);
	}

	@Override
	public void glDeleteVertexArrays(int[] arg0) {
		GL40.glDeleteVertexArrays(arg0);
	}

	@Override
	public void nglGenVertexArrays(int arg0, long arg1) {
		GL40.nglGenVertexArrays(arg0, arg1);
	}

	@Override
	public void glGenVertexArrays(java.nio.IntBuffer arg0) {
		GL40.glGenVertexArrays(arg0);
	}

	@Override
	public void glGenVertexArrays(int[] arg0) {
		GL40.glGenVertexArrays(arg0);
	}

	@Override
	public int glGenVertexArrays() {
		return GL40.glGenVertexArrays();
	}

	@Override
	public boolean glIsVertexArray(int arg0) {
		return GL40.glIsVertexArray(arg0);
	}

	@Override
	public void nglGetIntegeri_v(int arg0, int arg1, long arg2) {
		GL40.nglGetIntegeri_v(arg0, arg1, arg2);
	}

	@Override
	public void glGetIntegeri_v(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetIntegeri_v(arg0, arg1, arg2);
	}

	@Override
	public void glGetIntegeri_v(int arg0, int arg1, int[] arg2) {
		GL40.glGetIntegeri_v(arg0, arg1, arg2);
	}

	@Override
	public int glGetIntegeri(int arg0, int arg1) {
		return GL40.glGetIntegeri(arg0, arg1);
	}

	@Override
	public void glBeginTransformFeedback(int arg0) {
		GL40.glBeginTransformFeedback(arg0);
	}

	@Override
	public void glEndTransformFeedback() {
		GL40.glEndTransformFeedback();
	}

	@Override
	public void glBindBufferRange(int arg0, int arg1, int arg2, long arg3, long arg4) {
		GL40.glBindBufferRange(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glBindBufferBase(int arg0, int arg1, int arg2) {
		GL40.glBindBufferBase(arg0, arg1, arg2);
	}

	@Override
	public void nglTransformFeedbackVaryings(int arg0, int arg1, long arg2, int arg3) {
		GL40.nglTransformFeedbackVaryings(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTransformFeedbackVaryings(int arg0, java.lang.CharSequence[] arg1, int arg2) {
		GL40.glTransformFeedbackVaryings(arg0, arg1, arg2);
	}

	@Override
	public void glTransformFeedbackVaryings(int arg0, java.lang.CharSequence arg1, int arg2) {
		GL40.glTransformFeedbackVaryings(arg0, arg1, arg2);
	}

	@Override
	public void glTransformFeedbackVaryings(int arg0, org.lwjgl.PointerBuffer arg1, int arg2) {
		GL40.glTransformFeedbackVaryings(arg0, arg1, arg2);
	}

	@Override
	public void nglGetTransformFeedbackVarying(int arg0, int arg1, int arg2, long arg3, long arg4, long arg5, long arg6) {
		GL40.nglGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glGetTransformFeedbackVarying(int arg0, int arg1, int[] arg2, int[] arg3, int[] arg4, java.nio.ByteBuffer arg5) {
		GL40.glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public java.lang.String glGetTransformFeedbackVarying(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3) {
		return GL40.glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetTransformFeedbackVarying(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4) {
		return GL40.glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTransformFeedbackVarying(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4, java.nio.ByteBuffer arg5) {
		GL40.glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void nglVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, long arg4) {
		GL40.nglVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, java.nio.IntBuffer arg4) {
		GL40.glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, long arg4) {
		GL40.glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, java.nio.ByteBuffer arg4) {
		GL40.glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttribIPointer(int arg0, int arg1, int arg2, int arg3, java.nio.ShortBuffer arg4) {
		GL40.glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglGetVertexAttribIiv(int arg0, int arg1, long arg2) {
		GL40.nglGetVertexAttribIiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribIiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetVertexAttribIiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribIiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetVertexAttribIiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetVertexAttribIi(int arg0, int arg1) {
		return GL40.glGetVertexAttribIi(arg0, arg1);
	}

	@Override
	public void nglGetVertexAttribIuiv(int arg0, int arg1, long arg2) {
		GL40.nglGetVertexAttribIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribIuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetVertexAttribIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribIuiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetVertexAttribIuiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetVertexAttribIui(int arg0, int arg1) {
		return GL40.glGetVertexAttribIui(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4i(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glVertexAttribI4i(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttribI4ui(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glVertexAttribI4ui(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglVertexAttribI4iv(int arg0, long arg1) {
		GL40.nglVertexAttribI4iv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4iv(int arg0, int[] arg1) {
		GL40.glVertexAttribI4iv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttribI4iv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI4uiv(int arg0, long arg1) {
		GL40.nglVertexAttribI4uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4uiv(int arg0, int[] arg1) {
		GL40.glVertexAttribI4uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttribI4uiv(arg0, arg1);
	}

	@Override
	public void nglGetUniformuiv(int arg0, int arg1, long arg2) {
		GL40.nglGetUniformuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetUniformuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformuiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetUniformuiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetUniformui(int arg0, int arg1) {
		return GL40.glGetUniformui(arg0, arg1);
	}

	@Override
	public int nglGetFragDataLocation(int arg0, long arg1) {
		return GL40.nglGetFragDataLocation(arg0, arg1);
	}

	@Override
	public int glGetFragDataLocation(int arg0, java.lang.CharSequence arg1) {
		return GL40.glGetFragDataLocation(arg0, arg1);
	}

	@Override
	public int glGetFragDataLocation(int arg0, java.nio.ByteBuffer arg1) {
		return GL40.glGetFragDataLocation(arg0, arg1);
	}

	@Override
	public void glUniform1ui(int arg0, int arg1) {
		GL40.glUniform1ui(arg0, arg1);
	}

	@Override
	public void glUniform2ui(int arg0, int arg1, int arg2) {
		GL40.glUniform2ui(arg0, arg1, arg2);
	}

	@Override
	public void glUniform3ui(int arg0, int arg1, int arg2, int arg3) {
		GL40.glUniform3ui(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniform4ui(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glUniform4ui(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglUniform1uiv(int arg0, int arg1, long arg2) {
		GL40.nglUniform1uiv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform1uiv(int arg0, int[] arg1) {
		GL40.glUniform1uiv(arg0, arg1);
	}

	@Override
	public void glUniform1uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glUniform1uiv(arg0, arg1);
	}

	@Override
	public void nglUniform2uiv(int arg0, int arg1, long arg2) {
		GL40.nglUniform2uiv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform2uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glUniform2uiv(arg0, arg1);
	}

	@Override
	public void glUniform2uiv(int arg0, int[] arg1) {
		GL40.glUniform2uiv(arg0, arg1);
	}

	@Override
	public void nglUniform3uiv(int arg0, int arg1, long arg2) {
		GL40.nglUniform3uiv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform3uiv(int arg0, int[] arg1) {
		GL40.glUniform3uiv(arg0, arg1);
	}

	@Override
	public void glUniform3uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glUniform3uiv(arg0, arg1);
	}

	@Override
	public void nglUniform4uiv(int arg0, int arg1, long arg2) {
		GL40.nglUniform4uiv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform4uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glUniform4uiv(arg0, arg1);
	}

	@Override
	public void glUniform4uiv(int arg0, int[] arg1) {
		GL40.glUniform4uiv(arg0, arg1);
	}

	@Override
	public void nglClearBufferiv(int arg0, int arg1, long arg2) {
		GL40.nglClearBufferiv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferiv(int arg0, int arg1, int[] arg2) {
		GL40.glClearBufferiv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glClearBufferiv(arg0, arg1, arg2);
	}

	@Override
	public void nglClearBufferuiv(int arg0, int arg1, long arg2) {
		GL40.nglClearBufferuiv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glClearBufferuiv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferuiv(int arg0, int arg1, int[] arg2) {
		GL40.glClearBufferuiv(arg0, arg1, arg2);
	}

	@Override
	public void nglClearBufferfv(int arg0, int arg1, long arg2) {
		GL40.nglClearBufferfv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferfv(int arg0, int arg1, float[] arg2) {
		GL40.glClearBufferfv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glClearBufferfv(arg0, arg1, arg2);
	}

	@Override
	public void glClearBufferfi(int arg0, int arg1, float arg2, int arg3) {
		GL40.glClearBufferfi(arg0, arg1, arg2, arg3);
	}

	@Override
	public long nglGetStringi(int arg0, int arg1) {
		return GL40.nglGetStringi(arg0, arg1);
	}

	@Override
	public java.lang.String glGetStringi(int arg0, int arg1) {
		return GL40.glGetStringi(arg0, arg1);
	}

	@Override
	public void glBindFramebuffer(int arg0, int arg1) {
		GL40.glBindFramebuffer(arg0, arg1);
	}

	@Override
	public void glBindRenderbuffer(int arg0, int arg1) {
		GL40.glBindRenderbuffer(arg0, arg1);
	}

	@Override
	public int glCheckFramebufferStatus(int arg0) {
		return GL40.glCheckFramebufferStatus(arg0);
	}

	@Override
	public void nglDeleteFramebuffers(int arg0, long arg1) {
		GL40.nglDeleteFramebuffers(arg0, arg1);
	}

	@Override
	public void glDeleteFramebuffers(java.nio.IntBuffer arg0) {
		GL40.glDeleteFramebuffers(arg0);
	}

	@Override
	public void glDeleteFramebuffers(int arg0) {
		GL40.glDeleteFramebuffers(arg0);
	}

	@Override
	public void glDeleteFramebuffers(int[] arg0) {
		GL40.glDeleteFramebuffers(arg0);
	}

	@Override
	public void nglDeleteRenderbuffers(int arg0, long arg1) {
		GL40.nglDeleteRenderbuffers(arg0, arg1);
	}

	@Override
	public void glDeleteRenderbuffers(int arg0) {
		GL40.glDeleteRenderbuffers(arg0);
	}

	@Override
	public void glDeleteRenderbuffers(int[] arg0) {
		GL40.glDeleteRenderbuffers(arg0);
	}

	@Override
	public void glDeleteRenderbuffers(java.nio.IntBuffer arg0) {
		GL40.glDeleteRenderbuffers(arg0);
	}

	@Override
	public void glFramebufferRenderbuffer(int arg0, int arg1, int arg2, int arg3) {
		GL40.glFramebufferRenderbuffer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glFramebufferTexture2D(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glFramebufferTexture2D(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGenerateMipmap(int arg0) {
		GL40.glGenerateMipmap(arg0);
	}

	@Override
	public void nglGenFramebuffers(int arg0, long arg1) {
		GL40.nglGenFramebuffers(arg0, arg1);
	}

	@Override
	public void glGenFramebuffers(java.nio.IntBuffer arg0) {
		GL40.glGenFramebuffers(arg0);
	}

	@Override
	public int glGenFramebuffers() {
		return GL40.glGenFramebuffers();
	}

	@Override
	public void glGenFramebuffers(int[] arg0) {
		GL40.glGenFramebuffers(arg0);
	}

	@Override
	public void nglGenRenderbuffers(int arg0, long arg1) {
		GL40.nglGenRenderbuffers(arg0, arg1);
	}

	@Override
	public void glGenRenderbuffers(int[] arg0) {
		GL40.glGenRenderbuffers(arg0);
	}

	@Override
	public int glGenRenderbuffers() {
		return GL40.glGenRenderbuffers();
	}

	@Override
	public void glGenRenderbuffers(java.nio.IntBuffer arg0) {
		GL40.glGenRenderbuffers(arg0);
	}

	@Override
	public void nglGetFramebufferAttachmentParameteriv(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglGetFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetFramebufferAttachmentParameteriv(int arg0, int arg1, int arg2, int[] arg3) {
		GL40.glGetFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetFramebufferAttachmentParameteriv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glGetFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int glGetFramebufferAttachmentParameteri(int arg0, int arg1, int arg2) {
		return GL40.glGetFramebufferAttachmentParameteri(arg0, arg1, arg2);
	}

	@Override
	public void nglGetRenderbufferParameteriv(int arg0, int arg1, long arg2) {
		GL40.nglGetRenderbufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetRenderbufferParameteriv(int arg0, int arg1, int[] arg2) {
		GL40.glGetRenderbufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetRenderbufferParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetRenderbufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public int glGetRenderbufferParameteri(int arg0, int arg1) {
		return GL40.glGetRenderbufferParameteri(arg0, arg1);
	}

	@Override
	public boolean glIsFramebuffer(int arg0) {
		return GL40.glIsFramebuffer(arg0);
	}

	@Override
	public boolean glIsRenderbuffer(int arg0) {
		return GL40.glIsRenderbuffer(arg0);
	}

	@Override
	public void glRenderbufferStorage(int arg0, int arg1, int arg2, int arg3) {
		GL40.glRenderbufferStorage(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribI1i(int arg0, int arg1) {
		GL40.glVertexAttribI1i(arg0, arg1);
	}

	@Override
	public void glVertexAttribI2i(int arg0, int arg1, int arg2) {
		GL40.glVertexAttribI2i(arg0, arg1, arg2);
	}

	@Override
	public void glVertexAttribI3i(int arg0, int arg1, int arg2, int arg3) {
		GL40.glVertexAttribI3i(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttribI1ui(int arg0, int arg1) {
		GL40.glVertexAttribI1ui(arg0, arg1);
	}

	@Override
	public void glVertexAttribI2ui(int arg0, int arg1, int arg2) {
		GL40.glVertexAttribI2ui(arg0, arg1, arg2);
	}

	@Override
	public void glVertexAttribI3ui(int arg0, int arg1, int arg2, int arg3) {
		GL40.glVertexAttribI3ui(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglVertexAttribI1iv(int arg0, long arg1) {
		GL40.nglVertexAttribI1iv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI1iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttribI1iv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI1iv(int arg0, int[] arg1) {
		GL40.glVertexAttribI1iv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI2iv(int arg0, long arg1) {
		GL40.nglVertexAttribI2iv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI2iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttribI2iv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI2iv(int arg0, int[] arg1) {
		GL40.glVertexAttribI2iv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI3iv(int arg0, long arg1) {
		GL40.nglVertexAttribI3iv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI3iv(int arg0, int[] arg1) {
		GL40.glVertexAttribI3iv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI3iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttribI3iv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI1uiv(int arg0, long arg1) {
		GL40.nglVertexAttribI1uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI1uiv(int arg0, int[] arg1) {
		GL40.glVertexAttribI1uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI1uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttribI1uiv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI2uiv(int arg0, long arg1) {
		GL40.nglVertexAttribI2uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI2uiv(int arg0, int[] arg1) {
		GL40.glVertexAttribI2uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI2uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttribI2uiv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI3uiv(int arg0, long arg1) {
		GL40.nglVertexAttribI3uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI3uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttribI3uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI3uiv(int arg0, int[] arg1) {
		GL40.glVertexAttribI3uiv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI4bv(int arg0, long arg1) {
		GL40.nglVertexAttribI4bv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4bv(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glVertexAttribI4bv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI4sv(int arg0, long arg1) {
		GL40.nglVertexAttribI4sv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4sv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glVertexAttribI4sv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4sv(int arg0, short[] arg1) {
		GL40.glVertexAttribI4sv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI4ubv(int arg0, long arg1) {
		GL40.nglVertexAttribI4ubv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4ubv(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glVertexAttribI4ubv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribI4usv(int arg0, long arg1) {
		GL40.nglVertexAttribI4usv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4usv(int arg0, short[] arg1) {
		GL40.glVertexAttribI4usv(arg0, arg1);
	}

	@Override
	public void glVertexAttribI4usv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glVertexAttribI4usv(arg0, arg1);
	}

	@Override
	public void nglBindFragDataLocation(int arg0, int arg1, long arg2) {
		GL40.nglBindFragDataLocation(arg0, arg1, arg2);
	}

	@Override
	public void glBindFragDataLocation(int arg0, int arg1, java.lang.CharSequence arg2) {
		GL40.glBindFragDataLocation(arg0, arg1, arg2);
	}

	@Override
	public void glBindFragDataLocation(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GL40.glBindFragDataLocation(arg0, arg1, arg2);
	}

	@Override
	public void glBeginConditionalRender(int arg0, int arg1) {
		GL40.glBeginConditionalRender(arg0, arg1);
	}

	@Override
	public void glEndConditionalRender() {
		GL40.glEndConditionalRender();
	}

	@Override
	public void glClampColor(int arg0, int arg1) {
		GL40.glClampColor(arg0, arg1);
	}

	@Override
	public void glFramebufferTexture1D(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glFramebufferTexture1D(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glFramebufferTexture3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
		GL40.glFramebufferTexture3D(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void nglTexParameterIiv(int arg0, int arg1, long arg2) {
		GL40.nglTexParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameterIiv(int arg0, int arg1, int[] arg2) {
		GL40.glTexParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameterIiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glTexParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameterIi(int arg0, int arg1, int arg2) {
		GL40.glTexParameterIi(arg0, arg1, arg2);
	}

	@Override
	public void nglTexParameterIuiv(int arg0, int arg1, long arg2) {
		GL40.nglTexParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameterIuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glTexParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameterIuiv(int arg0, int arg1, int[] arg2) {
		GL40.glTexParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameterIui(int arg0, int arg1, int arg2) {
		GL40.glTexParameterIui(arg0, arg1, arg2);
	}

	@Override
	public void nglGetTexParameterIiv(int arg0, int arg1, long arg2) {
		GL40.nglGetTexParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameterIiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetTexParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameterIiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetTexParameterIiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetTexParameterIi(int arg0, int arg1) {
		return GL40.glGetTexParameterIi(arg0, arg1);
	}

	@Override
	public void nglGetTexParameterIuiv(int arg0, int arg1, long arg2) {
		GL40.nglGetTexParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameterIuiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetTexParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameterIuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetTexParameterIuiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetTexParameterIui(int arg0, int arg1) {
		return GL40.glGetTexParameterIui(arg0, arg1);
	}

	@Override
	public void glColorMaski(int arg0, boolean arg1, boolean arg2, boolean arg3, boolean arg4) {
		GL40.glColorMaski(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglGetBooleani_v(int arg0, int arg1, long arg2) {
		GL40.nglGetBooleani_v(arg0, arg1, arg2);
	}

	@Override
	public void glGetBooleani_v(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GL40.glGetBooleani_v(arg0, arg1, arg2);
	}

	@Override
	public boolean glGetBooleani(int arg0, int arg1) {
		return GL40.glGetBooleani(arg0, arg1);
	}

	@Override
	public void glEnablei(int arg0, int arg1) {
		GL40.glEnablei(arg0, arg1);
	}

	@Override
	public void glDisablei(int arg0, int arg1) {
		GL40.glDisablei(arg0, arg1);
	}

	@Override
	public boolean glIsEnabledi(int arg0, int arg1) {
		return GL40.glIsEnabledi(arg0, arg1);
	}

	@Override
	public void nglUniformMatrix2x3fv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix2x3fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix2x3fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GL40.glUniformMatrix2x3fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix2x3fv(int arg0, boolean arg1, float[] arg2) {
		GL40.glUniformMatrix2x3fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix3x2fv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix3x2fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix3x2fv(int arg0, boolean arg1, float[] arg2) {
		GL40.glUniformMatrix3x2fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix3x2fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GL40.glUniformMatrix3x2fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix2x4fv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix2x4fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix2x4fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GL40.glUniformMatrix2x4fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix2x4fv(int arg0, boolean arg1, float[] arg2) {
		GL40.glUniformMatrix2x4fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix4x2fv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix4x2fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix4x2fv(int arg0, boolean arg1, float[] arg2) {
		GL40.glUniformMatrix4x2fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix4x2fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GL40.glUniformMatrix4x2fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix3x4fv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix3x4fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix3x4fv(int arg0, boolean arg1, float[] arg2) {
		GL40.glUniformMatrix3x4fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix3x4fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GL40.glUniformMatrix3x4fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix4x3fv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix4x3fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix4x3fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GL40.glUniformMatrix4x3fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix4x3fv(int arg0, boolean arg1, float[] arg2) {
		GL40.glUniformMatrix4x3fv(arg0, arg1, arg2);
	}

	@Override
	public void nglDrawBuffers(int arg0, long arg1) {
		GL40.nglDrawBuffers(arg0, arg1);
	}

	@Override
	public void glDrawBuffers(int arg0) {
		GL40.glDrawBuffers(arg0);
	}

	@Override
	public void glDrawBuffers(java.nio.IntBuffer arg0) {
		GL40.glDrawBuffers(arg0);
	}

	@Override
	public void glDrawBuffers(int[] arg0) {
		GL40.glDrawBuffers(arg0);
	}

	@Override
	public int glGetProgrami(int arg0, int arg1) {
		return GL40.glGetProgrami(arg0, arg1);
	}

	@Override
	public void glAttachShader(int arg0, int arg1) {
		GL40.glAttachShader(arg0, arg1);
	}

	@Override
	public void nglBindAttribLocation(int arg0, int arg1, long arg2) {
		GL40.nglBindAttribLocation(arg0, arg1, arg2);
	}

	@Override
	public void glBindAttribLocation(int arg0, int arg1, java.lang.CharSequence arg2) {
		GL40.glBindAttribLocation(arg0, arg1, arg2);
	}

	@Override
	public void glBindAttribLocation(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GL40.glBindAttribLocation(arg0, arg1, arg2);
	}

	@Override
	public void glBlendEquationSeparate(int arg0, int arg1) {
		GL40.glBlendEquationSeparate(arg0, arg1);
	}

	@Override
	public void glCompileShader(int arg0) {
		GL40.glCompileShader(arg0);
	}

	@Override
	public int glCreateProgram() {
		return GL40.glCreateProgram();
	}

	@Override
	public int glCreateShader(int arg0) {
		return GL40.glCreateShader(arg0);
	}

	@Override
	public void glDeleteProgram(int arg0) {
		GL40.glDeleteProgram(arg0);
	}

	@Override
	public void glDeleteShader(int arg0) {
		GL40.glDeleteShader(arg0);
	}

	@Override
	public void glDetachShader(int arg0, int arg1) {
		GL40.glDetachShader(arg0, arg1);
	}

	@Override
	public void glDisableVertexAttribArray(int arg0) {
		GL40.glDisableVertexAttribArray(arg0);
	}

	@Override
	public void glEnableVertexAttribArray(int arg0) {
		GL40.glEnableVertexAttribArray(arg0);
	}

	@Override
	public void nglGetActiveAttrib(int arg0, int arg1, int arg2, long arg3, long arg4, long arg5, long arg6) {
		GL40.nglGetActiveAttrib(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glGetActiveAttrib(int arg0, int arg1, int[] arg2, int[] arg3, int[] arg4, java.nio.ByteBuffer arg5) {
		GL40.glGetActiveAttrib(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public java.lang.String glGetActiveAttrib(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3) {
		return GL40.glGetActiveAttrib(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetActiveAttrib(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4) {
		return GL40.glGetActiveAttrib(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetActiveAttrib(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4, java.nio.ByteBuffer arg5) {
		GL40.glGetActiveAttrib(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void nglGetActiveUniform(int arg0, int arg1, int arg2, long arg3, long arg4, long arg5, long arg6) {
		GL40.nglGetActiveUniform(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glGetActiveUniform(int arg0, int arg1, int[] arg2, int[] arg3, int[] arg4, java.nio.ByteBuffer arg5) {
		GL40.glGetActiveUniform(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glGetActiveUniform(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4, java.nio.ByteBuffer arg5) {
		GL40.glGetActiveUniform(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public java.lang.String glGetActiveUniform(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.IntBuffer arg4) {
		return GL40.glGetActiveUniform(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public java.lang.String glGetActiveUniform(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3) {
		return GL40.glGetActiveUniform(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglGetAttachedShaders(int arg0, int arg1, long arg2, long arg3) {
		GL40.nglGetAttachedShaders(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetAttachedShaders(int arg0, java.nio.IntBuffer arg1, java.nio.IntBuffer arg2) {
		GL40.glGetAttachedShaders(arg0, arg1, arg2);
	}

	@Override
	public void glGetAttachedShaders(int arg0, int[] arg1, int[] arg2) {
		GL40.glGetAttachedShaders(arg0, arg1, arg2);
	}

	@Override
	public int nglGetAttribLocation(int arg0, long arg1) {
		return GL40.nglGetAttribLocation(arg0, arg1);
	}

	@Override
	public int glGetAttribLocation(int arg0, java.lang.CharSequence arg1) {
		return GL40.glGetAttribLocation(arg0, arg1);
	}

	@Override
	public int glGetAttribLocation(int arg0, java.nio.ByteBuffer arg1) {
		return GL40.glGetAttribLocation(arg0, arg1);
	}

	@Override
	public void nglGetProgramiv(int arg0, int arg1, long arg2) {
		GL40.nglGetProgramiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetProgramiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetProgramiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetProgramiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetProgramiv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetProgramInfoLog(int arg0, int arg1, long arg2, long arg3) {
		GL40.nglGetProgramInfoLog(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetProgramInfoLog(int arg0) {
		return GL40.glGetProgramInfoLog(arg0);
	}

	@Override
	public java.lang.String glGetProgramInfoLog(int arg0, int arg1) {
		return GL40.glGetProgramInfoLog(arg0, arg1);
	}

	@Override
	public void glGetProgramInfoLog(int arg0, int[] arg1, java.nio.ByteBuffer arg2) {
		GL40.glGetProgramInfoLog(arg0, arg1, arg2);
	}

	@Override
	public void glGetProgramInfoLog(int arg0, java.nio.IntBuffer arg1, java.nio.ByteBuffer arg2) {
		GL40.glGetProgramInfoLog(arg0, arg1, arg2);
	}

	@Override
	public void nglGetShaderiv(int arg0, int arg1, long arg2) {
		GL40.nglGetShaderiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetShaderiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetShaderiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetShaderiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetShaderiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetShaderi(int arg0, int arg1) {
		return GL40.glGetShaderi(arg0, arg1);
	}

	@Override
	public void nglGetShaderInfoLog(int arg0, int arg1, long arg2, long arg3) {
		GL40.nglGetShaderInfoLog(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetShaderInfoLog(int arg0, java.nio.IntBuffer arg1, java.nio.ByteBuffer arg2) {
		GL40.glGetShaderInfoLog(arg0, arg1, arg2);
	}

	@Override
	public java.lang.String glGetShaderInfoLog(int arg0, int arg1) {
		return GL40.glGetShaderInfoLog(arg0, arg1);
	}

	@Override
	public java.lang.String glGetShaderInfoLog(int arg0) {
		return GL40.glGetShaderInfoLog(arg0);
	}

	@Override
	public void glGetShaderInfoLog(int arg0, int[] arg1, java.nio.ByteBuffer arg2) {
		GL40.glGetShaderInfoLog(arg0, arg1, arg2);
	}

	@Override
	public void nglGetShaderSource(int arg0, int arg1, long arg2, long arg3) {
		GL40.nglGetShaderSource(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.lang.String glGetShaderSource(int arg0) {
		return GL40.glGetShaderSource(arg0);
	}

	@Override
	public java.lang.String glGetShaderSource(int arg0, int arg1) {
		return GL40.glGetShaderSource(arg0, arg1);
	}

	@Override
	public void glGetShaderSource(int arg0, java.nio.IntBuffer arg1, java.nio.ByteBuffer arg2) {
		GL40.glGetShaderSource(arg0, arg1, arg2);
	}

	@Override
	public void glGetShaderSource(int arg0, int[] arg1, java.nio.ByteBuffer arg2) {
		GL40.glGetShaderSource(arg0, arg1, arg2);
	}

	@Override
	public void nglGetUniformfv(int arg0, int arg1, long arg2) {
		GL40.nglGetUniformfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetUniformfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformfv(int arg0, int arg1, float[] arg2) {
		GL40.glGetUniformfv(arg0, arg1, arg2);
	}

	@Override
	public float glGetUniformf(int arg0, int arg1) {
		return GL40.glGetUniformf(arg0, arg1);
	}

	@Override
	public void nglGetUniformiv(int arg0, int arg1, long arg2) {
		GL40.nglGetUniformiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetUniformiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetUniformiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetUniformiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetUniformi(int arg0, int arg1) {
		return GL40.glGetUniformi(arg0, arg1);
	}

	@Override
	public int nglGetUniformLocation(int arg0, long arg1) {
		return GL40.nglGetUniformLocation(arg0, arg1);
	}

	@Override
	public int glGetUniformLocation(int arg0, java.lang.CharSequence arg1) {
		return GL40.glGetUniformLocation(arg0, arg1);
	}

	@Override
	public int glGetUniformLocation(int arg0, java.nio.ByteBuffer arg1) {
		return GL40.glGetUniformLocation(arg0, arg1);
	}

	@Override
	public void nglGetVertexAttribfv(int arg0, int arg1, long arg2) {
		GL40.nglGetVertexAttribfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetVertexAttribfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribfv(int arg0, int arg1, float[] arg2) {
		GL40.glGetVertexAttribfv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetVertexAttribiv(int arg0, int arg1, long arg2) {
		GL40.nglGetVertexAttribiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetVertexAttribiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetVertexAttribiv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetVertexAttribPointerv(int arg0, int arg1, long arg2) {
		GL40.nglGetVertexAttribPointerv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribPointerv(int arg0, int arg1, org.lwjgl.PointerBuffer arg2) {
		GL40.glGetVertexAttribPointerv(arg0, arg1, arg2);
	}

	@Override
	public long glGetVertexAttribPointer(int arg0, int arg1) {
		return GL40.glGetVertexAttribPointer(arg0, arg1);
	}

	@Override
	public boolean glIsProgram(int arg0) {
		return GL40.glIsProgram(arg0);
	}

	@Override
	public boolean glIsShader(int arg0) {
		return GL40.glIsShader(arg0);
	}

	@Override
	public void glLinkProgram(int arg0) {
		GL40.glLinkProgram(arg0);
	}

	@Override
	public void nglShaderSource(int arg0, int arg1, long arg2, long arg3) {
		GL40.nglShaderSource(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glShaderSource(int arg0, java.lang.CharSequence arg1) {
		GL40.glShaderSource(arg0, arg1);
	}

	@Override
	public void glShaderSource(int arg0, org.lwjgl.PointerBuffer arg1, int[] arg2) {
		GL40.glShaderSource(arg0, arg1, arg2);
	}

	@Override
	public void glShaderSource(int arg0, org.lwjgl.PointerBuffer arg1, java.nio.IntBuffer arg2) {
		GL40.glShaderSource(arg0, arg1, arg2);
	}

	@Override
	public void glShaderSource(int arg0, java.lang.CharSequence... arg1) {
		GL40.glShaderSource(arg0, arg1);
	}

	@Override
	public void glStencilFuncSeparate(int arg0, int arg1, int arg2, int arg3) {
		GL40.glStencilFuncSeparate(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glStencilMaskSeparate(int arg0, int arg1) {
		GL40.glStencilMaskSeparate(arg0, arg1);
	}

	@Override
	public void glStencilOpSeparate(int arg0, int arg1, int arg2, int arg3) {
		GL40.glStencilOpSeparate(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniform1f(int arg0, float arg1) {
		GL40.glUniform1f(arg0, arg1);
	}

	@Override
	public void nglUniform1fv(int arg0, int arg1, long arg2) {
		GL40.nglUniform1fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform1fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glUniform1fv(arg0, arg1);
	}

	@Override
	public void glUniform1fv(int arg0, float[] arg1) {
		GL40.glUniform1fv(arg0, arg1);
	}

	@Override
	public void glUniform1i(int arg0, int arg1) {
		GL40.glUniform1i(arg0, arg1);
	}

	@Override
	public void nglUniform1iv(int arg0, int arg1, long arg2) {
		GL40.nglUniform1iv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform1iv(int arg0, int[] arg1) {
		GL40.glUniform1iv(arg0, arg1);
	}

	@Override
	public void glUniform1iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glUniform1iv(arg0, arg1);
	}

	@Override
	public void glUniform2f(int arg0, float arg1, float arg2) {
		GL40.glUniform2f(arg0, arg1, arg2);
	}

	@Override
	public void nglUniform2fv(int arg0, int arg1, long arg2) {
		GL40.nglUniform2fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform2fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glUniform2fv(arg0, arg1);
	}

	@Override
	public void glUniform2fv(int arg0, float[] arg1) {
		GL40.glUniform2fv(arg0, arg1);
	}

	@Override
	public void glUniform2i(int arg0, int arg1, int arg2) {
		GL40.glUniform2i(arg0, arg1, arg2);
	}

	@Override
	public void nglUniform2iv(int arg0, int arg1, long arg2) {
		GL40.nglUniform2iv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform2iv(int arg0, int[] arg1) {
		GL40.glUniform2iv(arg0, arg1);
	}

	@Override
	public void glUniform2iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glUniform2iv(arg0, arg1);
	}

	@Override
	public void glUniform3f(int arg0, float arg1, float arg2, float arg3) {
		GL40.glUniform3f(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglUniform3fv(int arg0, int arg1, long arg2) {
		GL40.nglUniform3fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform3fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glUniform3fv(arg0, arg1);
	}

	@Override
	public void glUniform3fv(int arg0, float[] arg1) {
		GL40.glUniform3fv(arg0, arg1);
	}

	@Override
	public void glUniform3i(int arg0, int arg1, int arg2, int arg3) {
		GL40.glUniform3i(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglUniform3iv(int arg0, int arg1, long arg2) {
		GL40.nglUniform3iv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform3iv(int arg0, int[] arg1) {
		GL40.glUniform3iv(arg0, arg1);
	}

	@Override
	public void glUniform3iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glUniform3iv(arg0, arg1);
	}

	@Override
	public void glUniform4f(int arg0, float arg1, float arg2, float arg3, float arg4) {
		GL40.glUniform4f(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglUniform4fv(int arg0, int arg1, long arg2) {
		GL40.nglUniform4fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform4fv(int arg0, float[] arg1) {
		GL40.glUniform4fv(arg0, arg1);
	}

	@Override
	public void glUniform4fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glUniform4fv(arg0, arg1);
	}

	@Override
	public void glUniform4i(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glUniform4i(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglUniform4iv(int arg0, int arg1, long arg2) {
		GL40.nglUniform4iv(arg0, arg1, arg2);
	}

	@Override
	public void glUniform4iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glUniform4iv(arg0, arg1);
	}

	@Override
	public void glUniform4iv(int arg0, int[] arg1) {
		GL40.glUniform4iv(arg0, arg1);
	}

	@Override
	public void nglUniformMatrix2fv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix2fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix2fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GL40.glUniformMatrix2fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix2fv(int arg0, boolean arg1, float[] arg2) {
		GL40.glUniformMatrix2fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix3fv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix3fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix3fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GL40.glUniformMatrix3fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix3fv(int arg0, boolean arg1, float[] arg2) {
		GL40.glUniformMatrix3fv(arg0, arg1, arg2);
	}

	@Override
	public void nglUniformMatrix4fv(int arg0, int arg1, boolean arg2, long arg3) {
		GL40.nglUniformMatrix4fv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glUniformMatrix4fv(int arg0, boolean arg1, float[] arg2) {
		GL40.glUniformMatrix4fv(arg0, arg1, arg2);
	}

	@Override
	public void glUniformMatrix4fv(int arg0, boolean arg1, java.nio.FloatBuffer arg2) {
		GL40.glUniformMatrix4fv(arg0, arg1, arg2);
	}

	@Override
	public void glUseProgram(int arg0) {
		GL40.glUseProgram(arg0);
	}

	@Override
	public void glValidateProgram(int arg0) {
		GL40.glValidateProgram(arg0);
	}

	@Override
	public void glVertexAttrib1f(int arg0, float arg1) {
		GL40.glVertexAttrib1f(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib1fv(int arg0, long arg1) {
		GL40.nglVertexAttrib1fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib1fv(int arg0, float[] arg1) {
		GL40.glVertexAttrib1fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib1fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glVertexAttrib1fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2f(int arg0, float arg1, float arg2) {
		GL40.glVertexAttrib2f(arg0, arg1, arg2);
	}

	@Override
	public void nglVertexAttrib2fv(int arg0, long arg1) {
		GL40.nglVertexAttrib2fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glVertexAttrib2fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2fv(int arg0, float[] arg1) {
		GL40.glVertexAttrib2fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib3f(int arg0, float arg1, float arg2, float arg3) {
		GL40.glVertexAttrib3f(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglVertexAttrib3fv(int arg0, long arg1) {
		GL40.nglVertexAttrib3fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib3fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glVertexAttrib3fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib3fv(int arg0, float[] arg1) {
		GL40.glVertexAttrib3fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4f(int arg0, float arg1, float arg2, float arg3, float arg4) {
		GL40.glVertexAttrib4f(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglVertexAttrib4fv(int arg0, long arg1) {
		GL40.nglVertexAttrib4fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glVertexAttrib4fv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4fv(int arg0, float[] arg1) {
		GL40.glVertexAttrib4fv(arg0, arg1);
	}

	@Override
	public void nglVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, long arg5) {
		GL40.nglVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, java.nio.ShortBuffer arg5) {
		GL40.glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, java.nio.FloatBuffer arg5) {
		GL40.glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, java.nio.ByteBuffer arg5) {
		GL40.glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, java.nio.IntBuffer arg5) {
		GL40.glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttribPointer(int arg0, int arg1, int arg2, boolean arg3, int arg4, long arg5) {
		GL40.glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glVertexAttrib1s(int arg0, short arg1) {
		GL40.glVertexAttrib1s(arg0, arg1);
	}

	@Override
	public void glVertexAttrib1d(int arg0, double arg1) {
		GL40.glVertexAttrib1d(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2s(int arg0, short arg1, short arg2) {
		GL40.glVertexAttrib2s(arg0, arg1, arg2);
	}

	@Override
	public void glVertexAttrib2d(int arg0, double arg1, double arg2) {
		GL40.glVertexAttrib2d(arg0, arg1, arg2);
	}

	@Override
	public void glVertexAttrib3s(int arg0, short arg1, short arg2, short arg3) {
		GL40.glVertexAttrib3s(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttrib3d(int arg0, double arg1, double arg2, double arg3) {
		GL40.glVertexAttrib3d(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexAttrib4s(int arg0, short arg1, short arg2, short arg3, short arg4) {
		GL40.glVertexAttrib4s(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttrib4d(int arg0, double arg1, double arg2, double arg3, double arg4) {
		GL40.glVertexAttrib4d(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glVertexAttrib4Nub(int arg0, byte arg1, byte arg2, byte arg3, byte arg4) {
		GL40.glVertexAttrib4Nub(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglVertexAttrib1sv(int arg0, long arg1) {
		GL40.nglVertexAttrib1sv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib1sv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glVertexAttrib1sv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib1sv(int arg0, short[] arg1) {
		GL40.glVertexAttrib1sv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib1dv(int arg0, long arg1) {
		GL40.nglVertexAttrib1dv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib1dv(int arg0, double[] arg1) {
		GL40.glVertexAttrib1dv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib1dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glVertexAttrib1dv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib2sv(int arg0, long arg1) {
		GL40.nglVertexAttrib2sv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2sv(int arg0, short[] arg1) {
		GL40.glVertexAttrib2sv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2sv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glVertexAttrib2sv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib2dv(int arg0, long arg1) {
		GL40.nglVertexAttrib2dv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2dv(int arg0, double[] arg1) {
		GL40.glVertexAttrib2dv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib2dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glVertexAttrib2dv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib3sv(int arg0, long arg1) {
		GL40.nglVertexAttrib3sv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib3sv(int arg0, short[] arg1) {
		GL40.glVertexAttrib3sv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib3sv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glVertexAttrib3sv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib3dv(int arg0, long arg1) {
		GL40.nglVertexAttrib3dv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib3dv(int arg0, double[] arg1) {
		GL40.glVertexAttrib3dv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib3dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glVertexAttrib3dv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4sv(int arg0, long arg1) {
		GL40.nglVertexAttrib4sv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4sv(int arg0, short[] arg1) {
		GL40.glVertexAttrib4sv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4sv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glVertexAttrib4sv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4dv(int arg0, long arg1) {
		GL40.nglVertexAttrib4dv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glVertexAttrib4dv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4dv(int arg0, double[] arg1) {
		GL40.glVertexAttrib4dv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4iv(int arg0, long arg1) {
		GL40.nglVertexAttrib4iv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttrib4iv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4iv(int arg0, int[] arg1) {
		GL40.glVertexAttrib4iv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4bv(int arg0, long arg1) {
		GL40.nglVertexAttrib4bv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4bv(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glVertexAttrib4bv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4ubv(int arg0, long arg1) {
		GL40.nglVertexAttrib4ubv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4ubv(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glVertexAttrib4ubv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4usv(int arg0, long arg1) {
		GL40.nglVertexAttrib4usv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4usv(int arg0, short[] arg1) {
		GL40.glVertexAttrib4usv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4usv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glVertexAttrib4usv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4uiv(int arg0, long arg1) {
		GL40.nglVertexAttrib4uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4uiv(int arg0, int[] arg1) {
		GL40.glVertexAttrib4uiv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4uiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttrib4uiv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4Nbv(int arg0, long arg1) {
		GL40.nglVertexAttrib4Nbv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4Nbv(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glVertexAttrib4Nbv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4Nsv(int arg0, long arg1) {
		GL40.nglVertexAttrib4Nsv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4Nsv(int arg0, short[] arg1) {
		GL40.glVertexAttrib4Nsv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4Nsv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glVertexAttrib4Nsv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4Niv(int arg0, long arg1) {
		GL40.nglVertexAttrib4Niv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4Niv(int arg0, int[] arg1) {
		GL40.glVertexAttrib4Niv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4Niv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttrib4Niv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4Nubv(int arg0, long arg1) {
		GL40.nglVertexAttrib4Nubv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4Nubv(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glVertexAttrib4Nubv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4Nusv(int arg0, long arg1) {
		GL40.nglVertexAttrib4Nusv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4Nusv(int arg0, short[] arg1) {
		GL40.glVertexAttrib4Nusv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4Nusv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glVertexAttrib4Nusv(arg0, arg1);
	}

	@Override
	public void nglVertexAttrib4Nuiv(int arg0, long arg1) {
		GL40.nglVertexAttrib4Nuiv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4Nuiv(int arg0, int[] arg1) {
		GL40.glVertexAttrib4Nuiv(arg0, arg1);
	}

	@Override
	public void glVertexAttrib4Nuiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glVertexAttrib4Nuiv(arg0, arg1);
	}

	@Override
	public int glGetVertexAttribi(int arg0, int arg1) {
		return GL40.glGetVertexAttribi(arg0, arg1);
	}

	@Override
	public void nglGetVertexAttribdv(int arg0, int arg1, long arg2) {
		GL40.nglGetVertexAttribdv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribdv(int arg0, int arg1, double[] arg2) {
		GL40.glGetVertexAttribdv(arg0, arg1, arg2);
	}

	@Override
	public void glGetVertexAttribdv(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		GL40.glGetVertexAttribdv(arg0, arg1, arg2);
	}

	@Override
	public void nglGenQueries(int arg0, long arg1) {
		GL40.nglGenQueries(arg0, arg1);
	}

	@Override
	public void glGenQueries(java.nio.IntBuffer arg0) {
		GL40.glGenQueries(arg0);
	}

	@Override
	public int glGenQueries() {
		return GL40.glGenQueries();
	}

	@Override
	public void glGenQueries(int[] arg0) {
		GL40.glGenQueries(arg0);
	}

	@Override
	public void nglDeleteQueries(int arg0, long arg1) {
		GL40.nglDeleteQueries(arg0, arg1);
	}

	@Override
	public void glDeleteQueries(int arg0) {
		GL40.glDeleteQueries(arg0);
	}

	@Override
	public void glDeleteQueries(int[] arg0) {
		GL40.glDeleteQueries(arg0);
	}

	@Override
	public void glDeleteQueries(java.nio.IntBuffer arg0) {
		GL40.glDeleteQueries(arg0);
	}

	@Override
	public boolean glIsQuery(int arg0) {
		return GL40.glIsQuery(arg0);
	}

	@Override
	public void glBeginQuery(int arg0, int arg1) {
		GL40.glBeginQuery(arg0, arg1);
	}

	@Override
	public void glEndQuery(int arg0) {
		GL40.glEndQuery(arg0);
	}

	@Override
	public void nglGetQueryiv(int arg0, int arg1, long arg2) {
		GL40.nglGetQueryiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetQueryiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetQueryiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetQueryi(int arg0, int arg1) {
		return GL40.glGetQueryi(arg0, arg1);
	}

	@Override
	public void nglGetQueryObjectuiv(int arg0, int arg1, long arg2) {
		GL40.nglGetQueryObjectuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectuiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetQueryObjectuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectuiv(int arg0, int arg1, long arg2) {
		GL40.glGetQueryObjectuiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectuiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetQueryObjectuiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetQueryObjectui(int arg0, int arg1) {
		return GL40.glGetQueryObjectui(arg0, arg1);
	}

	@Override
	public boolean glUnmapBuffer(int arg0) {
		return GL40.glUnmapBuffer(arg0);
	}

	@Override
	public void nglGetBufferPointerv(int arg0, int arg1, long arg2) {
		GL40.nglGetBufferPointerv(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferPointerv(int arg0, int arg1, org.lwjgl.PointerBuffer arg2) {
		GL40.glGetBufferPointerv(arg0, arg1, arg2);
	}

	@Override
	public long glGetBufferPointer(int arg0, int arg1) {
		return GL40.glGetBufferPointer(arg0, arg1);
	}

	@Override
	public void glBindBuffer(int arg0, int arg1) {
		GL40.glBindBuffer(arg0, arg1);
	}

	@Override
	public void nglBufferData(int arg0, long arg1, long arg2, int arg3) {
		GL40.nglBufferData(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glBufferData(int arg0, float[] arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, long[] arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, int[] arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, short[] arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, java.nio.ShortBuffer arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, java.nio.IntBuffer arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, java.nio.LongBuffer arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, java.nio.FloatBuffer arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, java.nio.DoubleBuffer arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, double[] arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, long arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferData(int arg0, java.nio.ByteBuffer arg1, int arg2) {
		GL40.glBufferData(arg0, arg1, arg2);
	}

	@Override
	public void nglBufferSubData(int arg0, long arg1, long arg2, long arg3) {
		GL40.nglBufferSubData(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.ByteBuffer arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, double[] arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.DoubleBuffer arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, float[] arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, long[] arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, int[] arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, short[] arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.ShortBuffer arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.IntBuffer arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.FloatBuffer arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glBufferSubData(int arg0, long arg1, java.nio.LongBuffer arg2) {
		GL40.glBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void nglDeleteBuffers(int arg0, long arg1) {
		GL40.nglDeleteBuffers(arg0, arg1);
	}

	@Override
	public void glDeleteBuffers(int[] arg0) {
		GL40.glDeleteBuffers(arg0);
	}

	@Override
	public void glDeleteBuffers(int arg0) {
		GL40.glDeleteBuffers(arg0);
	}

	@Override
	public void glDeleteBuffers(java.nio.IntBuffer arg0) {
		GL40.glDeleteBuffers(arg0);
	}

	@Override
	public void nglGenBuffers(int arg0, long arg1) {
		GL40.nglGenBuffers(arg0, arg1);
	}

	@Override
	public void glGenBuffers(int[] arg0) {
		GL40.glGenBuffers(arg0);
	}

	@Override
	public int glGenBuffers() {
		return GL40.glGenBuffers();
	}

	@Override
	public void glGenBuffers(java.nio.IntBuffer arg0) {
		GL40.glGenBuffers(arg0);
	}

	@Override
	public void nglGetBufferParameteriv(int arg0, int arg1, long arg2) {
		GL40.nglGetBufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetBufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferParameteriv(int arg0, int arg1, int[] arg2) {
		GL40.glGetBufferParameteriv(arg0, arg1, arg2);
	}

	@Override
	public int glGetBufferParameteri(int arg0, int arg1) {
		return GL40.glGetBufferParameteri(arg0, arg1);
	}

	@Override
	public boolean glIsBuffer(int arg0) {
		return GL40.glIsBuffer(arg0);
	}

	@Override
	public void nglGetBufferSubData(int arg0, long arg1, long arg2, long arg3) {
		GL40.nglGetBufferSubData(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, short[] arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.ByteBuffer arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.ShortBuffer arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, double[] arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, float[] arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, long[] arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, int[] arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.DoubleBuffer arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.LongBuffer arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public void glGetBufferSubData(int arg0, long arg1, java.nio.IntBuffer arg2) {
		GL40.glGetBufferSubData(arg0, arg1, arg2);
	}

	@Override
	public long nglMapBuffer(int arg0, int arg1) {
		return GL40.nglMapBuffer(arg0, arg1);
	}

	@Override
	public java.nio.ByteBuffer glMapBuffer(int arg0, int arg1, long arg2, java.nio.ByteBuffer arg3) {
		return GL40.glMapBuffer(arg0, arg1, arg2, arg3);
	}

	@Override
	public java.nio.ByteBuffer glMapBuffer(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		return GL40.glMapBuffer(arg0, arg1, arg2);
	}

	@Override
	public java.nio.ByteBuffer glMapBuffer(int arg0, int arg1) {
		return GL40.glMapBuffer(arg0, arg1);
	}

	@Override
	public void nglGetQueryObjectiv(int arg0, int arg1, long arg2) {
		GL40.nglGetQueryObjectiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetQueryObjectiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetQueryObjectiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetQueryObjectiv(int arg0, int arg1, long arg2) {
		GL40.glGetQueryObjectiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetQueryObjecti(int arg0, int arg1) {
		return GL40.glGetQueryObjecti(arg0, arg1);
	}

	@Override
	public void glBlendColor(float arg0, float arg1, float arg2, float arg3) {
		GL40.glBlendColor(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glBlendEquation(int arg0) {
		GL40.glBlendEquation(arg0);
	}

	@Override
	public void glBlendFuncSeparate(int arg0, int arg1, int arg2, int arg3) {
		GL40.glBlendFuncSeparate(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glFogCoordf(float arg0) {
		GL40.glFogCoordf(arg0);
	}

	@Override
	public void glFogCoordd(double arg0) {
		GL40.glFogCoordd(arg0);
	}

	@Override
	public void nglFogCoordfv(long arg0) {
		GL40.nglFogCoordfv(arg0);
	}

	@Override
	public void glFogCoordfv(float[] arg0) {
		GL40.glFogCoordfv(arg0);
	}

	@Override
	public void glFogCoordfv(java.nio.FloatBuffer arg0) {
		GL40.glFogCoordfv(arg0);
	}

	@Override
	public void nglFogCoorddv(long arg0) {
		GL40.nglFogCoorddv(arg0);
	}

	@Override
	public void glFogCoorddv(double[] arg0) {
		GL40.glFogCoorddv(arg0);
	}

	@Override
	public void glFogCoorddv(java.nio.DoubleBuffer arg0) {
		GL40.glFogCoorddv(arg0);
	}

	@Override
	public void nglFogCoordPointer(int arg0, int arg1, long arg2) {
		GL40.nglFogCoordPointer(arg0, arg1, arg2);
	}

	@Override
	public void glFogCoordPointer(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glFogCoordPointer(arg0, arg1, arg2);
	}

	@Override
	public void glFogCoordPointer(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GL40.glFogCoordPointer(arg0, arg1, arg2);
	}

	@Override
	public void glFogCoordPointer(int arg0, int arg1, long arg2) {
		GL40.glFogCoordPointer(arg0, arg1, arg2);
	}

	@Override
	public void glFogCoordPointer(int arg0, int arg1, java.nio.ShortBuffer arg2) {
		GL40.glFogCoordPointer(arg0, arg1, arg2);
	}

	@Override
	public void nglMultiDrawArrays(int arg0, long arg1, long arg2, int arg3) {
		GL40.nglMultiDrawArrays(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glMultiDrawArrays(int arg0, int[] arg1, int[] arg2) {
		GL40.glMultiDrawArrays(arg0, arg1, arg2);
	}

	@Override
	public void glMultiDrawArrays(int arg0, java.nio.IntBuffer arg1, java.nio.IntBuffer arg2) {
		GL40.glMultiDrawArrays(arg0, arg1, arg2);
	}

	@Override
	public void nglMultiDrawElements(int arg0, long arg1, int arg2, long arg3, int arg4) {
		GL40.nglMultiDrawElements(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glMultiDrawElements(int arg0, java.nio.IntBuffer arg1, int arg2, org.lwjgl.PointerBuffer arg3) {
		GL40.glMultiDrawElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glMultiDrawElements(int arg0, int[] arg1, int arg2, org.lwjgl.PointerBuffer arg3) {
		GL40.glMultiDrawElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glPointParameterf(int arg0, float arg1) {
		GL40.glPointParameterf(arg0, arg1);
	}

	@Override
	public void glPointParameteri(int arg0, int arg1) {
		GL40.glPointParameteri(arg0, arg1);
	}

	@Override
	public void nglPointParameterfv(int arg0, long arg1) {
		GL40.nglPointParameterfv(arg0, arg1);
	}

	@Override
	public void glPointParameterfv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glPointParameterfv(arg0, arg1);
	}

	@Override
	public void glPointParameterfv(int arg0, float[] arg1) {
		GL40.glPointParameterfv(arg0, arg1);
	}

	@Override
	public void nglPointParameteriv(int arg0, long arg1) {
		GL40.nglPointParameteriv(arg0, arg1);
	}

	@Override
	public void glPointParameteriv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glPointParameteriv(arg0, arg1);
	}

	@Override
	public void glPointParameteriv(int arg0, int[] arg1) {
		GL40.glPointParameteriv(arg0, arg1);
	}

	@Override
	public void glSecondaryColor3b(byte arg0, byte arg1, byte arg2) {
		GL40.glSecondaryColor3b(arg0, arg1, arg2);
	}

	@Override
	public void glSecondaryColor3s(short arg0, short arg1, short arg2) {
		GL40.glSecondaryColor3s(arg0, arg1, arg2);
	}

	@Override
	public void glSecondaryColor3i(int arg0, int arg1, int arg2) {
		GL40.glSecondaryColor3i(arg0, arg1, arg2);
	}

	@Override
	public void glSecondaryColor3f(float arg0, float arg1, float arg2) {
		GL40.glSecondaryColor3f(arg0, arg1, arg2);
	}

	@Override
	public void glSecondaryColor3d(double arg0, double arg1, double arg2) {
		GL40.glSecondaryColor3d(arg0, arg1, arg2);
	}

	@Override
	public void glSecondaryColor3ub(byte arg0, byte arg1, byte arg2) {
		GL40.glSecondaryColor3ub(arg0, arg1, arg2);
	}

	@Override
	public void glSecondaryColor3us(short arg0, short arg1, short arg2) {
		GL40.glSecondaryColor3us(arg0, arg1, arg2);
	}

	@Override
	public void glSecondaryColor3ui(int arg0, int arg1, int arg2) {
		GL40.glSecondaryColor3ui(arg0, arg1, arg2);
	}

	@Override
	public void nglSecondaryColor3bv(long arg0) {
		GL40.nglSecondaryColor3bv(arg0);
	}

	@Override
	public void glSecondaryColor3bv(java.nio.ByteBuffer arg0) {
		GL40.glSecondaryColor3bv(arg0);
	}

	@Override
	public void nglSecondaryColor3sv(long arg0) {
		GL40.nglSecondaryColor3sv(arg0);
	}

	@Override
	public void glSecondaryColor3sv(short[] arg0) {
		GL40.glSecondaryColor3sv(arg0);
	}

	@Override
	public void glSecondaryColor3sv(java.nio.ShortBuffer arg0) {
		GL40.glSecondaryColor3sv(arg0);
	}

	@Override
	public void nglSecondaryColor3iv(long arg0) {
		GL40.nglSecondaryColor3iv(arg0);
	}

	@Override
	public void glSecondaryColor3iv(int[] arg0) {
		GL40.glSecondaryColor3iv(arg0);
	}

	@Override
	public void glSecondaryColor3iv(java.nio.IntBuffer arg0) {
		GL40.glSecondaryColor3iv(arg0);
	}

	@Override
	public void nglSecondaryColor3fv(long arg0) {
		GL40.nglSecondaryColor3fv(arg0);
	}

	@Override
	public void glSecondaryColor3fv(java.nio.FloatBuffer arg0) {
		GL40.glSecondaryColor3fv(arg0);
	}

	@Override
	public void glSecondaryColor3fv(float[] arg0) {
		GL40.glSecondaryColor3fv(arg0);
	}

	@Override
	public void nglSecondaryColor3dv(long arg0) {
		GL40.nglSecondaryColor3dv(arg0);
	}

	@Override
	public void glSecondaryColor3dv(double[] arg0) {
		GL40.glSecondaryColor3dv(arg0);
	}

	@Override
	public void glSecondaryColor3dv(java.nio.DoubleBuffer arg0) {
		GL40.glSecondaryColor3dv(arg0);
	}

	@Override
	public void nglSecondaryColor3ubv(long arg0) {
		GL40.nglSecondaryColor3ubv(arg0);
	}

	@Override
	public void glSecondaryColor3ubv(java.nio.ByteBuffer arg0) {
		GL40.glSecondaryColor3ubv(arg0);
	}

	@Override
	public void nglSecondaryColor3usv(long arg0) {
		GL40.nglSecondaryColor3usv(arg0);
	}

	@Override
	public void glSecondaryColor3usv(java.nio.ShortBuffer arg0) {
		GL40.glSecondaryColor3usv(arg0);
	}

	@Override
	public void glSecondaryColor3usv(short[] arg0) {
		GL40.glSecondaryColor3usv(arg0);
	}

	@Override
	public void nglSecondaryColor3uiv(long arg0) {
		GL40.nglSecondaryColor3uiv(arg0);
	}

	@Override
	public void glSecondaryColor3uiv(int[] arg0) {
		GL40.glSecondaryColor3uiv(arg0);
	}

	@Override
	public void glSecondaryColor3uiv(java.nio.IntBuffer arg0) {
		GL40.glSecondaryColor3uiv(arg0);
	}

	@Override
	public void nglSecondaryColorPointer(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglSecondaryColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glSecondaryColorPointer(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glSecondaryColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glSecondaryColorPointer(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3) {
		GL40.glSecondaryColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glSecondaryColorPointer(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		GL40.glSecondaryColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glSecondaryColorPointer(int arg0, int arg1, int arg2, java.nio.FloatBuffer arg3) {
		GL40.glSecondaryColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glSecondaryColorPointer(int arg0, int arg1, int arg2, long arg3) {
		GL40.glSecondaryColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glWindowPos2i(int arg0, int arg1) {
		GL40.glWindowPos2i(arg0, arg1);
	}

	@Override
	public void glWindowPos2s(short arg0, short arg1) {
		GL40.glWindowPos2s(arg0, arg1);
	}

	@Override
	public void glWindowPos2f(float arg0, float arg1) {
		GL40.glWindowPos2f(arg0, arg1);
	}

	@Override
	public void glWindowPos2d(double arg0, double arg1) {
		GL40.glWindowPos2d(arg0, arg1);
	}

	@Override
	public void nglWindowPos2iv(long arg0) {
		GL40.nglWindowPos2iv(arg0);
	}

	@Override
	public void glWindowPos2iv(java.nio.IntBuffer arg0) {
		GL40.glWindowPos2iv(arg0);
	}

	@Override
	public void glWindowPos2iv(int[] arg0) {
		GL40.glWindowPos2iv(arg0);
	}

	@Override
	public void nglWindowPos2sv(long arg0) {
		GL40.nglWindowPos2sv(arg0);
	}

	@Override
	public void glWindowPos2sv(java.nio.ShortBuffer arg0) {
		GL40.glWindowPos2sv(arg0);
	}

	@Override
	public void glWindowPos2sv(short[] arg0) {
		GL40.glWindowPos2sv(arg0);
	}

	@Override
	public void nglWindowPos2fv(long arg0) {
		GL40.nglWindowPos2fv(arg0);
	}

	@Override
	public void glWindowPos2fv(java.nio.FloatBuffer arg0) {
		GL40.glWindowPos2fv(arg0);
	}

	@Override
	public void glWindowPos2fv(float[] arg0) {
		GL40.glWindowPos2fv(arg0);
	}

	@Override
	public void nglWindowPos2dv(long arg0) {
		GL40.nglWindowPos2dv(arg0);
	}

	@Override
	public void glWindowPos2dv(java.nio.DoubleBuffer arg0) {
		GL40.glWindowPos2dv(arg0);
	}

	@Override
	public void glWindowPos2dv(double[] arg0) {
		GL40.glWindowPos2dv(arg0);
	}

	@Override
	public void glWindowPos3i(int arg0, int arg1, int arg2) {
		GL40.glWindowPos3i(arg0, arg1, arg2);
	}

	@Override
	public void glWindowPos3s(short arg0, short arg1, short arg2) {
		GL40.glWindowPos3s(arg0, arg1, arg2);
	}

	@Override
	public void glWindowPos3f(float arg0, float arg1, float arg2) {
		GL40.glWindowPos3f(arg0, arg1, arg2);
	}

	@Override
	public void glWindowPos3d(double arg0, double arg1, double arg2) {
		GL40.glWindowPos3d(arg0, arg1, arg2);
	}

	@Override
	public void nglWindowPos3iv(long arg0) {
		GL40.nglWindowPos3iv(arg0);
	}

	@Override
	public void glWindowPos3iv(java.nio.IntBuffer arg0) {
		GL40.glWindowPos3iv(arg0);
	}

	@Override
	public void glWindowPos3iv(int[] arg0) {
		GL40.glWindowPos3iv(arg0);
	}

	@Override
	public void nglWindowPos3sv(long arg0) {
		GL40.nglWindowPos3sv(arg0);
	}

	@Override
	public void glWindowPos3sv(short[] arg0) {
		GL40.glWindowPos3sv(arg0);
	}

	@Override
	public void glWindowPos3sv(java.nio.ShortBuffer arg0) {
		GL40.glWindowPos3sv(arg0);
	}

	@Override
	public void nglWindowPos3fv(long arg0) {
		GL40.nglWindowPos3fv(arg0);
	}

	@Override
	public void glWindowPos3fv(java.nio.FloatBuffer arg0) {
		GL40.glWindowPos3fv(arg0);
	}

	@Override
	public void glWindowPos3fv(float[] arg0) {
		GL40.glWindowPos3fv(arg0);
	}

	@Override
	public void nglWindowPos3dv(long arg0) {
		GL40.nglWindowPos3dv(arg0);
	}

	@Override
	public void glWindowPos3dv(java.nio.DoubleBuffer arg0) {
		GL40.glWindowPos3dv(arg0);
	}

	@Override
	public void glWindowPos3dv(double[] arg0) {
		GL40.glWindowPos3dv(arg0);
	}

	@Override
	public void nglCompressedTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GL40.nglCompressedTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glCompressedTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GL40.glCompressedTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glCompressedTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.ByteBuffer arg7) {
		GL40.glCompressedTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void nglCompressedTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, long arg10) {
		GL40.nglCompressedTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glCompressedTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.ByteBuffer arg9) {
		GL40.glCompressedTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glCompressedTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, long arg10) {
		GL40.glCompressedTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glActiveTexture(int arg0) {
		GL40.glActiveTexture(arg0);
	}

	@Override
	public void nglCompressedTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, long arg7) {
		GL40.nglCompressedTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glCompressedTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.ByteBuffer arg6) {
		GL40.glCompressedTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glCompressedTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, long arg7) {
		GL40.glCompressedTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void nglCompressedTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GL40.nglCompressedTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glCompressedTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GL40.glCompressedTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glCompressedTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.ByteBuffer arg7) {
		GL40.glCompressedTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glSampleCoverage(float arg0, boolean arg1) {
		GL40.glSampleCoverage(arg0, arg1);
	}

	@Override
	public void nglCompressedTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		GL40.nglCompressedTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glCompressedTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, java.nio.ByteBuffer arg5) {
		GL40.glCompressedTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glCompressedTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		GL40.glCompressedTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void nglCompressedTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		GL40.nglCompressedTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glCompressedTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, java.nio.ByteBuffer arg5) {
		GL40.glCompressedTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glCompressedTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		GL40.glCompressedTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void nglGetCompressedTexImage(int arg0, int arg1, long arg2) {
		GL40.nglGetCompressedTexImage(arg0, arg1, arg2);
	}

	@Override
	public void glGetCompressedTexImage(int arg0, int arg1, long arg2) {
		GL40.glGetCompressedTexImage(arg0, arg1, arg2);
	}

	@Override
	public void glGetCompressedTexImage(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GL40.glGetCompressedTexImage(arg0, arg1, arg2);
	}

	@Override
	public void glClientActiveTexture(int arg0) {
		GL40.glClientActiveTexture(arg0);
	}

	@Override
	public void glMultiTexCoord1f(int arg0, float arg1) {
		GL40.glMultiTexCoord1f(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1s(int arg0, short arg1) {
		GL40.glMultiTexCoord1s(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1i(int arg0, int arg1) {
		GL40.glMultiTexCoord1i(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1d(int arg0, double arg1) {
		GL40.glMultiTexCoord1d(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord1fv(int arg0, long arg1) {
		GL40.nglMultiTexCoord1fv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glMultiTexCoord1fv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1fv(int arg0, float[] arg1) {
		GL40.glMultiTexCoord1fv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord1sv(int arg0, long arg1) {
		GL40.nglMultiTexCoord1sv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1sv(int arg0, short[] arg1) {
		GL40.glMultiTexCoord1sv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1sv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glMultiTexCoord1sv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord1iv(int arg0, long arg1) {
		GL40.nglMultiTexCoord1iv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1iv(int arg0, int[] arg1) {
		GL40.glMultiTexCoord1iv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glMultiTexCoord1iv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord1dv(int arg0, long arg1) {
		GL40.nglMultiTexCoord1dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1dv(int arg0, double[] arg1) {
		GL40.glMultiTexCoord1dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord1dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glMultiTexCoord1dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord2f(int arg0, float arg1, float arg2) {
		GL40.glMultiTexCoord2f(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoord2s(int arg0, short arg1, short arg2) {
		GL40.glMultiTexCoord2s(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoord2i(int arg0, int arg1, int arg2) {
		GL40.glMultiTexCoord2i(arg0, arg1, arg2);
	}

	@Override
	public void glMultiTexCoord2d(int arg0, double arg1, double arg2) {
		GL40.glMultiTexCoord2d(arg0, arg1, arg2);
	}

	@Override
	public void nglMultiTexCoord2fv(int arg0, long arg1) {
		GL40.nglMultiTexCoord2fv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord2fv(int arg0, float[] arg1) {
		GL40.glMultiTexCoord2fv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord2fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glMultiTexCoord2fv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord2sv(int arg0, long arg1) {
		GL40.nglMultiTexCoord2sv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord2sv(int arg0, short[] arg1) {
		GL40.glMultiTexCoord2sv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord2sv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glMultiTexCoord2sv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord2iv(int arg0, long arg1) {
		GL40.nglMultiTexCoord2iv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord2iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glMultiTexCoord2iv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord2iv(int arg0, int[] arg1) {
		GL40.glMultiTexCoord2iv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord2dv(int arg0, long arg1) {
		GL40.nglMultiTexCoord2dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord2dv(int arg0, double[] arg1) {
		GL40.glMultiTexCoord2dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord2dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glMultiTexCoord2dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord3f(int arg0, float arg1, float arg2, float arg3) {
		GL40.glMultiTexCoord3f(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glMultiTexCoord3s(int arg0, short arg1, short arg2, short arg3) {
		GL40.glMultiTexCoord3s(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glMultiTexCoord3i(int arg0, int arg1, int arg2, int arg3) {
		GL40.glMultiTexCoord3i(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glMultiTexCoord3d(int arg0, double arg1, double arg2, double arg3) {
		GL40.glMultiTexCoord3d(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglMultiTexCoord3fv(int arg0, long arg1) {
		GL40.nglMultiTexCoord3fv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord3fv(int arg0, float[] arg1) {
		GL40.glMultiTexCoord3fv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord3fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glMultiTexCoord3fv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord3sv(int arg0, long arg1) {
		GL40.nglMultiTexCoord3sv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord3sv(int arg0, short[] arg1) {
		GL40.glMultiTexCoord3sv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord3sv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glMultiTexCoord3sv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord3iv(int arg0, long arg1) {
		GL40.nglMultiTexCoord3iv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord3iv(int arg0, int[] arg1) {
		GL40.glMultiTexCoord3iv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord3iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glMultiTexCoord3iv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord3dv(int arg0, long arg1) {
		GL40.nglMultiTexCoord3dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord3dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glMultiTexCoord3dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord3dv(int arg0, double[] arg1) {
		GL40.glMultiTexCoord3dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord4f(int arg0, float arg1, float arg2, float arg3, float arg4) {
		GL40.glMultiTexCoord4f(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glMultiTexCoord4s(int arg0, short arg1, short arg2, short arg3, short arg4) {
		GL40.glMultiTexCoord4s(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glMultiTexCoord4i(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glMultiTexCoord4i(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glMultiTexCoord4d(int arg0, double arg1, double arg2, double arg3, double arg4) {
		GL40.glMultiTexCoord4d(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglMultiTexCoord4fv(int arg0, long arg1) {
		GL40.nglMultiTexCoord4fv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord4fv(int arg0, float[] arg1) {
		GL40.glMultiTexCoord4fv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord4fv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glMultiTexCoord4fv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord4sv(int arg0, long arg1) {
		GL40.nglMultiTexCoord4sv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord4sv(int arg0, short[] arg1) {
		GL40.glMultiTexCoord4sv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord4sv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glMultiTexCoord4sv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord4iv(int arg0, long arg1) {
		GL40.nglMultiTexCoord4iv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord4iv(int arg0, int[] arg1) {
		GL40.glMultiTexCoord4iv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord4iv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glMultiTexCoord4iv(arg0, arg1);
	}

	@Override
	public void nglMultiTexCoord4dv(int arg0, long arg1) {
		GL40.nglMultiTexCoord4dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord4dv(int arg0, double[] arg1) {
		GL40.glMultiTexCoord4dv(arg0, arg1);
	}

	@Override
	public void glMultiTexCoord4dv(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glMultiTexCoord4dv(arg0, arg1);
	}

	@Override
	public void nglLoadTransposeMatrixf(long arg0) {
		GL40.nglLoadTransposeMatrixf(arg0);
	}

	@Override
	public void glLoadTransposeMatrixf(java.nio.FloatBuffer arg0) {
		GL40.glLoadTransposeMatrixf(arg0);
	}

	@Override
	public void glLoadTransposeMatrixf(float[] arg0) {
		GL40.glLoadTransposeMatrixf(arg0);
	}

	@Override
	public void nglLoadTransposeMatrixd(long arg0) {
		GL40.nglLoadTransposeMatrixd(arg0);
	}

	@Override
	public void glLoadTransposeMatrixd(double[] arg0) {
		GL40.glLoadTransposeMatrixd(arg0);
	}

	@Override
	public void glLoadTransposeMatrixd(java.nio.DoubleBuffer arg0) {
		GL40.glLoadTransposeMatrixd(arg0);
	}

	@Override
	public void nglMultTransposeMatrixf(long arg0) {
		GL40.nglMultTransposeMatrixf(arg0);
	}

	@Override
	public void glMultTransposeMatrixf(float[] arg0) {
		GL40.glMultTransposeMatrixf(arg0);
	}

	@Override
	public void glMultTransposeMatrixf(java.nio.FloatBuffer arg0) {
		GL40.glMultTransposeMatrixf(arg0);
	}

	@Override
	public void nglMultTransposeMatrixd(long arg0) {
		GL40.nglMultTransposeMatrixd(arg0);
	}

	@Override
	public void glMultTransposeMatrixd(java.nio.DoubleBuffer arg0) {
		GL40.glMultTransposeMatrixd(arg0);
	}

	@Override
	public void glMultTransposeMatrixd(double[] arg0) {
		GL40.glMultTransposeMatrixd(arg0);
	}

	@Override
	public void nglDrawRangeElements(int arg0, int arg1, int arg2, int arg3, int arg4, long arg5) {
		GL40.nglDrawRangeElements(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glDrawRangeElements(int arg0, int arg1, int arg2, int arg3, int arg4, long arg5) {
		GL40.glDrawRangeElements(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glDrawRangeElements(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glDrawRangeElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawRangeElements(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3) {
		GL40.glDrawRangeElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawRangeElements(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		GL40.glDrawRangeElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawRangeElements(int arg0, int arg1, int arg2, int arg3, java.nio.ByteBuffer arg4) {
		GL40.glDrawRangeElements(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, long arg9) {
		GL40.nglTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, float[] arg9) {
		GL40.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, double[] arg9) {
		GL40.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int[] arg9) {
		GL40.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, short[] arg9) {
		GL40.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.FloatBuffer arg9) {
		GL40.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.ByteBuffer arg9) {
		GL40.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.ShortBuffer arg9) {
		GL40.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, long arg9) {
		GL40.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.IntBuffer arg9) {
		GL40.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glTexImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, java.nio.DoubleBuffer arg9) {
		GL40.glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void nglTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, long arg10) {
		GL40.nglTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int[] arg10) {
		GL40.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, short[] arg10) {
		GL40.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, java.nio.ShortBuffer arg10) {
		GL40.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, long arg10) {
		GL40.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, java.nio.ByteBuffer arg10) {
		GL40.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, java.nio.DoubleBuffer arg10) {
		GL40.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, double[] arg10) {
		GL40.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, float[] arg10) {
		GL40.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, java.nio.FloatBuffer arg10) {
		GL40.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, java.nio.IntBuffer arg10) {
		GL40.glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	}

	@Override
	public void glCopyTexSubImage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8) {
		GL40.glCopyTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glReadBuffer(int arg0) {
		GL40.glReadBuffer(arg0);
	}

	@Override
	public void glBindTexture(int arg0, int arg1) {
		GL40.glBindTexture(arg0, arg1);
	}

	@Override
	public void glBlendFunc(int arg0, int arg1) {
		GL40.glBlendFunc(arg0, arg1);
	}

	@Override
	public void glClear(int arg0) {
		GL40.glClear(arg0);
	}

	@Override
	public void glClearColor(float arg0, float arg1, float arg2, float arg3) {
		GL40.glClearColor(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glClearStencil(int arg0) {
		GL40.glClearStencil(arg0);
	}

	@Override
	public void glColorMask(boolean arg0, boolean arg1, boolean arg2, boolean arg3) {
		GL40.glColorMask(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glCopyTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7) {
		GL40.glCopyTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glCopyTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7) {
		GL40.glCopyTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glCullFace(int arg0) {
		GL40.glCullFace(arg0);
	}

	@Override
	public void nglDeleteTextures(int arg0, long arg1) {
		GL40.nglDeleteTextures(arg0, arg1);
	}

	@Override
	public void glDeleteTextures(int[] arg0) {
		GL40.glDeleteTextures(arg0);
	}

	@Override
	public void glDeleteTextures(int arg0) {
		GL40.glDeleteTextures(arg0);
	}

	@Override
	public void glDeleteTextures(java.nio.IntBuffer arg0) {
		GL40.glDeleteTextures(arg0);
	}

	@Override
	public void glDepthFunc(int arg0) {
		GL40.glDepthFunc(arg0);
	}

	@Override
	public void glDepthMask(boolean arg0) {
		GL40.glDepthMask(arg0);
	}

	@Override
	public void glDisable(int arg0) {
		GL40.glDisable(arg0);
	}

	@Override
	public void glDrawArrays(int arg0, int arg1, int arg2) {
		GL40.glDrawArrays(arg0, arg1, arg2);
	}

	@Override
	public void nglDrawElements(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglDrawElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glDrawElements(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GL40.glDrawElements(arg0, arg1, arg2);
	}

	@Override
	public void glDrawElements(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glDrawElements(arg0, arg1);
	}

	@Override
	public void glDrawElements(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glDrawElements(arg0, arg1);
	}

	@Override
	public void glDrawElements(int arg0, java.nio.IntBuffer arg1) {
		GL40.glDrawElements(arg0, arg1);
	}

	@Override
	public void glDrawElements(int arg0, int arg1, int arg2, long arg3) {
		GL40.glDrawElements(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glEnable(int arg0) {
		GL40.glEnable(arg0);
	}

	@Override
	public void glFinish() {
		GL40.glFinish();
	}

	@Override
	public void glFlush() {
		GL40.glFlush();
	}

	@Override
	public void glFrontFace(int arg0) {
		GL40.glFrontFace(arg0);
	}

	@Override
	public void nglGenTextures(int arg0, long arg1) {
		GL40.nglGenTextures(arg0, arg1);
	}

	@Override
	public void glGenTextures(java.nio.IntBuffer arg0) {
		GL40.glGenTextures(arg0);
	}

	@Override
	public int glGenTextures() {
		return GL40.glGenTextures();
	}

	@Override
	public void glGenTextures(int[] arg0) {
		GL40.glGenTextures(arg0);
	}

	@Override
	public void nglGetBooleanv(int arg0, long arg1) {
		GL40.nglGetBooleanv(arg0, arg1);
	}

	@Override
	public void glGetBooleanv(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glGetBooleanv(arg0, arg1);
	}

	@Override
	public boolean glGetBoolean(int arg0) {
		return GL40.glGetBoolean(arg0);
	}

	@Override
	public int glGetError() {
		return GL40.glGetError();
	}

	@Override
	public void nglGetFloatv(int arg0, long arg1) {
		GL40.nglGetFloatv(arg0, arg1);
	}

	@Override
	public void glGetFloatv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glGetFloatv(arg0, arg1);
	}

	@Override
	public void glGetFloatv(int arg0, float[] arg1) {
		GL40.glGetFloatv(arg0, arg1);
	}

	@Override
	public float glGetFloat(int arg0) {
		return GL40.glGetFloat(arg0);
	}

	@Override
	public void nglGetIntegerv(int arg0, long arg1) {
		GL40.nglGetIntegerv(arg0, arg1);
	}

	@Override
	public void glGetIntegerv(int arg0, int[] arg1) {
		GL40.glGetIntegerv(arg0, arg1);
	}

	@Override
	public void glGetIntegerv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glGetIntegerv(arg0, arg1);
	}

	@Override
	public int glGetInteger(int arg0) {
		return GL40.glGetInteger(arg0);
	}

	@Override
	public long nglGetString(int arg0) {
		return GL40.nglGetString(arg0);
	}

	@Override
	public java.lang.String glGetString(int arg0) {
		return GL40.glGetString(arg0);
	}

	@Override
	public void nglGetTexParameterfv(int arg0, int arg1, long arg2) {
		GL40.nglGetTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameterfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameterfv(int arg0, int arg1, float[] arg2) {
		GL40.glGetTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public float glGetTexParameterf(int arg0, int arg1) {
		return GL40.glGetTexParameterf(arg0, arg1);
	}

	@Override
	public void nglGetTexParameteriv(int arg0, int arg1, long arg2) {
		GL40.nglGetTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexParameteriv(int arg0, int arg1, int[] arg2) {
		GL40.glGetTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public int glGetTexParameteri(int arg0, int arg1) {
		return GL40.glGetTexParameteri(arg0, arg1);
	}

	@Override
	public void glHint(int arg0, int arg1) {
		GL40.glHint(arg0, arg1);
	}

	@Override
	public boolean glIsEnabled(int arg0) {
		return GL40.glIsEnabled(arg0);
	}

	@Override
	public boolean glIsTexture(int arg0) {
		return GL40.glIsTexture(arg0);
	}

	@Override
	public void glLineWidth(float arg0) {
		GL40.glLineWidth(arg0);
	}

	@Override
	public void glPixelStorei(int arg0, int arg1) {
		GL40.glPixelStorei(arg0, arg1);
	}

	@Override
	public void glPolygonOffset(float arg0, float arg1) {
		GL40.glPolygonOffset(arg0, arg1);
	}

	@Override
	public void nglReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		GL40.nglReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		GL40.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.ByteBuffer arg6) {
		GL40.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.ShortBuffer arg6) {
		GL40.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.IntBuffer arg6) {
		GL40.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.FloatBuffer arg6) {
		GL40.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, float[] arg6) {
		GL40.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int[] arg6) {
		GL40.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glReadPixels(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, short[] arg6) {
		GL40.glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glScissor(int arg0, int arg1, int arg2, int arg3) {
		GL40.glScissor(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glStencilFunc(int arg0, int arg1, int arg2) {
		GL40.glStencilFunc(arg0, arg1, arg2);
	}

	@Override
	public void glStencilMask(int arg0) {
		GL40.glStencilMask(arg0);
	}

	@Override
	public void glStencilOp(int arg0, int arg1, int arg2) {
		GL40.glStencilOp(arg0, arg1, arg2);
	}

	@Override
	public void nglTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GL40.nglTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, float[] arg8) {
		GL40.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.DoubleBuffer arg8) {
		GL40.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.FloatBuffer arg8) {
		GL40.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int[] arg8) {
		GL40.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, short[] arg8) {
		GL40.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, double[] arg8) {
		GL40.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.ByteBuffer arg8) {
		GL40.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GL40.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.ShortBuffer arg8) {
		GL40.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.IntBuffer arg8) {
		GL40.glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexParameterf(int arg0, int arg1, float arg2) {
		GL40.glTexParameterf(arg0, arg1, arg2);
	}

	@Override
	public void nglTexParameterfv(int arg0, int arg1, long arg2) {
		GL40.nglTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameterfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameterfv(int arg0, int arg1, float[] arg2) {
		GL40.glTexParameterfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameteri(int arg0, int arg1, int arg2) {
		GL40.glTexParameteri(arg0, arg1, arg2);
	}

	@Override
	public void nglTexParameteriv(int arg0, int arg1, long arg2) {
		GL40.nglTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameteriv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void glTexParameteriv(int arg0, int arg1, int[] arg2) {
		GL40.glTexParameteriv(arg0, arg1, arg2);
	}

	@Override
	public void nglTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GL40.nglTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, float[] arg8) {
		GL40.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int[] arg8) {
		GL40.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, short[] arg8) {
		GL40.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, double[] arg8) {
		GL40.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.ByteBuffer arg8) {
		GL40.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, long arg8) {
		GL40.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.ShortBuffer arg8) {
		GL40.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.IntBuffer arg8) {
		GL40.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.FloatBuffer arg8) {
		GL40.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glTexSubImage2D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, java.nio.DoubleBuffer arg8) {
		GL40.glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	}

	@Override
	public void glViewport(int arg0, int arg1, int arg2, int arg3) {
		GL40.glViewport(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glAccum(int arg0, float arg1) {
		GL40.glAccum(arg0, arg1);
	}

	@Override
	public void glAlphaFunc(int arg0, float arg1) {
		GL40.glAlphaFunc(arg0, arg1);
	}

	@Override
	public boolean nglAreTexturesResident(int arg0, long arg1, long arg2) {
		return GL40.nglAreTexturesResident(arg0, arg1, arg2);
	}

	@Override
	public boolean glAreTexturesResident(int[] arg0, java.nio.ByteBuffer arg1) {
		return GL40.glAreTexturesResident(arg0, arg1);
	}

	@Override
	public boolean glAreTexturesResident(int arg0, java.nio.ByteBuffer arg1) {
		return GL40.glAreTexturesResident(arg0, arg1);
	}

	@Override
	public boolean glAreTexturesResident(java.nio.IntBuffer arg0, java.nio.ByteBuffer arg1) {
		return GL40.glAreTexturesResident(arg0, arg1);
	}

	@Override
	public void glArrayElement(int arg0) {
		GL40.glArrayElement(arg0);
	}

	@Override
	public void glBegin(int arg0) {
		GL40.glBegin(arg0);
	}

	@Override
	public void nglBitmap(int arg0, int arg1, float arg2, float arg3, float arg4, float arg5, long arg6) {
		GL40.nglBitmap(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glBitmap(int arg0, int arg1, float arg2, float arg3, float arg4, float arg5, long arg6) {
		GL40.glBitmap(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glBitmap(int arg0, int arg1, float arg2, float arg3, float arg4, float arg5, java.nio.ByteBuffer arg6) {
		GL40.glBitmap(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glCallList(int arg0) {
		GL40.glCallList(arg0);
	}

	@Override
	public void nglCallLists(int arg0, int arg1, long arg2) {
		GL40.nglCallLists(arg0, arg1, arg2);
	}

	@Override
	public void glCallLists(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glCallLists(arg0, arg1);
	}

	@Override
	public void glCallLists(java.nio.IntBuffer arg0) {
		GL40.glCallLists(arg0);
	}

	@Override
	public void glCallLists(java.nio.ByteBuffer arg0) {
		GL40.glCallLists(arg0);
	}

	@Override
	public void glCallLists(java.nio.ShortBuffer arg0) {
		GL40.glCallLists(arg0);
	}

	@Override
	public void glClearAccum(float arg0, float arg1, float arg2, float arg3) {
		GL40.glClearAccum(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glClearDepth(double arg0) {
		GL40.glClearDepth(arg0);
	}

	@Override
	public void glClearIndex(float arg0) {
		GL40.glClearIndex(arg0);
	}

	@Override
	public void nglClipPlane(int arg0, long arg1) {
		GL40.nglClipPlane(arg0, arg1);
	}

	@Override
	public void glClipPlane(int arg0, double[] arg1) {
		GL40.glClipPlane(arg0, arg1);
	}

	@Override
	public void glClipPlane(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glClipPlane(arg0, arg1);
	}

	@Override
	public void glColor3b(byte arg0, byte arg1, byte arg2) {
		GL40.glColor3b(arg0, arg1, arg2);
	}

	@Override
	public void glColor3s(short arg0, short arg1, short arg2) {
		GL40.glColor3s(arg0, arg1, arg2);
	}

	@Override
	public void glColor3i(int arg0, int arg1, int arg2) {
		GL40.glColor3i(arg0, arg1, arg2);
	}

	@Override
	public void glColor3f(float arg0, float arg1, float arg2) {
		GL40.glColor3f(arg0, arg1, arg2);
	}

	@Override
	public void glColor3d(double arg0, double arg1, double arg2) {
		GL40.glColor3d(arg0, arg1, arg2);
	}

	@Override
	public void glColor3ub(byte arg0, byte arg1, byte arg2) {
		GL40.glColor3ub(arg0, arg1, arg2);
	}

	@Override
	public void glColor3us(short arg0, short arg1, short arg2) {
		GL40.glColor3us(arg0, arg1, arg2);
	}

	@Override
	public void glColor3ui(int arg0, int arg1, int arg2) {
		GL40.glColor3ui(arg0, arg1, arg2);
	}

	@Override
	public void nglColor3bv(long arg0) {
		GL40.nglColor3bv(arg0);
	}

	@Override
	public void glColor3bv(java.nio.ByteBuffer arg0) {
		GL40.glColor3bv(arg0);
	}

	@Override
	public void nglColor3sv(long arg0) {
		GL40.nglColor3sv(arg0);
	}

	@Override
	public void glColor3sv(short[] arg0) {
		GL40.glColor3sv(arg0);
	}

	@Override
	public void glColor3sv(java.nio.ShortBuffer arg0) {
		GL40.glColor3sv(arg0);
	}

	@Override
	public void nglColor3iv(long arg0) {
		GL40.nglColor3iv(arg0);
	}

	@Override
	public void glColor3iv(int[] arg0) {
		GL40.glColor3iv(arg0);
	}

	@Override
	public void glColor3iv(java.nio.IntBuffer arg0) {
		GL40.glColor3iv(arg0);
	}

	@Override
	public void nglColor3fv(long arg0) {
		GL40.nglColor3fv(arg0);
	}

	@Override
	public void glColor3fv(java.nio.FloatBuffer arg0) {
		GL40.glColor3fv(arg0);
	}

	@Override
	public void glColor3fv(float[] arg0) {
		GL40.glColor3fv(arg0);
	}

	@Override
	public void nglColor3dv(long arg0) {
		GL40.nglColor3dv(arg0);
	}

	@Override
	public void glColor3dv(double[] arg0) {
		GL40.glColor3dv(arg0);
	}

	@Override
	public void glColor3dv(java.nio.DoubleBuffer arg0) {
		GL40.glColor3dv(arg0);
	}

	@Override
	public void nglColor3ubv(long arg0) {
		GL40.nglColor3ubv(arg0);
	}

	@Override
	public void glColor3ubv(java.nio.ByteBuffer arg0) {
		GL40.glColor3ubv(arg0);
	}

	@Override
	public void nglColor3usv(long arg0) {
		GL40.nglColor3usv(arg0);
	}

	@Override
	public void glColor3usv(java.nio.ShortBuffer arg0) {
		GL40.glColor3usv(arg0);
	}

	@Override
	public void glColor3usv(short[] arg0) {
		GL40.glColor3usv(arg0);
	}

	@Override
	public void nglColor3uiv(long arg0) {
		GL40.nglColor3uiv(arg0);
	}

	@Override
	public void glColor3uiv(int[] arg0) {
		GL40.glColor3uiv(arg0);
	}

	@Override
	public void glColor3uiv(java.nio.IntBuffer arg0) {
		GL40.glColor3uiv(arg0);
	}

	@Override
	public void glColor4b(byte arg0, byte arg1, byte arg2, byte arg3) {
		GL40.glColor4b(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColor4s(short arg0, short arg1, short arg2, short arg3) {
		GL40.glColor4s(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColor4i(int arg0, int arg1, int arg2, int arg3) {
		GL40.glColor4i(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColor4f(float arg0, float arg1, float arg2, float arg3) {
		GL40.glColor4f(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColor4d(double arg0, double arg1, double arg2, double arg3) {
		GL40.glColor4d(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColor4ub(byte arg0, byte arg1, byte arg2, byte arg3) {
		GL40.glColor4ub(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColor4us(short arg0, short arg1, short arg2, short arg3) {
		GL40.glColor4us(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColor4ui(int arg0, int arg1, int arg2, int arg3) {
		GL40.glColor4ui(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglColor4bv(long arg0) {
		GL40.nglColor4bv(arg0);
	}

	@Override
	public void glColor4bv(java.nio.ByteBuffer arg0) {
		GL40.glColor4bv(arg0);
	}

	@Override
	public void nglColor4sv(long arg0) {
		GL40.nglColor4sv(arg0);
	}

	@Override
	public void glColor4sv(java.nio.ShortBuffer arg0) {
		GL40.glColor4sv(arg0);
	}

	@Override
	public void glColor4sv(short[] arg0) {
		GL40.glColor4sv(arg0);
	}

	@Override
	public void nglColor4iv(long arg0) {
		GL40.nglColor4iv(arg0);
	}

	@Override
	public void glColor4iv(java.nio.IntBuffer arg0) {
		GL40.glColor4iv(arg0);
	}

	@Override
	public void glColor4iv(int[] arg0) {
		GL40.glColor4iv(arg0);
	}

	@Override
	public void nglColor4fv(long arg0) {
		GL40.nglColor4fv(arg0);
	}

	@Override
	public void glColor4fv(float[] arg0) {
		GL40.glColor4fv(arg0);
	}

	@Override
	public void glColor4fv(java.nio.FloatBuffer arg0) {
		GL40.glColor4fv(arg0);
	}

	@Override
	public void nglColor4dv(long arg0) {
		GL40.nglColor4dv(arg0);
	}

	@Override
	public void glColor4dv(java.nio.DoubleBuffer arg0) {
		GL40.glColor4dv(arg0);
	}

	@Override
	public void glColor4dv(double[] arg0) {
		GL40.glColor4dv(arg0);
	}

	@Override
	public void nglColor4ubv(long arg0) {
		GL40.nglColor4ubv(arg0);
	}

	@Override
	public void glColor4ubv(java.nio.ByteBuffer arg0) {
		GL40.glColor4ubv(arg0);
	}

	@Override
	public void nglColor4usv(long arg0) {
		GL40.nglColor4usv(arg0);
	}

	@Override
	public void glColor4usv(short[] arg0) {
		GL40.glColor4usv(arg0);
	}

	@Override
	public void glColor4usv(java.nio.ShortBuffer arg0) {
		GL40.glColor4usv(arg0);
	}

	@Override
	public void nglColor4uiv(long arg0) {
		GL40.nglColor4uiv(arg0);
	}

	@Override
	public void glColor4uiv(java.nio.IntBuffer arg0) {
		GL40.glColor4uiv(arg0);
	}

	@Override
	public void glColor4uiv(int[] arg0) {
		GL40.glColor4uiv(arg0);
	}

	@Override
	public void glColorMaterial(int arg0, int arg1) {
		GL40.glColorMaterial(arg0, arg1);
	}

	@Override
	public void nglColorPointer(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColorPointer(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		GL40.glColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColorPointer(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColorPointer(int arg0, int arg1, int arg2, java.nio.FloatBuffer arg3) {
		GL40.glColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColorPointer(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3) {
		GL40.glColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glColorPointer(int arg0, int arg1, int arg2, long arg3) {
		GL40.glColorPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glCopyPixels(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glCopyPixels(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDeleteLists(int arg0, int arg1) {
		GL40.glDeleteLists(arg0, arg1);
	}

	@Override
	public void glDepthRange(double arg0, double arg1) {
		GL40.glDepthRange(arg0, arg1);
	}

	@Override
	public void glDisableClientState(int arg0) {
		GL40.glDisableClientState(arg0);
	}

	@Override
	public void glDrawBuffer(int arg0) {
		GL40.glDrawBuffer(arg0);
	}

	@Override
	public void nglDrawPixels(int arg0, int arg1, int arg2, int arg3, long arg4) {
		GL40.nglDrawPixels(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, java.nio.ShortBuffer arg4) {
		GL40.glDrawPixels(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, float[] arg4) {
		GL40.glDrawPixels(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, int[] arg4) {
		GL40.glDrawPixels(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, short[] arg4) {
		GL40.glDrawPixels(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, long arg4) {
		GL40.glDrawPixels(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, java.nio.FloatBuffer arg4) {
		GL40.glDrawPixels(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, java.nio.ByteBuffer arg4) {
		GL40.glDrawPixels(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glDrawPixels(int arg0, int arg1, int arg2, int arg3, java.nio.IntBuffer arg4) {
		GL40.glDrawPixels(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glEdgeFlag(boolean arg0) {
		GL40.glEdgeFlag(arg0);
	}

	@Override
	public void nglEdgeFlagv(long arg0) {
		GL40.nglEdgeFlagv(arg0);
	}

	@Override
	public void glEdgeFlagv(java.nio.ByteBuffer arg0) {
		GL40.glEdgeFlagv(arg0);
	}

	@Override
	public void nglEdgeFlagPointer(int arg0, long arg1) {
		GL40.nglEdgeFlagPointer(arg0, arg1);
	}

	@Override
	public void glEdgeFlagPointer(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glEdgeFlagPointer(arg0, arg1);
	}

	@Override
	public void glEdgeFlagPointer(int arg0, long arg1) {
		GL40.glEdgeFlagPointer(arg0, arg1);
	}

	@Override
	public void glEnableClientState(int arg0) {
		GL40.glEnableClientState(arg0);
	}

	@Override
	public void glEnd() {
		GL40.glEnd();
	}

	@Override
	public void glEvalCoord1f(float arg0) {
		GL40.glEvalCoord1f(arg0);
	}

	@Override
	public void nglEvalCoord1fv(long arg0) {
		GL40.nglEvalCoord1fv(arg0);
	}

	@Override
	public void glEvalCoord1fv(float[] arg0) {
		GL40.glEvalCoord1fv(arg0);
	}

	@Override
	public void glEvalCoord1fv(java.nio.FloatBuffer arg0) {
		GL40.glEvalCoord1fv(arg0);
	}

	@Override
	public void glEvalCoord1d(double arg0) {
		GL40.glEvalCoord1d(arg0);
	}

	@Override
	public void nglEvalCoord1dv(long arg0) {
		GL40.nglEvalCoord1dv(arg0);
	}

	@Override
	public void glEvalCoord1dv(java.nio.DoubleBuffer arg0) {
		GL40.glEvalCoord1dv(arg0);
	}

	@Override
	public void glEvalCoord1dv(double[] arg0) {
		GL40.glEvalCoord1dv(arg0);
	}

	@Override
	public void glEvalCoord2f(float arg0, float arg1) {
		GL40.glEvalCoord2f(arg0, arg1);
	}

	@Override
	public void nglEvalCoord2fv(long arg0) {
		GL40.nglEvalCoord2fv(arg0);
	}

	@Override
	public void glEvalCoord2fv(float[] arg0) {
		GL40.glEvalCoord2fv(arg0);
	}

	@Override
	public void glEvalCoord2fv(java.nio.FloatBuffer arg0) {
		GL40.glEvalCoord2fv(arg0);
	}

	@Override
	public void glEvalCoord2d(double arg0, double arg1) {
		GL40.glEvalCoord2d(arg0, arg1);
	}

	@Override
	public void nglEvalCoord2dv(long arg0) {
		GL40.nglEvalCoord2dv(arg0);
	}

	@Override
	public void glEvalCoord2dv(java.nio.DoubleBuffer arg0) {
		GL40.glEvalCoord2dv(arg0);
	}

	@Override
	public void glEvalCoord2dv(double[] arg0) {
		GL40.glEvalCoord2dv(arg0);
	}

	@Override
	public void glEvalMesh1(int arg0, int arg1, int arg2) {
		GL40.glEvalMesh1(arg0, arg1, arg2);
	}

	@Override
	public void glEvalMesh2(int arg0, int arg1, int arg2, int arg3, int arg4) {
		GL40.glEvalMesh2(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glEvalPoint1(int arg0) {
		GL40.glEvalPoint1(arg0);
	}

	@Override
	public void glEvalPoint2(int arg0, int arg1) {
		GL40.glEvalPoint2(arg0, arg1);
	}

	@Override
	public void nglFeedbackBuffer(int arg0, int arg1, long arg2) {
		GL40.nglFeedbackBuffer(arg0, arg1, arg2);
	}

	@Override
	public void glFeedbackBuffer(int arg0, float[] arg1) {
		GL40.glFeedbackBuffer(arg0, arg1);
	}

	@Override
	public void glFeedbackBuffer(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glFeedbackBuffer(arg0, arg1);
	}

	@Override
	public void glFogi(int arg0, int arg1) {
		GL40.glFogi(arg0, arg1);
	}

	@Override
	public void nglFogiv(int arg0, long arg1) {
		GL40.nglFogiv(arg0, arg1);
	}

	@Override
	public void glFogiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glFogiv(arg0, arg1);
	}

	@Override
	public void glFogiv(int arg0, int[] arg1) {
		GL40.glFogiv(arg0, arg1);
	}

	@Override
	public void glFogf(int arg0, float arg1) {
		GL40.glFogf(arg0, arg1);
	}

	@Override
	public void nglFogfv(int arg0, long arg1) {
		GL40.nglFogfv(arg0, arg1);
	}

	@Override
	public void glFogfv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glFogfv(arg0, arg1);
	}

	@Override
	public void glFogfv(int arg0, float[] arg1) {
		GL40.glFogfv(arg0, arg1);
	}

	@Override
	public int glGenLists(int arg0) {
		return GL40.glGenLists(arg0);
	}

	@Override
	public void nglGetClipPlane(int arg0, long arg1) {
		GL40.nglGetClipPlane(arg0, arg1);
	}

	@Override
	public void glGetClipPlane(int arg0, double[] arg1) {
		GL40.glGetClipPlane(arg0, arg1);
	}

	@Override
	public void glGetClipPlane(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glGetClipPlane(arg0, arg1);
	}

	@Override
	public void nglGetDoublev(int arg0, long arg1) {
		GL40.nglGetDoublev(arg0, arg1);
	}

	@Override
	public void glGetDoublev(int arg0, java.nio.DoubleBuffer arg1) {
		GL40.glGetDoublev(arg0, arg1);
	}

	@Override
	public void glGetDoublev(int arg0, double[] arg1) {
		GL40.glGetDoublev(arg0, arg1);
	}

	@Override
	public double glGetDouble(int arg0) {
		return GL40.glGetDouble(arg0);
	}

	@Override
	public void nglGetLightiv(int arg0, int arg1, long arg2) {
		GL40.nglGetLightiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetLightiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetLightiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetLightiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetLightiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetLighti(int arg0, int arg1) {
		return GL40.glGetLighti(arg0, arg1);
	}

	@Override
	public void nglGetLightfv(int arg0, int arg1, long arg2) {
		GL40.nglGetLightfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetLightfv(int arg0, int arg1, float[] arg2) {
		GL40.glGetLightfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetLightfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetLightfv(arg0, arg1, arg2);
	}

	@Override
	public float glGetLightf(int arg0, int arg1) {
		return GL40.glGetLightf(arg0, arg1);
	}

	@Override
	public void nglGetMapiv(int arg0, int arg1, long arg2) {
		GL40.nglGetMapiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMapiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetMapiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMapiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetMapiv(arg0, arg1, arg2);
	}

	@Override
	public int glGetMapi(int arg0, int arg1) {
		return GL40.glGetMapi(arg0, arg1);
	}

	@Override
	public void nglGetMapfv(int arg0, int arg1, long arg2) {
		GL40.nglGetMapfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMapfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetMapfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMapfv(int arg0, int arg1, float[] arg2) {
		GL40.glGetMapfv(arg0, arg1, arg2);
	}

	@Override
	public float glGetMapf(int arg0, int arg1) {
		return GL40.glGetMapf(arg0, arg1);
	}

	@Override
	public void nglGetMapdv(int arg0, int arg1, long arg2) {
		GL40.nglGetMapdv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMapdv(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		GL40.glGetMapdv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMapdv(int arg0, int arg1, double[] arg2) {
		GL40.glGetMapdv(arg0, arg1, arg2);
	}

	@Override
	public double glGetMapd(int arg0, int arg1) {
		return GL40.glGetMapd(arg0, arg1);
	}

	@Override
	public void nglGetMaterialiv(int arg0, int arg1, long arg2) {
		GL40.nglGetMaterialiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMaterialiv(int arg0, int arg1, int[] arg2) {
		GL40.glGetMaterialiv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMaterialiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetMaterialiv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetMaterialfv(int arg0, int arg1, long arg2) {
		GL40.nglGetMaterialfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMaterialfv(int arg0, int arg1, float[] arg2) {
		GL40.glGetMaterialfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetMaterialfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetMaterialfv(arg0, arg1, arg2);
	}

	@Override
	public void nglGetPixelMapfv(int arg0, long arg1) {
		GL40.nglGetPixelMapfv(arg0, arg1);
	}

	@Override
	public void glGetPixelMapfv(int arg0, float[] arg1) {
		GL40.glGetPixelMapfv(arg0, arg1);
	}

	@Override
	public void glGetPixelMapfv(int arg0, long arg1) {
		GL40.glGetPixelMapfv(arg0, arg1);
	}

	@Override
	public void glGetPixelMapfv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glGetPixelMapfv(arg0, arg1);
	}

	@Override
	public void nglGetPixelMapusv(int arg0, long arg1) {
		GL40.nglGetPixelMapusv(arg0, arg1);
	}

	@Override
	public void glGetPixelMapusv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glGetPixelMapusv(arg0, arg1);
	}

	@Override
	public void glGetPixelMapusv(int arg0, long arg1) {
		GL40.glGetPixelMapusv(arg0, arg1);
	}

	@Override
	public void glGetPixelMapusv(int arg0, short[] arg1) {
		GL40.glGetPixelMapusv(arg0, arg1);
	}

	@Override
	public void nglGetPixelMapuiv(int arg0, long arg1) {
		GL40.nglGetPixelMapuiv(arg0, arg1);
	}

	@Override
	public void glGetPixelMapuiv(int arg0, int[] arg1) {
		GL40.glGetPixelMapuiv(arg0, arg1);
	}

	@Override
	public void glGetPixelMapuiv(int arg0, long arg1) {
		GL40.glGetPixelMapuiv(arg0, arg1);
	}

	@Override
	public void glGetPixelMapuiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glGetPixelMapuiv(arg0, arg1);
	}

	@Override
	public void nglGetPointerv(int arg0, long arg1) {
		GL40.nglGetPointerv(arg0, arg1);
	}

	@Override
	public void glGetPointerv(int arg0, org.lwjgl.PointerBuffer arg1) {
		GL40.glGetPointerv(arg0, arg1);
	}

	@Override
	public long glGetPointer(int arg0) {
		return GL40.glGetPointer(arg0);
	}

	@Override
	public void nglGetPolygonStipple(long arg0) {
		GL40.nglGetPolygonStipple(arg0);
	}

	@Override
	public void glGetPolygonStipple(long arg0) {
		GL40.glGetPolygonStipple(arg0);
	}

	@Override
	public void glGetPolygonStipple(java.nio.ByteBuffer arg0) {
		GL40.glGetPolygonStipple(arg0);
	}

	@Override
	public void nglGetTexEnviv(int arg0, int arg1, long arg2) {
		GL40.nglGetTexEnviv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexEnviv(int arg0, int arg1, int[] arg2) {
		GL40.glGetTexEnviv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexEnviv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetTexEnviv(arg0, arg1, arg2);
	}

	@Override
	public int glGetTexEnvi(int arg0, int arg1) {
		return GL40.glGetTexEnvi(arg0, arg1);
	}

	@Override
	public void nglGetTexEnvfv(int arg0, int arg1, long arg2) {
		GL40.nglGetTexEnvfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexEnvfv(int arg0, int arg1, float[] arg2) {
		GL40.glGetTexEnvfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexEnvfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetTexEnvfv(arg0, arg1, arg2);
	}

	@Override
	public float glGetTexEnvf(int arg0, int arg1) {
		return GL40.glGetTexEnvf(arg0, arg1);
	}

	@Override
	public void nglGetTexGeniv(int arg0, int arg1, long arg2) {
		GL40.nglGetTexGeniv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexGeniv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glGetTexGeniv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexGeniv(int arg0, int arg1, int[] arg2) {
		GL40.glGetTexGeniv(arg0, arg1, arg2);
	}

	@Override
	public int glGetTexGeni(int arg0, int arg1) {
		return GL40.glGetTexGeni(arg0, arg1);
	}

	@Override
	public void nglGetTexGenfv(int arg0, int arg1, long arg2) {
		GL40.nglGetTexGenfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexGenfv(int arg0, int arg1, float[] arg2) {
		GL40.glGetTexGenfv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexGenfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glGetTexGenfv(arg0, arg1, arg2);
	}

	@Override
	public float glGetTexGenf(int arg0, int arg1) {
		return GL40.glGetTexGenf(arg0, arg1);
	}

	@Override
	public void nglGetTexGendv(int arg0, int arg1, long arg2) {
		GL40.nglGetTexGendv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexGendv(int arg0, int arg1, double[] arg2) {
		GL40.glGetTexGendv(arg0, arg1, arg2);
	}

	@Override
	public void glGetTexGendv(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		GL40.glGetTexGendv(arg0, arg1, arg2);
	}

	@Override
	public double glGetTexGend(int arg0, int arg1) {
		return GL40.glGetTexGend(arg0, arg1);
	}

	@Override
	public void nglGetTexImage(int arg0, int arg1, int arg2, int arg3, long arg4) {
		GL40.nglGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, java.nio.ShortBuffer arg4) {
		GL40.glGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, double[] arg4) {
		GL40.glGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, java.nio.FloatBuffer arg4) {
		GL40.glGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, java.nio.DoubleBuffer arg4) {
		GL40.glGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, long arg4) {
		GL40.glGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, java.nio.IntBuffer arg4) {
		GL40.glGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, java.nio.ByteBuffer arg4) {
		GL40.glGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, float[] arg4) {
		GL40.glGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, short[] arg4) {
		GL40.glGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void glGetTexImage(int arg0, int arg1, int arg2, int arg3, int[] arg4) {
		GL40.glGetTexImage(arg0, arg1, arg2, arg3, arg4);
	}

	@Override
	public void nglGetTexLevelParameteriv(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglGetTexLevelParameteriv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetTexLevelParameteriv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glGetTexLevelParameteriv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetTexLevelParameteriv(int arg0, int arg1, int arg2, int[] arg3) {
		GL40.glGetTexLevelParameteriv(arg0, arg1, arg2, arg3);
	}

	@Override
	public int glGetTexLevelParameteri(int arg0, int arg1, int arg2) {
		return GL40.glGetTexLevelParameteri(arg0, arg1, arg2);
	}

	@Override
	public void nglGetTexLevelParameterfv(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglGetTexLevelParameterfv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetTexLevelParameterfv(int arg0, int arg1, int arg2, java.nio.FloatBuffer arg3) {
		GL40.glGetTexLevelParameterfv(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glGetTexLevelParameterfv(int arg0, int arg1, int arg2, float[] arg3) {
		GL40.glGetTexLevelParameterfv(arg0, arg1, arg2, arg3);
	}

	@Override
	public float glGetTexLevelParameterf(int arg0, int arg1, int arg2) {
		return GL40.glGetTexLevelParameterf(arg0, arg1, arg2);
	}

	@Override
	public void glIndexi(int arg0) {
		GL40.glIndexi(arg0);
	}

	@Override
	public void glIndexub(byte arg0) {
		GL40.glIndexub(arg0);
	}

	@Override
	public void glIndexs(short arg0) {
		GL40.glIndexs(arg0);
	}

	@Override
	public void glIndexf(float arg0) {
		GL40.glIndexf(arg0);
	}

	@Override
	public void glIndexd(double arg0) {
		GL40.glIndexd(arg0);
	}

	@Override
	public void nglIndexiv(long arg0) {
		GL40.nglIndexiv(arg0);
	}

	@Override
	public void glIndexiv(java.nio.IntBuffer arg0) {
		GL40.glIndexiv(arg0);
	}

	@Override
	public void glIndexiv(int[] arg0) {
		GL40.glIndexiv(arg0);
	}

	@Override
	public void nglIndexubv(long arg0) {
		GL40.nglIndexubv(arg0);
	}

	@Override
	public void glIndexubv(java.nio.ByteBuffer arg0) {
		GL40.glIndexubv(arg0);
	}

	@Override
	public void nglIndexsv(long arg0) {
		GL40.nglIndexsv(arg0);
	}

	@Override
	public void glIndexsv(java.nio.ShortBuffer arg0) {
		GL40.glIndexsv(arg0);
	}

	@Override
	public void glIndexsv(short[] arg0) {
		GL40.glIndexsv(arg0);
	}

	@Override
	public void nglIndexfv(long arg0) {
		GL40.nglIndexfv(arg0);
	}

	@Override
	public void glIndexfv(float[] arg0) {
		GL40.glIndexfv(arg0);
	}

	@Override
	public void glIndexfv(java.nio.FloatBuffer arg0) {
		GL40.glIndexfv(arg0);
	}

	@Override
	public void nglIndexdv(long arg0) {
		GL40.nglIndexdv(arg0);
	}

	@Override
	public void glIndexdv(double[] arg0) {
		GL40.glIndexdv(arg0);
	}

	@Override
	public void glIndexdv(java.nio.DoubleBuffer arg0) {
		GL40.glIndexdv(arg0);
	}

	@Override
	public void glIndexMask(int arg0) {
		GL40.glIndexMask(arg0);
	}

	@Override
	public void nglIndexPointer(int arg0, int arg1, long arg2) {
		GL40.nglIndexPointer(arg0, arg1, arg2);
	}

	@Override
	public void glIndexPointer(int arg0, int arg1, long arg2) {
		GL40.glIndexPointer(arg0, arg1, arg2);
	}

	@Override
	public void glIndexPointer(int arg0, java.nio.ByteBuffer arg1) {
		GL40.glIndexPointer(arg0, arg1);
	}

	@Override
	public void glIndexPointer(int arg0, java.nio.IntBuffer arg1) {
		GL40.glIndexPointer(arg0, arg1);
	}

	@Override
	public void glIndexPointer(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GL40.glIndexPointer(arg0, arg1, arg2);
	}

	@Override
	public void glIndexPointer(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glIndexPointer(arg0, arg1);
	}

	@Override
	public void glInitNames() {
		GL40.glInitNames();
	}

	@Override
	public void nglInterleavedArrays(int arg0, int arg1, long arg2) {
		GL40.nglInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, double[] arg2) {
		GL40.glInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, float[] arg2) {
		GL40.glInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, int[] arg2) {
		GL40.glInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, short[] arg2) {
		GL40.glInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GL40.glInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, long arg2) {
		GL40.glInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		GL40.glInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public void glInterleavedArrays(int arg0, int arg1, java.nio.ShortBuffer arg2) {
		GL40.glInterleavedArrays(arg0, arg1, arg2);
	}

	@Override
	public boolean glIsList(int arg0) {
		return GL40.glIsList(arg0);
	}

	@Override
	public void glLightModeli(int arg0, int arg1) {
		GL40.glLightModeli(arg0, arg1);
	}

	@Override
	public void glLightModelf(int arg0, float arg1) {
		GL40.glLightModelf(arg0, arg1);
	}

	@Override
	public void nglLightModeliv(int arg0, long arg1) {
		GL40.nglLightModeliv(arg0, arg1);
	}

	@Override
	public void glLightModeliv(int arg0, int[] arg1) {
		GL40.glLightModeliv(arg0, arg1);
	}

	@Override
	public void glLightModeliv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glLightModeliv(arg0, arg1);
	}

	@Override
	public void nglLightModelfv(int arg0, long arg1) {
		GL40.nglLightModelfv(arg0, arg1);
	}

	@Override
	public void glLightModelfv(int arg0, float[] arg1) {
		GL40.glLightModelfv(arg0, arg1);
	}

	@Override
	public void glLightModelfv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glLightModelfv(arg0, arg1);
	}

	@Override
	public void glLighti(int arg0, int arg1, int arg2) {
		GL40.glLighti(arg0, arg1, arg2);
	}

	@Override
	public void glLightf(int arg0, int arg1, float arg2) {
		GL40.glLightf(arg0, arg1, arg2);
	}

	@Override
	public void nglLightiv(int arg0, int arg1, long arg2) {
		GL40.nglLightiv(arg0, arg1, arg2);
	}

	@Override
	public void glLightiv(int arg0, int arg1, int[] arg2) {
		GL40.glLightiv(arg0, arg1, arg2);
	}

	@Override
	public void glLightiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glLightiv(arg0, arg1, arg2);
	}

	@Override
	public void nglLightfv(int arg0, int arg1, long arg2) {
		GL40.nglLightfv(arg0, arg1, arg2);
	}

	@Override
	public void glLightfv(int arg0, int arg1, float[] arg2) {
		GL40.glLightfv(arg0, arg1, arg2);
	}

	@Override
	public void glLightfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glLightfv(arg0, arg1, arg2);
	}

	@Override
	public void glLineStipple(int arg0, short arg1) {
		GL40.glLineStipple(arg0, arg1);
	}

	@Override
	public void glListBase(int arg0) {
		GL40.glListBase(arg0);
	}

	@Override
	public void nglLoadMatrixf(long arg0) {
		GL40.nglLoadMatrixf(arg0);
	}

	@Override
	public void glLoadMatrixf(java.nio.FloatBuffer arg0) {
		GL40.glLoadMatrixf(arg0);
	}

	@Override
	public void glLoadMatrixf(float[] arg0) {
		GL40.glLoadMatrixf(arg0);
	}

	@Override
	public void nglLoadMatrixd(long arg0) {
		GL40.nglLoadMatrixd(arg0);
	}

	@Override
	public void glLoadMatrixd(java.nio.DoubleBuffer arg0) {
		GL40.glLoadMatrixd(arg0);
	}

	@Override
	public void glLoadMatrixd(double[] arg0) {
		GL40.glLoadMatrixd(arg0);
	}

	@Override
	public void glLoadIdentity() {
		GL40.glLoadIdentity();
	}

	@Override
	public void glLoadName(int arg0) {
		GL40.glLoadName(arg0);
	}

	@Override
	public void glLogicOp(int arg0) {
		GL40.glLogicOp(arg0);
	}

	@Override
	public void nglMap1f(int arg0, float arg1, float arg2, int arg3, int arg4, long arg5) {
		GL40.nglMap1f(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glMap1f(int arg0, float arg1, float arg2, int arg3, int arg4, java.nio.FloatBuffer arg5) {
		GL40.glMap1f(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glMap1f(int arg0, float arg1, float arg2, int arg3, int arg4, float[] arg5) {
		GL40.glMap1f(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void nglMap1d(int arg0, double arg1, double arg2, int arg3, int arg4, long arg5) {
		GL40.nglMap1d(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glMap1d(int arg0, double arg1, double arg2, int arg3, int arg4, java.nio.DoubleBuffer arg5) {
		GL40.glMap1d(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glMap1d(int arg0, double arg1, double arg2, int arg3, int arg4, double[] arg5) {
		GL40.glMap1d(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void nglMap2f(int arg0, float arg1, float arg2, int arg3, int arg4, float arg5, float arg6, int arg7, int arg8, long arg9) {
		GL40.nglMap2f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glMap2f(int arg0, float arg1, float arg2, int arg3, int arg4, float arg5, float arg6, int arg7, int arg8, java.nio.FloatBuffer arg9) {
		GL40.glMap2f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glMap2f(int arg0, float arg1, float arg2, int arg3, int arg4, float arg5, float arg6, int arg7, int arg8, float[] arg9) {
		GL40.glMap2f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void nglMap2d(int arg0, double arg1, double arg2, int arg3, int arg4, double arg5, double arg6, int arg7, int arg8, long arg9) {
		GL40.nglMap2d(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glMap2d(int arg0, double arg1, double arg2, int arg3, int arg4, double arg5, double arg6, int arg7, int arg8, java.nio.DoubleBuffer arg9) {
		GL40.glMap2d(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glMap2d(int arg0, double arg1, double arg2, int arg3, int arg4, double arg5, double arg6, int arg7, int arg8, double[] arg9) {
		GL40.glMap2d(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	}

	@Override
	public void glMapGrid1f(int arg0, float arg1, float arg2) {
		GL40.glMapGrid1f(arg0, arg1, arg2);
	}

	@Override
	public void glMapGrid1d(int arg0, double arg1, double arg2) {
		GL40.glMapGrid1d(arg0, arg1, arg2);
	}

	@Override
	public void glMapGrid2f(int arg0, float arg1, float arg2, int arg3, float arg4, float arg5) {
		GL40.glMapGrid2f(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glMapGrid2d(int arg0, double arg1, double arg2, int arg3, double arg4, double arg5) {
		GL40.glMapGrid2d(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glMateriali(int arg0, int arg1, int arg2) {
		GL40.glMateriali(arg0, arg1, arg2);
	}

	@Override
	public void glMaterialf(int arg0, int arg1, float arg2) {
		GL40.glMaterialf(arg0, arg1, arg2);
	}

	@Override
	public void nglMaterialiv(int arg0, int arg1, long arg2) {
		GL40.nglMaterialiv(arg0, arg1, arg2);
	}

	@Override
	public void glMaterialiv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glMaterialiv(arg0, arg1, arg2);
	}

	@Override
	public void glMaterialiv(int arg0, int arg1, int[] arg2) {
		GL40.glMaterialiv(arg0, arg1, arg2);
	}

	@Override
	public void nglMaterialfv(int arg0, int arg1, long arg2) {
		GL40.nglMaterialfv(arg0, arg1, arg2);
	}

	@Override
	public void glMaterialfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glMaterialfv(arg0, arg1, arg2);
	}

	@Override
	public void glMaterialfv(int arg0, int arg1, float[] arg2) {
		GL40.glMaterialfv(arg0, arg1, arg2);
	}

	@Override
	public void glMatrixMode(int arg0) {
		GL40.glMatrixMode(arg0);
	}

	@Override
	public void nglMultMatrixf(long arg0) {
		GL40.nglMultMatrixf(arg0);
	}

	@Override
	public void glMultMatrixf(java.nio.FloatBuffer arg0) {
		GL40.glMultMatrixf(arg0);
	}

	@Override
	public void glMultMatrixf(float[] arg0) {
		GL40.glMultMatrixf(arg0);
	}

	@Override
	public void nglMultMatrixd(long arg0) {
		GL40.nglMultMatrixd(arg0);
	}

	@Override
	public void glMultMatrixd(java.nio.DoubleBuffer arg0) {
		GL40.glMultMatrixd(arg0);
	}

	@Override
	public void glMultMatrixd(double[] arg0) {
		GL40.glMultMatrixd(arg0);
	}

	@Override
	public void glFrustum(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) {
		GL40.glFrustum(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glNewList(int arg0, int arg1) {
		GL40.glNewList(arg0, arg1);
	}

	@Override
	public void glEndList() {
		GL40.glEndList();
	}

	@Override
	public void glNormal3f(float arg0, float arg1, float arg2) {
		GL40.glNormal3f(arg0, arg1, arg2);
	}

	@Override
	public void glNormal3b(byte arg0, byte arg1, byte arg2) {
		GL40.glNormal3b(arg0, arg1, arg2);
	}

	@Override
	public void glNormal3s(short arg0, short arg1, short arg2) {
		GL40.glNormal3s(arg0, arg1, arg2);
	}

	@Override
	public void glNormal3i(int arg0, int arg1, int arg2) {
		GL40.glNormal3i(arg0, arg1, arg2);
	}

	@Override
	public void glNormal3d(double arg0, double arg1, double arg2) {
		GL40.glNormal3d(arg0, arg1, arg2);
	}

	@Override
	public void nglNormal3fv(long arg0) {
		GL40.nglNormal3fv(arg0);
	}

	@Override
	public void glNormal3fv(java.nio.FloatBuffer arg0) {
		GL40.glNormal3fv(arg0);
	}

	@Override
	public void glNormal3fv(float[] arg0) {
		GL40.glNormal3fv(arg0);
	}

	@Override
	public void nglNormal3bv(long arg0) {
		GL40.nglNormal3bv(arg0);
	}

	@Override
	public void glNormal3bv(java.nio.ByteBuffer arg0) {
		GL40.glNormal3bv(arg0);
	}

	@Override
	public void nglNormal3sv(long arg0) {
		GL40.nglNormal3sv(arg0);
	}

	@Override
	public void glNormal3sv(short[] arg0) {
		GL40.glNormal3sv(arg0);
	}

	@Override
	public void glNormal3sv(java.nio.ShortBuffer arg0) {
		GL40.glNormal3sv(arg0);
	}

	@Override
	public void nglNormal3iv(long arg0) {
		GL40.nglNormal3iv(arg0);
	}

	@Override
	public void glNormal3iv(int[] arg0) {
		GL40.glNormal3iv(arg0);
	}

	@Override
	public void glNormal3iv(java.nio.IntBuffer arg0) {
		GL40.glNormal3iv(arg0);
	}

	@Override
	public void nglNormal3dv(long arg0) {
		GL40.nglNormal3dv(arg0);
	}

	@Override
	public void glNormal3dv(double[] arg0) {
		GL40.glNormal3dv(arg0);
	}

	@Override
	public void glNormal3dv(java.nio.DoubleBuffer arg0) {
		GL40.glNormal3dv(arg0);
	}

	@Override
	public void nglNormalPointer(int arg0, int arg1, long arg2) {
		GL40.nglNormalPointer(arg0, arg1, arg2);
	}

	@Override
	public void glNormalPointer(int arg0, int arg1, java.nio.ShortBuffer arg2) {
		GL40.glNormalPointer(arg0, arg1, arg2);
	}

	@Override
	public void glNormalPointer(int arg0, int arg1, long arg2) {
		GL40.glNormalPointer(arg0, arg1, arg2);
	}

	@Override
	public void glNormalPointer(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		GL40.glNormalPointer(arg0, arg1, arg2);
	}

	@Override
	public void glNormalPointer(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glNormalPointer(arg0, arg1, arg2);
	}

	@Override
	public void glNormalPointer(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glNormalPointer(arg0, arg1, arg2);
	}

	@Override
	public void glOrtho(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5) {
		GL40.glOrtho(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void glPassThrough(float arg0) {
		GL40.glPassThrough(arg0);
	}

	@Override
	public void nglPixelMapfv(int arg0, int arg1, long arg2) {
		GL40.nglPixelMapfv(arg0, arg1, arg2);
	}

	@Override
	public void glPixelMapfv(int arg0, float[] arg1) {
		GL40.glPixelMapfv(arg0, arg1);
	}

	@Override
	public void glPixelMapfv(int arg0, java.nio.FloatBuffer arg1) {
		GL40.glPixelMapfv(arg0, arg1);
	}

	@Override
	public void glPixelMapfv(int arg0, int arg1, long arg2) {
		GL40.glPixelMapfv(arg0, arg1, arg2);
	}

	@Override
	public void nglPixelMapusv(int arg0, int arg1, long arg2) {
		GL40.nglPixelMapusv(arg0, arg1, arg2);
	}

	@Override
	public void glPixelMapusv(int arg0, int arg1, long arg2) {
		GL40.glPixelMapusv(arg0, arg1, arg2);
	}

	@Override
	public void glPixelMapusv(int arg0, java.nio.ShortBuffer arg1) {
		GL40.glPixelMapusv(arg0, arg1);
	}

	@Override
	public void glPixelMapusv(int arg0, short[] arg1) {
		GL40.glPixelMapusv(arg0, arg1);
	}

	@Override
	public void nglPixelMapuiv(int arg0, int arg1, long arg2) {
		GL40.nglPixelMapuiv(arg0, arg1, arg2);
	}

	@Override
	public void glPixelMapuiv(int arg0, java.nio.IntBuffer arg1) {
		GL40.glPixelMapuiv(arg0, arg1);
	}

	@Override
	public void glPixelMapuiv(int arg0, int[] arg1) {
		GL40.glPixelMapuiv(arg0, arg1);
	}

	@Override
	public void glPixelMapuiv(int arg0, int arg1, long arg2) {
		GL40.glPixelMapuiv(arg0, arg1, arg2);
	}

	@Override
	public void glPixelStoref(int arg0, float arg1) {
		GL40.glPixelStoref(arg0, arg1);
	}

	@Override
	public void glPixelTransferi(int arg0, int arg1) {
		GL40.glPixelTransferi(arg0, arg1);
	}

	@Override
	public void glPixelTransferf(int arg0, float arg1) {
		GL40.glPixelTransferf(arg0, arg1);
	}

	@Override
	public void glPixelZoom(float arg0, float arg1) {
		GL40.glPixelZoom(arg0, arg1);
	}

	@Override
	public void glPointSize(float arg0) {
		GL40.glPointSize(arg0);
	}

	@Override
	public void glPolygonMode(int arg0, int arg1) {
		GL40.glPolygonMode(arg0, arg1);
	}

	@Override
	public void nglPolygonStipple(long arg0) {
		GL40.nglPolygonStipple(arg0);
	}

	@Override
	public void glPolygonStipple(long arg0) {
		GL40.glPolygonStipple(arg0);
	}

	@Override
	public void glPolygonStipple(java.nio.ByteBuffer arg0) {
		GL40.glPolygonStipple(arg0);
	}

	@Override
	public void glPushAttrib(int arg0) {
		GL40.glPushAttrib(arg0);
	}

	@Override
	public void glPushClientAttrib(int arg0) {
		GL40.glPushClientAttrib(arg0);
	}

	@Override
	public void glPopAttrib() {
		GL40.glPopAttrib();
	}

	@Override
	public void glPopClientAttrib() {
		GL40.glPopClientAttrib();
	}

	@Override
	public void glPopMatrix() {
		GL40.glPopMatrix();
	}

	@Override
	public void glPopName() {
		GL40.glPopName();
	}

	@Override
	public void nglPrioritizeTextures(int arg0, long arg1, long arg2) {
		GL40.nglPrioritizeTextures(arg0, arg1, arg2);
	}

	@Override
	public void glPrioritizeTextures(int[] arg0, float[] arg1) {
		GL40.glPrioritizeTextures(arg0, arg1);
	}

	@Override
	public void glPrioritizeTextures(java.nio.IntBuffer arg0, java.nio.FloatBuffer arg1) {
		GL40.glPrioritizeTextures(arg0, arg1);
	}

	@Override
	public void glPushMatrix() {
		GL40.glPushMatrix();
	}

	@Override
	public void glPushName(int arg0) {
		GL40.glPushName(arg0);
	}

	@Override
	public void glRasterPos2i(int arg0, int arg1) {
		GL40.glRasterPos2i(arg0, arg1);
	}

	@Override
	public void glRasterPos2s(short arg0, short arg1) {
		GL40.glRasterPos2s(arg0, arg1);
	}

	@Override
	public void glRasterPos2f(float arg0, float arg1) {
		GL40.glRasterPos2f(arg0, arg1);
	}

	@Override
	public void glRasterPos2d(double arg0, double arg1) {
		GL40.glRasterPos2d(arg0, arg1);
	}

	@Override
	public void nglRasterPos2iv(long arg0) {
		GL40.nglRasterPos2iv(arg0);
	}

	@Override
	public void glRasterPos2iv(java.nio.IntBuffer arg0) {
		GL40.glRasterPos2iv(arg0);
	}

	@Override
	public void glRasterPos2iv(int[] arg0) {
		GL40.glRasterPos2iv(arg0);
	}

	@Override
	public void nglRasterPos2sv(long arg0) {
		GL40.nglRasterPos2sv(arg0);
	}

	@Override
	public void glRasterPos2sv(short[] arg0) {
		GL40.glRasterPos2sv(arg0);
	}

	@Override
	public void glRasterPos2sv(java.nio.ShortBuffer arg0) {
		GL40.glRasterPos2sv(arg0);
	}

	@Override
	public void nglRasterPos2fv(long arg0) {
		GL40.nglRasterPos2fv(arg0);
	}

	@Override
	public void glRasterPos2fv(java.nio.FloatBuffer arg0) {
		GL40.glRasterPos2fv(arg0);
	}

	@Override
	public void glRasterPos2fv(float[] arg0) {
		GL40.glRasterPos2fv(arg0);
	}

	@Override
	public void nglRasterPos2dv(long arg0) {
		GL40.nglRasterPos2dv(arg0);
	}

	@Override
	public void glRasterPos2dv(double[] arg0) {
		GL40.glRasterPos2dv(arg0);
	}

	@Override
	public void glRasterPos2dv(java.nio.DoubleBuffer arg0) {
		GL40.glRasterPos2dv(arg0);
	}

	@Override
	public void glRasterPos3i(int arg0, int arg1, int arg2) {
		GL40.glRasterPos3i(arg0, arg1, arg2);
	}

	@Override
	public void glRasterPos3s(short arg0, short arg1, short arg2) {
		GL40.glRasterPos3s(arg0, arg1, arg2);
	}

	@Override
	public void glRasterPos3f(float arg0, float arg1, float arg2) {
		GL40.glRasterPos3f(arg0, arg1, arg2);
	}

	@Override
	public void glRasterPos3d(double arg0, double arg1, double arg2) {
		GL40.glRasterPos3d(arg0, arg1, arg2);
	}

	@Override
	public void nglRasterPos3iv(long arg0) {
		GL40.nglRasterPos3iv(arg0);
	}

	@Override
	public void glRasterPos3iv(java.nio.IntBuffer arg0) {
		GL40.glRasterPos3iv(arg0);
	}

	@Override
	public void glRasterPos3iv(int[] arg0) {
		GL40.glRasterPos3iv(arg0);
	}

	@Override
	public void nglRasterPos3sv(long arg0) {
		GL40.nglRasterPos3sv(arg0);
	}

	@Override
	public void glRasterPos3sv(java.nio.ShortBuffer arg0) {
		GL40.glRasterPos3sv(arg0);
	}

	@Override
	public void glRasterPos3sv(short[] arg0) {
		GL40.glRasterPos3sv(arg0);
	}

	@Override
	public void nglRasterPos3fv(long arg0) {
		GL40.nglRasterPos3fv(arg0);
	}

	@Override
	public void glRasterPos3fv(float[] arg0) {
		GL40.glRasterPos3fv(arg0);
	}

	@Override
	public void glRasterPos3fv(java.nio.FloatBuffer arg0) {
		GL40.glRasterPos3fv(arg0);
	}

	@Override
	public void nglRasterPos3dv(long arg0) {
		GL40.nglRasterPos3dv(arg0);
	}

	@Override
	public void glRasterPos3dv(java.nio.DoubleBuffer arg0) {
		GL40.glRasterPos3dv(arg0);
	}

	@Override
	public void glRasterPos3dv(double[] arg0) {
		GL40.glRasterPos3dv(arg0);
	}

	@Override
	public void glRasterPos4i(int arg0, int arg1, int arg2, int arg3) {
		GL40.glRasterPos4i(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glRasterPos4s(short arg0, short arg1, short arg2, short arg3) {
		GL40.glRasterPos4s(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glRasterPos4f(float arg0, float arg1, float arg2, float arg3) {
		GL40.glRasterPos4f(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glRasterPos4d(double arg0, double arg1, double arg2, double arg3) {
		GL40.glRasterPos4d(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglRasterPos4iv(long arg0) {
		GL40.nglRasterPos4iv(arg0);
	}

	@Override
	public void glRasterPos4iv(int[] arg0) {
		GL40.glRasterPos4iv(arg0);
	}

	@Override
	public void glRasterPos4iv(java.nio.IntBuffer arg0) {
		GL40.glRasterPos4iv(arg0);
	}

	@Override
	public void nglRasterPos4sv(long arg0) {
		GL40.nglRasterPos4sv(arg0);
	}

	@Override
	public void glRasterPos4sv(short[] arg0) {
		GL40.glRasterPos4sv(arg0);
	}

	@Override
	public void glRasterPos4sv(java.nio.ShortBuffer arg0) {
		GL40.glRasterPos4sv(arg0);
	}

	@Override
	public void nglRasterPos4fv(long arg0) {
		GL40.nglRasterPos4fv(arg0);
	}

	@Override
	public void glRasterPos4fv(java.nio.FloatBuffer arg0) {
		GL40.glRasterPos4fv(arg0);
	}

	@Override
	public void glRasterPos4fv(float[] arg0) {
		GL40.glRasterPos4fv(arg0);
	}

	@Override
	public void nglRasterPos4dv(long arg0) {
		GL40.nglRasterPos4dv(arg0);
	}

	@Override
	public void glRasterPos4dv(java.nio.DoubleBuffer arg0) {
		GL40.glRasterPos4dv(arg0);
	}

	@Override
	public void glRasterPos4dv(double[] arg0) {
		GL40.glRasterPos4dv(arg0);
	}

	@Override
	public void glRecti(int arg0, int arg1, int arg2, int arg3) {
		GL40.glRecti(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glRects(short arg0, short arg1, short arg2, short arg3) {
		GL40.glRects(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glRectf(float arg0, float arg1, float arg2, float arg3) {
		GL40.glRectf(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glRectd(double arg0, double arg1, double arg2, double arg3) {
		GL40.glRectd(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglRectiv(long arg0, long arg1) {
		GL40.nglRectiv(arg0, arg1);
	}

	@Override
	public void glRectiv(int[] arg0, int[] arg1) {
		GL40.glRectiv(arg0, arg1);
	}

	@Override
	public void glRectiv(java.nio.IntBuffer arg0, java.nio.IntBuffer arg1) {
		GL40.glRectiv(arg0, arg1);
	}

	@Override
	public void nglRectsv(long arg0, long arg1) {
		GL40.nglRectsv(arg0, arg1);
	}

	@Override
	public void glRectsv(short[] arg0, short[] arg1) {
		GL40.glRectsv(arg0, arg1);
	}

	@Override
	public void glRectsv(java.nio.ShortBuffer arg0, java.nio.ShortBuffer arg1) {
		GL40.glRectsv(arg0, arg1);
	}

	@Override
	public void nglRectfv(long arg0, long arg1) {
		GL40.nglRectfv(arg0, arg1);
	}

	@Override
	public void glRectfv(java.nio.FloatBuffer arg0, java.nio.FloatBuffer arg1) {
		GL40.glRectfv(arg0, arg1);
	}

	@Override
	public void glRectfv(float[] arg0, float[] arg1) {
		GL40.glRectfv(arg0, arg1);
	}

	@Override
	public void nglRectdv(long arg0, long arg1) {
		GL40.nglRectdv(arg0, arg1);
	}

	@Override
	public void glRectdv(java.nio.DoubleBuffer arg0, java.nio.DoubleBuffer arg1) {
		GL40.glRectdv(arg0, arg1);
	}

	@Override
	public void glRectdv(double[] arg0, double[] arg1) {
		GL40.glRectdv(arg0, arg1);
	}

	@Override
	public int glRenderMode(int arg0) {
		return GL40.glRenderMode(arg0);
	}

	@Override
	public void glRotatef(float arg0, float arg1, float arg2, float arg3) {
		GL40.glRotatef(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glRotated(double arg0, double arg1, double arg2, double arg3) {
		GL40.glRotated(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glScalef(float arg0, float arg1, float arg2) {
		GL40.glScalef(arg0, arg1, arg2);
	}

	@Override
	public void glScaled(double arg0, double arg1, double arg2) {
		GL40.glScaled(arg0, arg1, arg2);
	}

	@Override
	public void nglSelectBuffer(int arg0, long arg1) {
		GL40.nglSelectBuffer(arg0, arg1);
	}

	@Override
	public void glSelectBuffer(java.nio.IntBuffer arg0) {
		GL40.glSelectBuffer(arg0);
	}

	@Override
	public void glSelectBuffer(int[] arg0) {
		GL40.glSelectBuffer(arg0);
	}

	@Override
	public void glShadeModel(int arg0) {
		GL40.glShadeModel(arg0);
	}

	@Override
	public void glTexCoord1f(float arg0) {
		GL40.glTexCoord1f(arg0);
	}

	@Override
	public void glTexCoord1s(short arg0) {
		GL40.glTexCoord1s(arg0);
	}

	@Override
	public void glTexCoord1i(int arg0) {
		GL40.glTexCoord1i(arg0);
	}

	@Override
	public void glTexCoord1d(double arg0) {
		GL40.glTexCoord1d(arg0);
	}

	@Override
	public void nglTexCoord1fv(long arg0) {
		GL40.nglTexCoord1fv(arg0);
	}

	@Override
	public void glTexCoord1fv(float[] arg0) {
		GL40.glTexCoord1fv(arg0);
	}

	@Override
	public void glTexCoord1fv(java.nio.FloatBuffer arg0) {
		GL40.glTexCoord1fv(arg0);
	}

	@Override
	public void nglTexCoord1sv(long arg0) {
		GL40.nglTexCoord1sv(arg0);
	}

	@Override
	public void glTexCoord1sv(java.nio.ShortBuffer arg0) {
		GL40.glTexCoord1sv(arg0);
	}

	@Override
	public void glTexCoord1sv(short[] arg0) {
		GL40.glTexCoord1sv(arg0);
	}

	@Override
	public void nglTexCoord1iv(long arg0) {
		GL40.nglTexCoord1iv(arg0);
	}

	@Override
	public void glTexCoord1iv(java.nio.IntBuffer arg0) {
		GL40.glTexCoord1iv(arg0);
	}

	@Override
	public void glTexCoord1iv(int[] arg0) {
		GL40.glTexCoord1iv(arg0);
	}

	@Override
	public void nglTexCoord1dv(long arg0) {
		GL40.nglTexCoord1dv(arg0);
	}

	@Override
	public void glTexCoord1dv(java.nio.DoubleBuffer arg0) {
		GL40.glTexCoord1dv(arg0);
	}

	@Override
	public void glTexCoord1dv(double[] arg0) {
		GL40.glTexCoord1dv(arg0);
	}

	@Override
	public void glTexCoord2f(float arg0, float arg1) {
		GL40.glTexCoord2f(arg0, arg1);
	}

	@Override
	public void glTexCoord2s(short arg0, short arg1) {
		GL40.glTexCoord2s(arg0, arg1);
	}

	@Override
	public void glTexCoord2i(int arg0, int arg1) {
		GL40.glTexCoord2i(arg0, arg1);
	}

	@Override
	public void glTexCoord2d(double arg0, double arg1) {
		GL40.glTexCoord2d(arg0, arg1);
	}

	@Override
	public void nglTexCoord2fv(long arg0) {
		GL40.nglTexCoord2fv(arg0);
	}

	@Override
	public void glTexCoord2fv(float[] arg0) {
		GL40.glTexCoord2fv(arg0);
	}

	@Override
	public void glTexCoord2fv(java.nio.FloatBuffer arg0) {
		GL40.glTexCoord2fv(arg0);
	}

	@Override
	public void nglTexCoord2sv(long arg0) {
		GL40.nglTexCoord2sv(arg0);
	}

	@Override
	public void glTexCoord2sv(short[] arg0) {
		GL40.glTexCoord2sv(arg0);
	}

	@Override
	public void glTexCoord2sv(java.nio.ShortBuffer arg0) {
		GL40.glTexCoord2sv(arg0);
	}

	@Override
	public void nglTexCoord2iv(long arg0) {
		GL40.nglTexCoord2iv(arg0);
	}

	@Override
	public void glTexCoord2iv(java.nio.IntBuffer arg0) {
		GL40.glTexCoord2iv(arg0);
	}

	@Override
	public void glTexCoord2iv(int[] arg0) {
		GL40.glTexCoord2iv(arg0);
	}

	@Override
	public void nglTexCoord2dv(long arg0) {
		GL40.nglTexCoord2dv(arg0);
	}

	@Override
	public void glTexCoord2dv(java.nio.DoubleBuffer arg0) {
		GL40.glTexCoord2dv(arg0);
	}

	@Override
	public void glTexCoord2dv(double[] arg0) {
		GL40.glTexCoord2dv(arg0);
	}

	@Override
	public void glTexCoord3f(float arg0, float arg1, float arg2) {
		GL40.glTexCoord3f(arg0, arg1, arg2);
	}

	@Override
	public void glTexCoord3s(short arg0, short arg1, short arg2) {
		GL40.glTexCoord3s(arg0, arg1, arg2);
	}

	@Override
	public void glTexCoord3i(int arg0, int arg1, int arg2) {
		GL40.glTexCoord3i(arg0, arg1, arg2);
	}

	@Override
	public void glTexCoord3d(double arg0, double arg1, double arg2) {
		GL40.glTexCoord3d(arg0, arg1, arg2);
	}

	@Override
	public void nglTexCoord3fv(long arg0) {
		GL40.nglTexCoord3fv(arg0);
	}

	@Override
	public void glTexCoord3fv(float[] arg0) {
		GL40.glTexCoord3fv(arg0);
	}

	@Override
	public void glTexCoord3fv(java.nio.FloatBuffer arg0) {
		GL40.glTexCoord3fv(arg0);
	}

	@Override
	public void nglTexCoord3sv(long arg0) {
		GL40.nglTexCoord3sv(arg0);
	}

	@Override
	public void glTexCoord3sv(java.nio.ShortBuffer arg0) {
		GL40.glTexCoord3sv(arg0);
	}

	@Override
	public void glTexCoord3sv(short[] arg0) {
		GL40.glTexCoord3sv(arg0);
	}

	@Override
	public void nglTexCoord3iv(long arg0) {
		GL40.nglTexCoord3iv(arg0);
	}

	@Override
	public void glTexCoord3iv(int[] arg0) {
		GL40.glTexCoord3iv(arg0);
	}

	@Override
	public void glTexCoord3iv(java.nio.IntBuffer arg0) {
		GL40.glTexCoord3iv(arg0);
	}

	@Override
	public void nglTexCoord3dv(long arg0) {
		GL40.nglTexCoord3dv(arg0);
	}

	@Override
	public void glTexCoord3dv(double[] arg0) {
		GL40.glTexCoord3dv(arg0);
	}

	@Override
	public void glTexCoord3dv(java.nio.DoubleBuffer arg0) {
		GL40.glTexCoord3dv(arg0);
	}

	@Override
	public void glTexCoord4f(float arg0, float arg1, float arg2, float arg3) {
		GL40.glTexCoord4f(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTexCoord4s(short arg0, short arg1, short arg2, short arg3) {
		GL40.glTexCoord4s(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTexCoord4i(int arg0, int arg1, int arg2, int arg3) {
		GL40.glTexCoord4i(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTexCoord4d(double arg0, double arg1, double arg2, double arg3) {
		GL40.glTexCoord4d(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglTexCoord4fv(long arg0) {
		GL40.nglTexCoord4fv(arg0);
	}

	@Override
	public void glTexCoord4fv(float[] arg0) {
		GL40.glTexCoord4fv(arg0);
	}

	@Override
	public void glTexCoord4fv(java.nio.FloatBuffer arg0) {
		GL40.glTexCoord4fv(arg0);
	}

	@Override
	public void nglTexCoord4sv(long arg0) {
		GL40.nglTexCoord4sv(arg0);
	}

	@Override
	public void glTexCoord4sv(short[] arg0) {
		GL40.glTexCoord4sv(arg0);
	}

	@Override
	public void glTexCoord4sv(java.nio.ShortBuffer arg0) {
		GL40.glTexCoord4sv(arg0);
	}

	@Override
	public void nglTexCoord4iv(long arg0) {
		GL40.nglTexCoord4iv(arg0);
	}

	@Override
	public void glTexCoord4iv(java.nio.IntBuffer arg0) {
		GL40.glTexCoord4iv(arg0);
	}

	@Override
	public void glTexCoord4iv(int[] arg0) {
		GL40.glTexCoord4iv(arg0);
	}

	@Override
	public void nglTexCoord4dv(long arg0) {
		GL40.nglTexCoord4dv(arg0);
	}

	@Override
	public void glTexCoord4dv(double[] arg0) {
		GL40.glTexCoord4dv(arg0);
	}

	@Override
	public void glTexCoord4dv(java.nio.DoubleBuffer arg0) {
		GL40.glTexCoord4dv(arg0);
	}

	@Override
	public void nglTexCoordPointer(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglTexCoordPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTexCoordPointer(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glTexCoordPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTexCoordPointer(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		GL40.glTexCoordPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTexCoordPointer(int arg0, int arg1, int arg2, long arg3) {
		GL40.glTexCoordPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTexCoordPointer(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3) {
		GL40.glTexCoordPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTexCoordPointer(int arg0, int arg1, int arg2, java.nio.FloatBuffer arg3) {
		GL40.glTexCoordPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glTexEnvi(int arg0, int arg1, int arg2) {
		GL40.glTexEnvi(arg0, arg1, arg2);
	}

	@Override
	public void nglTexEnviv(int arg0, int arg1, long arg2) {
		GL40.nglTexEnviv(arg0, arg1, arg2);
	}

	@Override
	public void glTexEnviv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glTexEnviv(arg0, arg1, arg2);
	}

	@Override
	public void glTexEnviv(int arg0, int arg1, int[] arg2) {
		GL40.glTexEnviv(arg0, arg1, arg2);
	}

	@Override
	public void glTexEnvf(int arg0, int arg1, float arg2) {
		GL40.glTexEnvf(arg0, arg1, arg2);
	}

	@Override
	public void nglTexEnvfv(int arg0, int arg1, long arg2) {
		GL40.nglTexEnvfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexEnvfv(int arg0, int arg1, float[] arg2) {
		GL40.glTexEnvfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexEnvfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glTexEnvfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexGeni(int arg0, int arg1, int arg2) {
		GL40.glTexGeni(arg0, arg1, arg2);
	}

	@Override
	public void nglTexGeniv(int arg0, int arg1, long arg2) {
		GL40.nglTexGeniv(arg0, arg1, arg2);
	}

	@Override
	public void glTexGeniv(int arg0, int arg1, java.nio.IntBuffer arg2) {
		GL40.glTexGeniv(arg0, arg1, arg2);
	}

	@Override
	public void glTexGeniv(int arg0, int arg1, int[] arg2) {
		GL40.glTexGeniv(arg0, arg1, arg2);
	}

	@Override
	public void glTexGenf(int arg0, int arg1, float arg2) {
		GL40.glTexGenf(arg0, arg1, arg2);
	}

	@Override
	public void nglTexGenfv(int arg0, int arg1, long arg2) {
		GL40.nglTexGenfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexGenfv(int arg0, int arg1, float[] arg2) {
		GL40.glTexGenfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexGenfv(int arg0, int arg1, java.nio.FloatBuffer arg2) {
		GL40.glTexGenfv(arg0, arg1, arg2);
	}

	@Override
	public void glTexGend(int arg0, int arg1, double arg2) {
		GL40.glTexGend(arg0, arg1, arg2);
	}

	@Override
	public void nglTexGendv(int arg0, int arg1, long arg2) {
		GL40.nglTexGendv(arg0, arg1, arg2);
	}

	@Override
	public void glTexGendv(int arg0, int arg1, double[] arg2) {
		GL40.glTexGendv(arg0, arg1, arg2);
	}

	@Override
	public void glTexGendv(int arg0, int arg1, java.nio.DoubleBuffer arg2) {
		GL40.glTexGendv(arg0, arg1, arg2);
	}

	@Override
	public void nglTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, long arg7) {
		GL40.nglTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, double[] arg7) {
		GL40.glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, float[] arg7) {
		GL40.glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.FloatBuffer arg7) {
		GL40.glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.IntBuffer arg7) {
		GL40.glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int[] arg7) {
		GL40.glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, short[] arg7) {
		GL40.glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.DoubleBuffer arg7) {
		GL40.glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.ByteBuffer arg7) {
		GL40.glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, long arg7) {
		GL40.glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, java.nio.ShortBuffer arg7) {
		GL40.glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	}

	@Override
	public void glCopyTexImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6) {
		GL40.glCopyTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glCopyTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
		GL40.glCopyTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5);
	}

	@Override
	public void nglTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		GL40.nglTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, long arg6) {
		GL40.glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.ShortBuffer arg6) {
		GL40.glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.IntBuffer arg6) {
		GL40.glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.FloatBuffer arg6) {
		GL40.glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.DoubleBuffer arg6) {
		GL40.glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, double[] arg6) {
		GL40.glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, float[] arg6) {
		GL40.glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int[] arg6) {
		GL40.glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, short[] arg6) {
		GL40.glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTexSubImage1D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, java.nio.ByteBuffer arg6) {
		GL40.glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
	}

	@Override
	public void glTranslatef(float arg0, float arg1, float arg2) {
		GL40.glTranslatef(arg0, arg1, arg2);
	}

	@Override
	public void glTranslated(double arg0, double arg1, double arg2) {
		GL40.glTranslated(arg0, arg1, arg2);
	}

	@Override
	public void glVertex2f(float arg0, float arg1) {
		GL40.glVertex2f(arg0, arg1);
	}

	@Override
	public void glVertex2s(short arg0, short arg1) {
		GL40.glVertex2s(arg0, arg1);
	}

	@Override
	public void glVertex2i(int arg0, int arg1) {
		GL40.glVertex2i(arg0, arg1);
	}

	@Override
	public void glVertex2d(double arg0, double arg1) {
		GL40.glVertex2d(arg0, arg1);
	}

	@Override
	public void nglVertex2fv(long arg0) {
		GL40.nglVertex2fv(arg0);
	}

	@Override
	public void glVertex2fv(float[] arg0) {
		GL40.glVertex2fv(arg0);
	}

	@Override
	public void glVertex2fv(java.nio.FloatBuffer arg0) {
		GL40.glVertex2fv(arg0);
	}

	@Override
	public void nglVertex2sv(long arg0) {
		GL40.nglVertex2sv(arg0);
	}

	@Override
	public void glVertex2sv(short[] arg0) {
		GL40.glVertex2sv(arg0);
	}

	@Override
	public void glVertex2sv(java.nio.ShortBuffer arg0) {
		GL40.glVertex2sv(arg0);
	}

	@Override
	public void nglVertex2iv(long arg0) {
		GL40.nglVertex2iv(arg0);
	}

	@Override
	public void glVertex2iv(int[] arg0) {
		GL40.glVertex2iv(arg0);
	}

	@Override
	public void glVertex2iv(java.nio.IntBuffer arg0) {
		GL40.glVertex2iv(arg0);
	}

	@Override
	public void nglVertex2dv(long arg0) {
		GL40.nglVertex2dv(arg0);
	}

	@Override
	public void glVertex2dv(java.nio.DoubleBuffer arg0) {
		GL40.glVertex2dv(arg0);
	}

	@Override
	public void glVertex2dv(double[] arg0) {
		GL40.glVertex2dv(arg0);
	}

	@Override
	public void glVertex3f(float arg0, float arg1, float arg2) {
		GL40.glVertex3f(arg0, arg1, arg2);
	}

	@Override
	public void glVertex3s(short arg0, short arg1, short arg2) {
		GL40.glVertex3s(arg0, arg1, arg2);
	}

	@Override
	public void glVertex3i(int arg0, int arg1, int arg2) {
		GL40.glVertex3i(arg0, arg1, arg2);
	}

	@Override
	public void glVertex3d(double arg0, double arg1, double arg2) {
		GL40.glVertex3d(arg0, arg1, arg2);
	}

	@Override
	public void nglVertex3fv(long arg0) {
		GL40.nglVertex3fv(arg0);
	}

	@Override
	public void glVertex3fv(float[] arg0) {
		GL40.glVertex3fv(arg0);
	}

	@Override
	public void glVertex3fv(java.nio.FloatBuffer arg0) {
		GL40.glVertex3fv(arg0);
	}

	@Override
	public void nglVertex3sv(long arg0) {
		GL40.nglVertex3sv(arg0);
	}

	@Override
	public void glVertex3sv(short[] arg0) {
		GL40.glVertex3sv(arg0);
	}

	@Override
	public void glVertex3sv(java.nio.ShortBuffer arg0) {
		GL40.glVertex3sv(arg0);
	}

	@Override
	public void nglVertex3iv(long arg0) {
		GL40.nglVertex3iv(arg0);
	}

	@Override
	public void glVertex3iv(int[] arg0) {
		GL40.glVertex3iv(arg0);
	}

	@Override
	public void glVertex3iv(java.nio.IntBuffer arg0) {
		GL40.glVertex3iv(arg0);
	}

	@Override
	public void nglVertex3dv(long arg0) {
		GL40.nglVertex3dv(arg0);
	}

	@Override
	public void glVertex3dv(java.nio.DoubleBuffer arg0) {
		GL40.glVertex3dv(arg0);
	}

	@Override
	public void glVertex3dv(double[] arg0) {
		GL40.glVertex3dv(arg0);
	}

	@Override
	public void glVertex4f(float arg0, float arg1, float arg2, float arg3) {
		GL40.glVertex4f(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertex4s(short arg0, short arg1, short arg2, short arg3) {
		GL40.glVertex4s(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertex4i(int arg0, int arg1, int arg2, int arg3) {
		GL40.glVertex4i(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertex4d(double arg0, double arg1, double arg2, double arg3) {
		GL40.glVertex4d(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglVertex4fv(long arg0) {
		GL40.nglVertex4fv(arg0);
	}

	@Override
	public void glVertex4fv(java.nio.FloatBuffer arg0) {
		GL40.glVertex4fv(arg0);
	}

	@Override
	public void glVertex4fv(float[] arg0) {
		GL40.glVertex4fv(arg0);
	}

	@Override
	public void nglVertex4sv(long arg0) {
		GL40.nglVertex4sv(arg0);
	}

	@Override
	public void glVertex4sv(java.nio.ShortBuffer arg0) {
		GL40.glVertex4sv(arg0);
	}

	@Override
	public void glVertex4sv(short[] arg0) {
		GL40.glVertex4sv(arg0);
	}

	@Override
	public void nglVertex4iv(long arg0) {
		GL40.nglVertex4iv(arg0);
	}

	@Override
	public void glVertex4iv(int[] arg0) {
		GL40.glVertex4iv(arg0);
	}

	@Override
	public void glVertex4iv(java.nio.IntBuffer arg0) {
		GL40.glVertex4iv(arg0);
	}

	@Override
	public void nglVertex4dv(long arg0) {
		GL40.nglVertex4dv(arg0);
	}

	@Override
	public void glVertex4dv(java.nio.DoubleBuffer arg0) {
		GL40.glVertex4dv(arg0);
	}

	@Override
	public void glVertex4dv(double[] arg0) {
		GL40.glVertex4dv(arg0);
	}

	@Override
	public void nglVertexPointer(int arg0, int arg1, int arg2, long arg3) {
		GL40.nglVertexPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexPointer(int arg0, int arg1, int arg2, java.nio.FloatBuffer arg3) {
		GL40.glVertexPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexPointer(int arg0, int arg1, int arg2, long arg3) {
		GL40.glVertexPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexPointer(int arg0, int arg1, int arg2, java.nio.ByteBuffer arg3) {
		GL40.glVertexPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexPointer(int arg0, int arg1, int arg2, java.nio.ShortBuffer arg3) {
		GL40.glVertexPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void glVertexPointer(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		GL40.glVertexPointer(arg0, arg1, arg2, arg3);
	}

	@Override
	public void nglGetProgramBinary(int arg0, int arg1, long arg2, long arg3, long arg4) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glGetProgramBinary(int arg0, int[] arg1, int[] arg2, java.nio.ByteBuffer arg3) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glGetProgramBinary(int arg0, java.nio.IntBuffer arg1, java.nio.IntBuffer arg2, java.nio.ByteBuffer arg3) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void nglProgramBinary(int arg0, int arg1, long arg2, int arg3) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glProgramBinary(int arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glProgramParameteri(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void nglInvalidateFramebuffer(int arg0, int arg1, long arg2) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glInvalidateFramebuffer(int arg0, java.nio.IntBuffer arg1) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glInvalidateFramebuffer(int arg0, int arg1) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glInvalidateFramebuffer(int arg0, int[] arg1) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void nglInvalidateSubFramebuffer(int arg0, int arg1, long arg2, int arg3, int arg4, int arg5, int arg6) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glInvalidateSubFramebuffer(int arg0, int[] arg1, int arg2, int arg3, int arg4, int arg5) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glInvalidateSubFramebuffer(int arg0, java.nio.IntBuffer arg1, int arg2, int arg3, int arg4, int arg5) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glInvalidateSubFramebuffer(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glTexStorage2D(int arg0, int arg1, int arg2, int arg3, int arg4) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glTexStorage3D(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void nglGetInternalformativ(int arg0, int arg1, int arg2, int arg3, long arg4) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glGetInternalformativ(int arg0, int arg1, int arg2, int[] arg3) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glGetInternalformativ(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public int glGetInternalformati(int arg0, int arg1, int arg2) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glClearDepthf(float arg0) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glDepthRangef(float arg0, float arg1) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void nglGetShaderPrecisionFormat(int arg0, int arg1, long arg2, long arg3) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glGetShaderPrecisionFormat(int arg0, int arg1, java.nio.IntBuffer arg2, java.nio.IntBuffer arg3) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glGetShaderPrecisionFormat(int arg0, int arg1, int[] arg2, int[] arg3) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glReleaseShaderCompiler() {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void nglShaderBinary(int arg0, long arg1, int arg2, long arg3, int arg4) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glShaderBinary(int[] arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GL40.");
	}

	@Override
	public void glShaderBinary(java.nio.IntBuffer arg0, int arg1, java.nio.ByteBuffer arg2) {
		throw new RuntimeException("Not implemented by GL40.");
	}
}
